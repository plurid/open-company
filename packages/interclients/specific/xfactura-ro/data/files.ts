export const files = {
  ".npmrc": {
    "file": {
      "contents": "registry=https://registry.npmjs.org/\nalways-auth=true\nauto-install-peers=true\nstrict-peer-dependencies=false\n"
    }
  },
  "composer.json": {
    "file": {
      "contents": "{\n    \"require\": {\n        \"josemmo/einvoicing\": \"^0.2.7\"\n    }\n}\n"
    }
  },
  "composer.lock": {
    "file": {
      "contents": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"0542b7264e9ef9c6fc51bf9c49672617\",\n    \"packages\": [\n        {\n            \"name\": \"josemmo/einvoicing\",\n            \"version\": \"v0.2.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/josemmo/einvoicing.git\",\n                \"reference\": \"fb318980fafda05da66385221d590f610945ee28\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/josemmo/einvoicing/zipball/fb318980fafda05da66385221d590f610945ee28\",\n                \"reference\": \"fb318980fafda05da66385221d590f610945ee28\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"josemmo/uxml\": \"^0.1.4\",\n                \"php\": \">=7.1\"\n            },\n            \"require-dev\": {\n                \"ext-openssl\": \"*\",\n                \"phan/phan\": \"*\",\n                \"phpdocumentor/reflection\": \"^3.0|^5.1\",\n                \"symfony/phpunit-bridge\": \"*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Einvoicing\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"José Miguel Moreno\",\n                    \"email\": \"josemmo@pm.me\",\n                    \"homepage\": \"https://github.com/josemmo\"\n                }\n            ],\n            \"description\": \"Library for reading and creating European-compliant electronic invoices (EN 16931)\",\n            \"homepage\": \"https://github.com/josemmo/einvoicing\",\n            \"keywords\": [\n                \"cii\",\n                \"invoice\",\n                \"invoicing\",\n                \"peppol\",\n                \"ubl\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/josemmo/einvoicing/issues\",\n                \"source\": \"https://github.com/josemmo/einvoicing/tree/v0.2.7\"\n            },\n            \"time\": \"2023-10-03T18:14:45+00:00\"\n        },\n        {\n            \"name\": \"josemmo/uxml\",\n            \"version\": \"v0.1.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/josemmo/uxml.git\",\n                \"reference\": \"bcd7d8e410285c642116294e01581374d6be696f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/josemmo/uxml/zipball/bcd7d8e410285c642116294e01581374d6be696f\",\n                \"reference\": \"bcd7d8e410285c642116294e01581374d6be696f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"lib-libxml\": \"*\",\n                \"php\": \">=7.1\"\n            },\n            \"require-dev\": {\n                \"phan/phan\": \"*\",\n                \"symfony/phpunit-bridge\": \"*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"UXML\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"José Miguel Moreno\",\n                    \"email\": \"josemmo@pm.me\",\n                    \"homepage\": \"https://github.com/josemmo\"\n                }\n            ],\n            \"description\": \"Uncomplicated XML manipulation library with a clean and concise syntax\",\n            \"homepage\": \"https://github.com/josemmo/uxml\",\n            \"keywords\": [\n                \"xml\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/josemmo/uxml/issues\",\n                \"source\": \"https://github.com/josemmo/uxml/tree/v0.1.4\"\n            },\n            \"time\": \"2022-05-28T16:43:25+00:00\"\n        }\n    ],\n    \"packages-dev\": [],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": [],\n    \"platform-dev\": [],\n    \"plugin-api-version\": \"2.6.0\"\n}\n"
    }
  },
  "data.json": {
    "file": {
      "contents": ""
    }
  },
  "index.js": {
    "file": {
      "contents": "import {\n    NodePHP,\n} from '@php-wasm/node';\n\nimport fs from 'node:fs';\n\n\n\nconst php = await NodePHP.load('8.0', {\n\trequestHandler: {\n\t\tdocumentRoot: '/srv',\n        absoluteUrl: 'http://localhost:3001',\n\t},\n});\n\nphp.mkdir('/srv');\nphp.chdir('/srv');\n\nphp.mount(process.cwd(), '/srv');\n\n\n\nconst direct = async () => {\n    try {\n        const data = await fs.promises.readFile('./data.json', 'utf8');\n        if (!data) {\n            return;\n        }\n\n        const response = await php.request({\n            method: 'POST',\n            url: '/run.php',\n            body: data,\n        });\n        console.log(JSON.stringify({\n            status: true,\n            data: response.text,\n        }));\n\n        process.exit(0);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\ndirect();\n"
    }
  },
  "package-lock.json": {
    "file": {
      "contents": "{\n  \"name\": \"node-php\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"node-php\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"@php-wasm/node\": \"^0.5.2\"\n      }\n    },\n    \"node_modules/@php-wasm/node\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/@php-wasm/node/-/node-0.5.2.tgz\",\n      \"integrity\": \"sha512-0tQqHtrBKrF02eBGJEfhcbdPd0L3sBvMGlnFQno7/szaYQy/9MANCeq5GeaUvwWUqg/0n4FhIE5yqZ7WTtqVUw==\",\n      \"dependencies\": {\n        \"@php-wasm/node-polyfills\": \"0.5.2\",\n        \"@php-wasm/universal\": \"0.5.2\",\n        \"@php-wasm/util\": \"0.5.2\",\n        \"comlink\": \"^4.4.1\",\n        \"express\": \"4.18.2\",\n        \"ws\": \"8.13.0\",\n        \"yargs\": \"17.7.2\"\n      },\n      \"engines\": {\n        \"node\": \">=16.15.1\",\n        \"npm\": \">=8.11.0\"\n      }\n    },\n    \"node_modules/@php-wasm/node-polyfills\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/@php-wasm/node-polyfills/-/node-polyfills-0.5.2.tgz\",\n      \"integrity\": \"sha512-AXrFGkjamy5dwSUC6lHKKAYZ3VFQKwhKJ9G+dDQgxg1nML6rP31M3X1pYFXPlkday3txnnsEGZ14NlVrSHxHWA==\"\n    },\n    \"node_modules/@php-wasm/universal\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/@php-wasm/universal/-/universal-0.5.2.tgz\",\n      \"integrity\": \"sha512-jqkVYW9K6ZA3kTb45ogKNzVgRmNPojmoGy55jm78AjXY1XCdGar1yp+pp67nY6wMr0GWllWIc34AgDHzPacXoQ==\",\n      \"engines\": {\n        \"node\": \">=16.15.1\",\n        \"npm\": \">=8.11.0\"\n      }\n    },\n    \"node_modules/@php-wasm/util\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/@php-wasm/util/-/util-0.5.2.tgz\",\n      \"integrity\": \"sha512-DSsB5jRCBQX7KL0BJxkDat/Ihlr5+k7sjkmJRJO3e+OsBAVZOm5bxo7sqg0A8Mxdqzfnve/JoUeCSIdL7w+rgg==\",\n      \"engines\": {\n        \"node\": \">=16.15.1\",\n        \"npm\": \">=8.11.0\"\n      }\n    },\n    \"node_modules/accepts\": {\n      \"version\": \"1.3.8\",\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\n      \"dependencies\": {\n        \"mime-types\": \"~2.1.34\",\n        \"negotiator\": \"0.6.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/ansi-regex\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/ansi-styles\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\n      \"dependencies\": {\n        \"color-convert\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\n      }\n    },\n    \"node_modules/array-flatten\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\n      \"integrity\": \"sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==\"\n    },\n    \"node_modules/body-parser\": {\n      \"version\": \"1.20.1\",\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz\",\n      \"integrity\": \"sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"content-type\": \"~1.0.4\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"on-finished\": \"2.4.1\",\n        \"qs\": \"6.11.0\",\n        \"raw-body\": \"2.5.1\",\n        \"type-is\": \"~1.6.18\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/bytes\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz\",\n      \"integrity\": \"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/call-bind\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/call-bind/-/call-bind-1.0.5.tgz\",\n      \"integrity\": \"sha512-C3nQxfFZxFRVoJoGKKI8y3MOEo129NQ+FgQ08iye+Mk4zNZZGdjfs06bVTr+DBSlA66Q2VEcMki/cUCP4SercQ==\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\",\n        \"get-intrinsic\": \"^1.2.1\",\n        \"set-function-length\": \"^1.1.1\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/cliui\": {\n      \"version\": \"8.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz\",\n      \"integrity\": \"sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==\",\n      \"dependencies\": {\n        \"string-width\": \"^4.2.0\",\n        \"strip-ansi\": \"^6.0.1\",\n        \"wrap-ansi\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\n      \"dependencies\": {\n        \"color-name\": \"~1.1.4\"\n      },\n      \"engines\": {\n        \"node\": \">=7.0.0\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\n    },\n    \"node_modules/comlink\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/comlink/-/comlink-4.4.1.tgz\",\n      \"integrity\": \"sha512-+1dlx0aY5Jo1vHy/tSsIGpSkN4tS9rZSW8FIhG0JH/crs9wwweswIo/POr451r7bZww3hFbPAKnTpimzL/mm4Q==\"\n    },\n    \"node_modules/content-disposition\": {\n      \"version\": \"0.5.4\",\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz\",\n      \"integrity\": \"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\",\n      \"dependencies\": {\n        \"safe-buffer\": \"5.2.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/content-type\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz\",\n      \"integrity\": \"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie\": {\n      \"version\": \"0.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz\",\n      \"integrity\": \"sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/cookie-signature\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\n      \"integrity\": \"sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==\"\n    },\n    \"node_modules/debug\": {\n      \"version\": \"2.6.9\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\n      \"dependencies\": {\n        \"ms\": \"2.0.0\"\n      }\n    },\n    \"node_modules/define-data-property\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.1.tgz\",\n      \"integrity\": \"sha512-E7uGkTzkk1d0ByLeSc6ZsFS79Axg+m1P/VsgYsxHgiuc3tFSj+MjMIwe90FC4lOAZzNBdY7kkO2P2wKdsQ1vgQ==\",\n      \"dependencies\": {\n        \"get-intrinsic\": \"^1.2.1\",\n        \"gopd\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/depd\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-2.0.0.tgz\",\n      \"integrity\": \"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/destroy\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz\",\n      \"integrity\": \"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\",\n      \"engines\": {\n        \"node\": \">= 0.8\",\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\n      }\n    },\n    \"node_modules/ee-first\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\n      \"integrity\": \"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\"\n    },\n    \"node_modules/emoji-regex\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\"\n    },\n    \"node_modules/encodeurl\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\n      \"integrity\": \"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/escalade\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz\",\n      \"integrity\": \"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/escape-html\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\n      \"integrity\": \"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\"\n    },\n    \"node_modules/etag\": {\n      \"version\": \"1.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\n      \"integrity\": \"sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/express\": {\n      \"version\": \"4.18.2\",\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.18.2.tgz\",\n      \"integrity\": \"sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==\",\n      \"dependencies\": {\n        \"accepts\": \"~1.3.8\",\n        \"array-flatten\": \"1.1.1\",\n        \"body-parser\": \"1.20.1\",\n        \"content-disposition\": \"0.5.4\",\n        \"content-type\": \"~1.0.4\",\n        \"cookie\": \"0.5.0\",\n        \"cookie-signature\": \"1.0.6\",\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"finalhandler\": \"1.2.0\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"merge-descriptors\": \"1.0.1\",\n        \"methods\": \"~1.1.2\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"path-to-regexp\": \"0.1.7\",\n        \"proxy-addr\": \"~2.0.7\",\n        \"qs\": \"6.11.0\",\n        \"range-parser\": \"~1.2.1\",\n        \"safe-buffer\": \"5.2.1\",\n        \"send\": \"0.18.0\",\n        \"serve-static\": \"1.15.0\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"type-is\": \"~1.6.18\",\n        \"utils-merge\": \"1.0.1\",\n        \"vary\": \"~1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10.0\"\n      }\n    },\n    \"node_modules/finalhandler\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz\",\n      \"integrity\": \"sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"on-finished\": \"2.4.1\",\n        \"parseurl\": \"~1.3.3\",\n        \"statuses\": \"2.0.1\",\n        \"unpipe\": \"~1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/forwarded\": {\n      \"version\": \"0.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/fresh\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\n      \"integrity\": \"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/function-bind\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\n      \"integrity\": \"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/get-caller-file\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\n      \"integrity\": \"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\",\n      \"engines\": {\n        \"node\": \"6.* || 8.* || >= 10.*\"\n      }\n    },\n    \"node_modules/get-intrinsic\": {\n      \"version\": \"1.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.2.tgz\",\n      \"integrity\": \"sha512-0gSo4ml/0j98Y3lngkFEot/zhiCeWsbYIlZ+uZOVgzLyLaUw7wxUL+nCTP0XJvJg1AXulJRI3UJi8GsbDuxdGA==\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\",\n        \"has-proto\": \"^1.0.1\",\n        \"has-symbols\": \"^1.0.3\",\n        \"hasown\": \"^2.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/gopd\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz\",\n      \"integrity\": \"sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==\",\n      \"dependencies\": {\n        \"get-intrinsic\": \"^1.1.3\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-property-descriptors\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.1.tgz\",\n      \"integrity\": \"sha512-VsX8eaIewvas0xnvinAe9bw4WfIeODpGYikiWYLH+dma0Jw6KHYqWiWfhQlgOVK8D6PvjubK5Uc4P0iIhIcNVg==\",\n      \"dependencies\": {\n        \"get-intrinsic\": \"^1.2.2\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-proto\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz\",\n      \"integrity\": \"sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/has-symbols\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz\",\n      \"integrity\": \"sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==\",\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/hasown\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz\",\n      \"integrity\": \"sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==\",\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/http-errors\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz\",\n      \"integrity\": \"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\n      \"dependencies\": {\n        \"depd\": \"2.0.0\",\n        \"inherits\": \"2.0.4\",\n        \"setprototypeof\": \"1.2.0\",\n        \"statuses\": \"2.0.1\",\n        \"toidentifier\": \"1.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/iconv-lite\": {\n      \"version\": \"0.4.24\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n    },\n    \"node_modules/ipaddr.js\": {\n      \"version\": \"1.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/is-fullwidth-code-point\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/media-typer\": {\n      \"version\": \"0.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\n      \"integrity\": \"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/merge-descriptors\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\n      \"integrity\": \"sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==\"\n    },\n    \"node_modules/methods\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\n      \"integrity\": \"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\",\n      \"integrity\": \"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\",\n      \"bin\": {\n        \"mime\": \"cli.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/mime-db\": {\n      \"version\": \"1.52.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/mime-types\": {\n      \"version\": \"2.1.35\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\n      \"dependencies\": {\n        \"mime-db\": \"1.52.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\"\n    },\n    \"node_modules/negotiator\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/object-inspect\": {\n      \"version\": \"1.13.1\",\n      \"resolved\": \"https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz\",\n      \"integrity\": \"sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/on-finished\": {\n      \"version\": \"2.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz\",\n      \"integrity\": \"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\",\n      \"dependencies\": {\n        \"ee-first\": \"1.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/parseurl\": {\n      \"version\": \"1.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/path-to-regexp\": {\n      \"version\": \"0.1.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\n      \"integrity\": \"sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==\"\n    },\n    \"node_modules/proxy-addr\": {\n      \"version\": \"2.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\n      \"dependencies\": {\n        \"forwarded\": \"0.2.0\",\n        \"ipaddr.js\": \"1.9.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.10\"\n      }\n    },\n    \"node_modules/qs\": {\n      \"version\": \"6.11.0\",\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.11.0.tgz\",\n      \"integrity\": \"sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==\",\n      \"dependencies\": {\n        \"side-channel\": \"^1.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=0.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/range-parser\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/raw-body\": {\n      \"version\": \"2.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz\",\n      \"integrity\": \"sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==\",\n      \"dependencies\": {\n        \"bytes\": \"3.1.2\",\n        \"http-errors\": \"2.0.0\",\n        \"iconv-lite\": \"0.4.24\",\n        \"unpipe\": \"1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/require-directory\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\n      \"integrity\": \"sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/safe-buffer\": {\n      \"version\": \"5.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ]\n    },\n    \"node_modules/safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\n    },\n    \"node_modules/send\": {\n      \"version\": \"0.18.0\",\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.18.0.tgz\",\n      \"integrity\": \"sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==\",\n      \"dependencies\": {\n        \"debug\": \"2.6.9\",\n        \"depd\": \"2.0.0\",\n        \"destroy\": \"1.2.0\",\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"etag\": \"~1.8.1\",\n        \"fresh\": \"0.5.2\",\n        \"http-errors\": \"2.0.0\",\n        \"mime\": \"1.6.0\",\n        \"ms\": \"2.1.3\",\n        \"on-finished\": \"2.4.1\",\n        \"range-parser\": \"~1.2.1\",\n        \"statuses\": \"2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/send/node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\"\n    },\n    \"node_modules/serve-static\": {\n      \"version\": \"1.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz\",\n      \"integrity\": \"sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==\",\n      \"dependencies\": {\n        \"encodeurl\": \"~1.0.2\",\n        \"escape-html\": \"~1.0.3\",\n        \"parseurl\": \"~1.3.3\",\n        \"send\": \"0.18.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.8.0\"\n      }\n    },\n    \"node_modules/set-function-length\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/set-function-length/-/set-function-length-1.1.1.tgz\",\n      \"integrity\": \"sha512-VoaqjbBJKiWtg4yRcKBQ7g7wnGnLV3M8oLvVWwOk2PdYY6PEFegR1vezXR0tw6fZGF9csVakIRjrJiy2veSBFQ==\",\n      \"dependencies\": {\n        \"define-data-property\": \"^1.1.1\",\n        \"get-intrinsic\": \"^1.2.1\",\n        \"gopd\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      }\n    },\n    \"node_modules/setprototypeof\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\",\n      \"integrity\": \"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\"\n    },\n    \"node_modules/side-channel\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz\",\n      \"integrity\": \"sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==\",\n      \"dependencies\": {\n        \"call-bind\": \"^1.0.0\",\n        \"get-intrinsic\": \"^1.0.2\",\n        \"object-inspect\": \"^1.9.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/statuses\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz\",\n      \"integrity\": \"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/string-width\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\n      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\n      \"dependencies\": {\n        \"emoji-regex\": \"^8.0.0\",\n        \"is-fullwidth-code-point\": \"^3.0.0\",\n        \"strip-ansi\": \"^6.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/strip-ansi\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\n      \"dependencies\": {\n        \"ansi-regex\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/toidentifier\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz\",\n      \"integrity\": \"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\",\n      \"engines\": {\n        \"node\": \">=0.6\"\n      }\n    },\n    \"node_modules/type-is\": {\n      \"version\": \"1.6.18\",\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\n      \"dependencies\": {\n        \"media-typer\": \"0.3.0\",\n        \"mime-types\": \"~2.1.24\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.6\"\n      }\n    },\n    \"node_modules/unpipe\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\n      \"integrity\": \"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/utils-merge\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\n      \"integrity\": \"sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==\",\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/vary\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\n      \"integrity\": \"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\",\n      \"engines\": {\n        \"node\": \">= 0.8\"\n      }\n    },\n    \"node_modules/wrap-ansi\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\n      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^4.0.0\",\n        \"string-width\": \"^4.1.0\",\n        \"strip-ansi\": \"^6.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=10\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\n      }\n    },\n    \"node_modules/ws\": {\n      \"version\": \"8.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.13.0.tgz\",\n      \"integrity\": \"sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==\",\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      },\n      \"peerDependencies\": {\n        \"bufferutil\": \"^4.0.1\",\n        \"utf-8-validate\": \">=5.0.2\"\n      },\n      \"peerDependenciesMeta\": {\n        \"bufferutil\": {\n          \"optional\": true\n        },\n        \"utf-8-validate\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/y18n\": {\n      \"version\": \"5.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\n      \"integrity\": \"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\",\n      \"engines\": {\n        \"node\": \">=10\"\n      }\n    },\n    \"node_modules/yargs\": {\n      \"version\": \"17.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz\",\n      \"integrity\": \"sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==\",\n      \"dependencies\": {\n        \"cliui\": \"^8.0.1\",\n        \"escalade\": \"^3.1.1\",\n        \"get-caller-file\": \"^2.0.5\",\n        \"require-directory\": \"^2.1.1\",\n        \"string-width\": \"^4.2.3\",\n        \"y18n\": \"^5.0.5\",\n        \"yargs-parser\": \"^21.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/yargs-parser\": {\n      \"version\": \"21.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz\",\n      \"integrity\": \"sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==\",\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    }\n  }\n}\n"
    }
  },
  "package.json": {
    "file": {
      "contents": "{\n  \"name\": \"node-php\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@php-wasm/node\": \"^0.5.2\"\n  }\n}\n"
    }
  },
  "run.php": {
    "file": {
      "contents": "<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Einvoicing\\Invoice;\nuse Einvoicing\\InvoiceLine;\nuse Einvoicing\\Party;\nuse Einvoicing\\Presets;\nuse Einvoicing\\Writers\\UblWriter;\n\n\n\n$entityBody = file_get_contents('php://input');\n$data = json_decode($entityBody);\n\n\n// Create invoice\n$invoice = new Invoice(Presets\\CiusRo::class);\n$invoice->setNumber($data->metadata->number)\n    ->setCurrency($data->metadata->currency)\n    ->setIssueDate(new DateTime($data->metadata->issueDate))\n    ->setDueDate(new DateTime($data->metadata->dueDate));\n\n\n// Set seller\n$seller = new Party();\n$seller\n    ->setName($data->seller->name)\n    ->setVatNumber($data->seller->vatNumber)\n    ->setAddress([$data->seller->address])\n    ->setCity($data->seller->city)\n    ->setSubdivision($data->seller->subdivision)\n    ->setCountry($data->seller->country);\n$invoice->setSeller($seller);\n\n\n// Set buyer\n$buyer = new Party();\n$buyer\n    ->setName($data->buyer->name)\n    ->setVatNumber($data->buyer->vatNumber)\n    ->setAddress([$data->buyer->address])\n    ->setCity($data->buyer->city)\n    ->setSubdivision($data->buyer->subdivision)\n    ->setCountry($data->buyer->country);\n$invoice->setBuyer($buyer);\n\n\n// Add products\nforeach ($data->lines as $line) {\n    $invoiceLine = new InvoiceLine();\n    $invoiceLine->setName($line->name)\n        ->setPrice($line->price)\n        ->setVatRate($line->vatRate)\n        ->setQuantity($line->quantity);\n    $invoice->addLine($invoiceLine);\n}\n\n\n\n// Export invoice to a UBL document\nheader('Content-Type: text/xml');\n$writer = new UblWriter();\necho $writer->export($invoice);\n"
    }
  },
  "vendor": {
    "directory": {
      "autoload.php": {
        "file": {
          "contents": "<?php\n\n// autoload.php @generated by Composer\n\nif (PHP_VERSION_ID < 50600) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via \"composer self-update --2.2\". Aborting.'.PHP_EOL;\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, $err);\n        } elseif (!headers_sent()) {\n            echo $err;\n        }\n    }\n    trigger_error(\n        $err,\n        E_USER_ERROR\n    );\n}\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit0542b7264e9ef9c6fc51bf9c49672617::getLoader();\n"
        }
      },
      "composer": {
        "directory": {
          "ClassLoader.php": {
            "file": {
              "contents": "<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Composer\\Autoload;\n\n/**\n * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.\n *\n *     $loader = new \\Composer\\Autoload\\ClassLoader();\n *\n *     // register classes with namespaces\n *     $loader->add('Symfony\\Component', __DIR__.'/component');\n *     $loader->add('Symfony',           __DIR__.'/framework');\n *\n *     // activate the autoloader\n *     $loader->register();\n *\n *     // to enable searching the include path (eg. for PEAR packages)\n *     $loader->setUseIncludePath(true);\n *\n * In this example, if you try to use a class in the Symfony\\Component\n * namespace or one of its children (Symfony\\Component\\Console for instance),\n * the autoloader will first look for the class under the component/\n * directory, and it will then fallback to the framework/ directory if not\n * found before giving up.\n *\n * This class is loosely based on the Symfony UniversalClassLoader.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @see    https://www.php-fig.org/psr/psr-0/\n * @see    https://www.php-fig.org/psr/psr-4/\n */\nclass ClassLoader\n{\n    /** @var \\Closure(string):void */\n    private static $includeFile;\n\n    /** @var string|null */\n    private $vendorDir;\n\n    // PSR-4\n    /**\n     * @var array<string, array<string, int>>\n     */\n    private $prefixLengthsPsr4 = array();\n    /**\n     * @var array<string, list<string>>\n     */\n    private $prefixDirsPsr4 = array();\n    /**\n     * @var list<string>\n     */\n    private $fallbackDirsPsr4 = array();\n\n    // PSR-0\n    /**\n     * List of PSR-0 prefixes\n     *\n     * Structured as array('F (first letter)' => array('Foo\\Bar (full prefix)' => array('path', 'path2')))\n     *\n     * @var array<string, array<string, list<string>>>\n     */\n    private $prefixesPsr0 = array();\n    /**\n     * @var list<string>\n     */\n    private $fallbackDirsPsr0 = array();\n\n    /** @var bool */\n    private $useIncludePath = false;\n\n    /**\n     * @var array<string, string>\n     */\n    private $classMap = array();\n\n    /** @var bool */\n    private $classMapAuthoritative = false;\n\n    /**\n     * @var array<string, bool>\n     */\n    private $missingClasses = array();\n\n    /** @var string|null */\n    private $apcuPrefix;\n\n    /**\n     * @var array<string, self>\n     */\n    private static $registeredLoaders = array();\n\n    /**\n     * @param string|null $vendorDir\n     */\n    public function __construct($vendorDir = null)\n    {\n        $this->vendorDir = $vendorDir;\n        self::initializeIncludeClosure();\n    }\n\n    /**\n     * @return array<string, list<string>>\n     */\n    public function getPrefixes()\n    {\n        if (!empty($this->prefixesPsr0)) {\n            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));\n        }\n\n        return array();\n    }\n\n    /**\n     * @return array<string, list<string>>\n     */\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    /**\n     * @return list<string>\n     */\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    /**\n     * @return list<string>\n     */\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    /**\n     * @return array<string, string> Array of classname => path\n     */\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n    /**\n     * @param array<string, string> $classMap Class to filename map\n     *\n     * @return void\n     */\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n    /**\n     * Registers a set of PSR-0 directories for a given prefix, either\n     * appending or prepending to the ones previously set for this prefix.\n     *\n     * @param string              $prefix  The prefix\n     * @param list<string>|string $paths   The PSR-0 root directories\n     * @param bool                $prepend Whether to prepend the directories\n     *\n     * @return void\n     */\n    public function add($prefix, $paths, $prepend = false)\n    {\n        $paths = (array) $paths;\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                $paths\n            );\n        }\n    }\n\n    /**\n     * Registers a set of PSR-4 directories for a given namespace, either\n     * appending or prepending to the ones previously set for this namespace.\n     *\n     * @param string              $prefix  The prefix/namespace, with trailing '\\\\'\n     * @param list<string>|string $paths   The PSR-4 base directories\n     * @param bool                $prepend Whether to prepend the directories\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return void\n     */\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        $paths = (array) $paths;\n        if (!$prefix) {\n            // Register directories for the root namespace.\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n            // Register directories for a new namespace.\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = $paths;\n        } elseif ($prepend) {\n            // Prepend directories for an already registered namespace.\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n            // Append directories for an already registered namespace.\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                $paths\n            );\n        }\n    }\n\n    /**\n     * Registers a set of PSR-0 directories for a given prefix,\n     * replacing any others previously set for this prefix.\n     *\n     * @param string              $prefix The prefix\n     * @param list<string>|string $paths  The PSR-0 base directories\n     *\n     * @return void\n     */\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n    /**\n     * Registers a set of PSR-4 directories for a given namespace,\n     * replacing any others previously set for this namespace.\n     *\n     * @param string              $prefix The prefix/namespace, with trailing '\\\\'\n     * @param list<string>|string $paths  The PSR-4 base directories\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return void\n     */\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n    /**\n     * Turns on searching the include path for class files.\n     *\n     * @param bool $useIncludePath\n     *\n     * @return void\n     */\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n    /**\n     * Can be used to check if the autoloader uses the include path to check\n     * for classes.\n     *\n     * @return bool\n     */\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n    /**\n     * Turns off searching the prefix and fallback directories for classes\n     * that have not been registered with the class map.\n     *\n     * @param bool $classMapAuthoritative\n     *\n     * @return void\n     */\n    public function setClassMapAuthoritative($classMapAuthoritative)\n    {\n        $this->classMapAuthoritative = $classMapAuthoritative;\n    }\n\n    /**\n     * Should class lookup fail if not found in the current class map?\n     *\n     * @return bool\n     */\n    public function isClassMapAuthoritative()\n    {\n        return $this->classMapAuthoritative;\n    }\n\n    /**\n     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.\n     *\n     * @param string|null $apcuPrefix\n     *\n     * @return void\n     */\n    public function setApcuPrefix($apcuPrefix)\n    {\n        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;\n    }\n\n    /**\n     * The APCu prefix in use, or null if APCu caching is not enabled.\n     *\n     * @return string|null\n     */\n    public function getApcuPrefix()\n    {\n        return $this->apcuPrefix;\n    }\n\n    /**\n     * Registers this instance as an autoloader.\n     *\n     * @param bool $prepend Whether to prepend the autoloader or not\n     *\n     * @return void\n     */\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n\n        if (null === $this->vendorDir) {\n            return;\n        }\n\n        if ($prepend) {\n            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;\n        } else {\n            unset(self::$registeredLoaders[$this->vendorDir]);\n            self::$registeredLoaders[$this->vendorDir] = $this;\n        }\n    }\n\n    /**\n     * Unregisters this instance as an autoloader.\n     *\n     * @return void\n     */\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n\n        if (null !== $this->vendorDir) {\n            unset(self::$registeredLoaders[$this->vendorDir]);\n        }\n    }\n\n    /**\n     * Loads the given class or interface.\n     *\n     * @param  string    $class The name of the class\n     * @return true|null True if loaded, null otherwise\n     */\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            $includeFile = self::$includeFile;\n            $includeFile($file);\n\n            return true;\n        }\n\n        return null;\n    }\n\n    /**\n     * Finds the path to the file where the class is defined.\n     *\n     * @param string $class The name of the class\n     *\n     * @return string|false The path if found, false otherwise\n     */\n    public function findFile($class)\n    {\n        // class map lookup\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {\n            return false;\n        }\n        if (null !== $this->apcuPrefix) {\n            $file = apcu_fetch($this->apcuPrefix.$class, $hit);\n            if ($hit) {\n                return $file;\n            }\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n        // Search for Hack files if we are running on HHVM\n        if (false === $file && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if (null !== $this->apcuPrefix) {\n            apcu_add($this->apcuPrefix.$class, $file);\n        }\n\n        if (false === $file) {\n            // Remember that this class does not exist.\n            $this->missingClasses[$class] = true;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Returns the currently registered loaders keyed by their corresponding vendor directories.\n     *\n     * @return array<string, self>\n     */\n    public static function getRegisteredLoaders()\n    {\n        return self::$registeredLoaders;\n    }\n\n    /**\n     * @param  string       $class\n     * @param  string       $ext\n     * @return string|false\n     */\n    private function findFileWithExtension($class, $ext)\n    {\n        // PSR-4 lookup\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            $subPath = $class;\n            while (false !== $lastPos = strrpos($subPath, '\\\\')) {\n                $subPath = substr($subPath, 0, $lastPos);\n                $search = $subPath . '\\\\';\n                if (isset($this->prefixDirsPsr4[$search])) {\n                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);\n                    foreach ($this->prefixDirsPsr4[$search] as $dir) {\n                        if (file_exists($file = $dir . $pathEnd)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // PSR-4 fallback dirs\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n        // PSR-0 lookup\n        if (false !== $pos = strrpos($class, '\\\\')) {\n            // namespaced class name\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n            // PEAR-like class name\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // PSR-0 fallback dirs\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n        // PSR-0 include paths.\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     */\n    private static function initializeIncludeClosure()\n    {\n        if (self::$includeFile !== null) {\n            return;\n        }\n\n        /**\n         * Scope isolated include.\n         *\n         * Prevents access to $this/self from included files.\n         *\n         * @param  string $file\n         * @return void\n         */\n        self::$includeFile = \\Closure::bind(static function($file) {\n            include $file;\n        }, null, null);\n    }\n}\n"
            }
          },
          "InstalledVersions.php": {
            "file": {
              "contents": "<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Composer;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Composer\\Semver\\VersionParser;\n\n/**\n * This class is copied in every Composer installed project and available to all\n *\n * See also https://getcomposer.org/doc/07-runtime.md#installed-versions\n *\n * To require its presence, you can require `composer-runtime-api ^2.0`\n *\n * @final\n */\nclass InstalledVersions\n{\n    /**\n     * @var mixed[]|null\n     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null\n     */\n    private static $installed;\n\n    /**\n     * @var bool|null\n     */\n    private static $canGetVendors;\n\n    /**\n     * @var array[]\n     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    private static $installedByVendor = array();\n\n    /**\n     * Returns a list of all package names which are present, either by being installed, replaced or provided\n     *\n     * @return string[]\n     * @psalm-return list<string>\n     */\n    public static function getInstalledPackages()\n    {\n        $packages = array();\n        foreach (self::getInstalled() as $installed) {\n            $packages[] = array_keys($installed['versions']);\n        }\n\n        if (1 === \\count($packages)) {\n            return $packages[0];\n        }\n\n        return array_keys(array_flip(\\call_user_func_array('array_merge', $packages)));\n    }\n\n    /**\n     * Returns a list of all package names with a specific type e.g. 'library'\n     *\n     * @param  string   $type\n     * @return string[]\n     * @psalm-return list<string>\n     */\n    public static function getInstalledPackagesByType($type)\n    {\n        $packagesByType = array();\n\n        foreach (self::getInstalled() as $installed) {\n            foreach ($installed['versions'] as $name => $package) {\n                if (isset($package['type']) && $package['type'] === $type) {\n                    $packagesByType[] = $name;\n                }\n            }\n        }\n\n        return $packagesByType;\n    }\n\n    /**\n     * Checks whether the given package is installed\n     *\n     * This also returns true if the package name is provided or replaced by another package\n     *\n     * @param  string $packageName\n     * @param  bool   $includeDevRequirements\n     * @return bool\n     */\n    public static function isInstalled($packageName, $includeDevRequirements = true)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (isset($installed['versions'][$packageName])) {\n                return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the given package satisfies a version constraint\n     *\n     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:\n     *\n     *   Composer\\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')\n     *\n     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality\n     * @param  string        $packageName\n     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package\n     * @return bool\n     */\n    public static function satisfies(VersionParser $parser, $packageName, $constraint)\n    {\n        $constraint = $parser->parseConstraints((string) $constraint);\n        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));\n\n        return $provided->matches($constraint);\n    }\n\n    /**\n     * Returns a version constraint representing all the range(s) which are installed for a given package\n     *\n     * It is easier to use this via isInstalled() with the $constraint argument if you need to check\n     * whether a given version of a package is installed, and not just whether it exists\n     *\n     * @param  string $packageName\n     * @return string Version constraint usable with composer/semver\n     */\n    public static function getVersionRanges($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            $ranges = array();\n            if (isset($installed['versions'][$packageName]['pretty_version'])) {\n                $ranges[] = $installed['versions'][$packageName]['pretty_version'];\n            }\n            if (array_key_exists('aliases', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);\n            }\n            if (array_key_exists('replaced', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);\n            }\n            if (array_key_exists('provided', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);\n            }\n\n            return implode(' || ', $ranges);\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present\n     */\n    public static function getVersion($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['version'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['version'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present\n     */\n    public static function getPrettyVersion($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['pretty_version'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['pretty_version'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference\n     */\n    public static function getReference($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['reference'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['reference'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.\n     */\n    public static function getInstallPath($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @return array\n     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}\n     */\n    public static function getRootPackage()\n    {\n        $installed = self::getInstalled();\n\n        return $installed[0]['root'];\n    }\n\n    /**\n     * Returns the raw installed.php data for custom implementations\n     *\n     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.\n     * @return array[]\n     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}\n     */\n    public static function getRawData()\n    {\n        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);\n\n        if (null === self::$installed) {\n            // only require the installed.php file if this file is loaded from its dumped location,\n            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937\n            if (substr(__DIR__, -8, 1) !== 'C') {\n                self::$installed = include __DIR__ . '/installed.php';\n            } else {\n                self::$installed = array();\n            }\n        }\n\n        return self::$installed;\n    }\n\n    /**\n     * Returns the raw data of all installed.php which are currently loaded for custom implementations\n     *\n     * @return array[]\n     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    public static function getAllRawData()\n    {\n        return self::getInstalled();\n    }\n\n    /**\n     * Lets you reload the static array from another file\n     *\n     * This is only useful for complex integrations in which a project needs to use\n     * this class but then also needs to execute another project's autoloader in process,\n     * and wants to ensure both projects have access to their version of installed.php.\n     *\n     * A typical case would be PHPUnit, where it would need to make sure it reads all\n     * the data it needs from this class, then call reload() with\n     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure\n     * the project in which it runs can then also use this class safely, without\n     * interference between PHPUnit's dependencies and the project's dependencies.\n     *\n     * @param  array[] $data A vendor/composer/installed.php data set\n     * @return void\n     *\n     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data\n     */\n    public static function reload($data)\n    {\n        self::$installed = $data;\n        self::$installedByVendor = array();\n    }\n\n    /**\n     * @return array[]\n     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    private static function getInstalled()\n    {\n        if (null === self::$canGetVendors) {\n            self::$canGetVendors = method_exists('Composer\\Autoload\\ClassLoader', 'getRegisteredLoaders');\n        }\n\n        $installed = array();\n\n        if (self::$canGetVendors) {\n            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {\n                if (isset(self::$installedByVendor[$vendorDir])) {\n                    $installed[] = self::$installedByVendor[$vendorDir];\n                } elseif (is_file($vendorDir.'/composer/installed.php')) {\n                    /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */\n                    $required = require $vendorDir.'/composer/installed.php';\n                    $installed[] = self::$installedByVendor[$vendorDir] = $required;\n                    if (null === self::$installed && strtr($vendorDir.'/composer', '\\\\', '/') === strtr(__DIR__, '\\\\', '/')) {\n                        self::$installed = $installed[count($installed) - 1];\n                    }\n                }\n            }\n        }\n\n        if (null === self::$installed) {\n            // only require the installed.php file if this file is loaded from its dumped location,\n            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937\n            if (substr(__DIR__, -8, 1) !== 'C') {\n                /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */\n                $required = require __DIR__ . '/installed.php';\n                self::$installed = $required;\n            } else {\n                self::$installed = array();\n            }\n        }\n\n        if (self::$installed !== array()) {\n            $installed[] = self::$installed;\n        }\n\n        return $installed;\n    }\n}\n"
            }
          },
          "autoload_classmap.php": {
            "file": {
              "contents": "<?php\n\n// autoload_classmap.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n    'Einvoicing\\\\AllowanceOrCharge' => $vendorDir . '/josemmo/einvoicing/src/AllowanceOrCharge.php',\n    'Einvoicing\\\\Attachment' => $vendorDir . '/josemmo/einvoicing/src/Attachment.php',\n    'Einvoicing\\\\Attribute' => $vendorDir . '/josemmo/einvoicing/src/Attribute.php',\n    'Einvoicing\\\\Delivery' => $vendorDir . '/josemmo/einvoicing/src/Delivery.php',\n    'Einvoicing\\\\Exceptions\\\\ValidationException' => $vendorDir . '/josemmo/einvoicing/src/Exceptions/ValidationException.php',\n    'Einvoicing\\\\Identifier' => $vendorDir . '/josemmo/einvoicing/src/Identifier.php',\n    'Einvoicing\\\\Invoice' => $vendorDir . '/josemmo/einvoicing/src/Invoice.php',\n    'Einvoicing\\\\InvoiceLine' => $vendorDir . '/josemmo/einvoicing/src/InvoiceLine.php',\n    'Einvoicing\\\\InvoiceReference' => $vendorDir . '/josemmo/einvoicing/src/InvoiceReference.php',\n    'Einvoicing\\\\Models\\\\InvoiceTotals' => $vendorDir . '/josemmo/einvoicing/src/Models/InvoiceTotals.php',\n    'Einvoicing\\\\Models\\\\VatBreakdown' => $vendorDir . '/josemmo/einvoicing/src/Models/VatBreakdown.php',\n    'Einvoicing\\\\Party' => $vendorDir . '/josemmo/einvoicing/src/Party.php',\n    'Einvoicing\\\\Payments\\\\Card' => $vendorDir . '/josemmo/einvoicing/src/Payments/Card.php',\n    'Einvoicing\\\\Payments\\\\Mandate' => $vendorDir . '/josemmo/einvoicing/src/Payments/Mandate.php',\n    'Einvoicing\\\\Payments\\\\Payment' => $vendorDir . '/josemmo/einvoicing/src/Payments/Payment.php',\n    'Einvoicing\\\\Payments\\\\Transfer' => $vendorDir . '/josemmo/einvoicing/src/Payments/Transfer.php',\n    'Einvoicing\\\\Presets\\\\AbstractPreset' => $vendorDir . '/josemmo/einvoicing/src/Presets/AbstractPreset.php',\n    'Einvoicing\\\\Presets\\\\CiusAtGov' => $vendorDir . '/josemmo/einvoicing/src/Presets/CiusAtGov.php',\n    'Einvoicing\\\\Presets\\\\CiusAtNat' => $vendorDir . '/josemmo/einvoicing/src/Presets/CiusAtNat.php',\n    'Einvoicing\\\\Presets\\\\CiusEsFace' => $vendorDir . '/josemmo/einvoicing/src/Presets/CiusEsFace.php',\n    'Einvoicing\\\\Presets\\\\CiusIt' => $vendorDir . '/josemmo/einvoicing/src/Presets/CiusIt.php',\n    'Einvoicing\\\\Presets\\\\CiusRo' => $vendorDir . '/josemmo/einvoicing/src/Presets/CiusRo.php',\n    'Einvoicing\\\\Presets\\\\Nlcius' => $vendorDir . '/josemmo/einvoicing/src/Presets/Nlcius.php',\n    'Einvoicing\\\\Presets\\\\Peppol' => $vendorDir . '/josemmo/einvoicing/src/Presets/Peppol.php',\n    'Einvoicing\\\\Readers\\\\AbstractReader' => $vendorDir . '/josemmo/einvoicing/src/Readers/AbstractReader.php',\n    'Einvoicing\\\\Readers\\\\UblReader' => $vendorDir . '/josemmo/einvoicing/src/Readers/UblReader.php',\n    'Einvoicing\\\\Traits\\\\AllowanceOrChargeTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/AllowanceOrChargeTrait.php',\n    'Einvoicing\\\\Traits\\\\AttachmentsTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/AttachmentsTrait.php',\n    'Einvoicing\\\\Traits\\\\AttributesTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/AttributesTrait.php',\n    'Einvoicing\\\\Traits\\\\BuyerAccountingReferenceTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/BuyerAccountingReferenceTrait.php',\n    'Einvoicing\\\\Traits\\\\ClassificationIdentifiersTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/ClassificationIdentifiersTrait.php',\n    'Einvoicing\\\\Traits\\\\IdentifiersTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/IdentifiersTrait.php',\n    'Einvoicing\\\\Traits\\\\InvoiceValidationTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/InvoiceValidationTrait.php',\n    'Einvoicing\\\\Traits\\\\PeriodTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/PeriodTrait.php',\n    'Einvoicing\\\\Traits\\\\PostalAddressTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/PostalAddressTrait.php',\n    'Einvoicing\\\\Traits\\\\PrecedingInvoiceReferencesTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/PrecedingInvoiceReferencesTrait.php',\n    'Einvoicing\\\\Traits\\\\VatTrait' => $vendorDir . '/josemmo/einvoicing/src/Traits/VatTrait.php',\n    'Einvoicing\\\\Writers\\\\AbstractWriter' => $vendorDir . '/josemmo/einvoicing/src/Writers/AbstractWriter.php',\n    'Einvoicing\\\\Writers\\\\UblWriter' => $vendorDir . '/josemmo/einvoicing/src/Writers/UblWriter.php',\n    'UXML\\\\UXML' => $vendorDir . '/josemmo/uxml/src/UXML.php',\n);\n"
            }
          },
          "autoload_namespaces.php": {
            "file": {
              "contents": "<?php\n\n// autoload_namespaces.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n"
            }
          },
          "autoload_psr4.php": {
            "file": {
              "contents": "<?php\n\n// autoload_psr4.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'UXML\\\\' => array($vendorDir . '/josemmo/uxml/src'),\n    'Einvoicing\\\\' => array($vendorDir . '/josemmo/einvoicing/src'),\n);\n"
            }
          },
          "autoload_real.php": {
            "file": {
              "contents": "<?php\n\n// autoload_real.php @generated by Composer\n\nclass ComposerAutoloaderInit0542b7264e9ef9c6fc51bf9c49672617\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    /**\n     * @return \\Composer\\Autoload\\ClassLoader\n     */\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInit0542b7264e9ef9c6fc51bf9c49672617', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(__DIR__));\n        spl_autoload_unregister(array('ComposerAutoloaderInit0542b7264e9ef9c6fc51bf9c49672617', 'loadClassLoader'));\n\n        require __DIR__ . '/autoload_static.php';\n        call_user_func(\\Composer\\Autoload\\ComposerStaticInit0542b7264e9ef9c6fc51bf9c49672617::getInitializer($loader));\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n"
            }
          },
          "autoload_static.php": {
            "file": {
              "contents": "<?php\n\n// autoload_static.php @generated by Composer\n\nnamespace Composer\\Autoload;\n\nclass ComposerStaticInit0542b7264e9ef9c6fc51bf9c49672617\n{\n    public static $prefixLengthsPsr4 = array (\n        'U' => \n        array (\n            'UXML\\\\' => 5,\n        ),\n        'E' => \n        array (\n            'Einvoicing\\\\' => 11,\n        ),\n    );\n\n    public static $prefixDirsPsr4 = array (\n        'UXML\\\\' => \n        array (\n            0 => __DIR__ . '/..' . '/josemmo/uxml/src',\n        ),\n        'Einvoicing\\\\' => \n        array (\n            0 => __DIR__ . '/..' . '/josemmo/einvoicing/src',\n        ),\n    );\n\n    public static $classMap = array (\n        'Composer\\\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',\n        'Einvoicing\\\\AllowanceOrCharge' => __DIR__ . '/..' . '/josemmo/einvoicing/src/AllowanceOrCharge.php',\n        'Einvoicing\\\\Attachment' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Attachment.php',\n        'Einvoicing\\\\Attribute' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Attribute.php',\n        'Einvoicing\\\\Delivery' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Delivery.php',\n        'Einvoicing\\\\Exceptions\\\\ValidationException' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Exceptions/ValidationException.php',\n        'Einvoicing\\\\Identifier' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Identifier.php',\n        'Einvoicing\\\\Invoice' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Invoice.php',\n        'Einvoicing\\\\InvoiceLine' => __DIR__ . '/..' . '/josemmo/einvoicing/src/InvoiceLine.php',\n        'Einvoicing\\\\InvoiceReference' => __DIR__ . '/..' . '/josemmo/einvoicing/src/InvoiceReference.php',\n        'Einvoicing\\\\Models\\\\InvoiceTotals' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Models/InvoiceTotals.php',\n        'Einvoicing\\\\Models\\\\VatBreakdown' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Models/VatBreakdown.php',\n        'Einvoicing\\\\Party' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Party.php',\n        'Einvoicing\\\\Payments\\\\Card' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Payments/Card.php',\n        'Einvoicing\\\\Payments\\\\Mandate' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Payments/Mandate.php',\n        'Einvoicing\\\\Payments\\\\Payment' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Payments/Payment.php',\n        'Einvoicing\\\\Payments\\\\Transfer' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Payments/Transfer.php',\n        'Einvoicing\\\\Presets\\\\AbstractPreset' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/AbstractPreset.php',\n        'Einvoicing\\\\Presets\\\\CiusAtGov' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/CiusAtGov.php',\n        'Einvoicing\\\\Presets\\\\CiusAtNat' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/CiusAtNat.php',\n        'Einvoicing\\\\Presets\\\\CiusEsFace' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/CiusEsFace.php',\n        'Einvoicing\\\\Presets\\\\CiusIt' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/CiusIt.php',\n        'Einvoicing\\\\Presets\\\\CiusRo' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/CiusRo.php',\n        'Einvoicing\\\\Presets\\\\Nlcius' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/Nlcius.php',\n        'Einvoicing\\\\Presets\\\\Peppol' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Presets/Peppol.php',\n        'Einvoicing\\\\Readers\\\\AbstractReader' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Readers/AbstractReader.php',\n        'Einvoicing\\\\Readers\\\\UblReader' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Readers/UblReader.php',\n        'Einvoicing\\\\Traits\\\\AllowanceOrChargeTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/AllowanceOrChargeTrait.php',\n        'Einvoicing\\\\Traits\\\\AttachmentsTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/AttachmentsTrait.php',\n        'Einvoicing\\\\Traits\\\\AttributesTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/AttributesTrait.php',\n        'Einvoicing\\\\Traits\\\\BuyerAccountingReferenceTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/BuyerAccountingReferenceTrait.php',\n        'Einvoicing\\\\Traits\\\\ClassificationIdentifiersTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/ClassificationIdentifiersTrait.php',\n        'Einvoicing\\\\Traits\\\\IdentifiersTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/IdentifiersTrait.php',\n        'Einvoicing\\\\Traits\\\\InvoiceValidationTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/InvoiceValidationTrait.php',\n        'Einvoicing\\\\Traits\\\\PeriodTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/PeriodTrait.php',\n        'Einvoicing\\\\Traits\\\\PostalAddressTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/PostalAddressTrait.php',\n        'Einvoicing\\\\Traits\\\\PrecedingInvoiceReferencesTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/PrecedingInvoiceReferencesTrait.php',\n        'Einvoicing\\\\Traits\\\\VatTrait' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Traits/VatTrait.php',\n        'Einvoicing\\\\Writers\\\\AbstractWriter' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Writers/AbstractWriter.php',\n        'Einvoicing\\\\Writers\\\\UblWriter' => __DIR__ . '/..' . '/josemmo/einvoicing/src/Writers/UblWriter.php',\n        'UXML\\\\UXML' => __DIR__ . '/..' . '/josemmo/uxml/src/UXML.php',\n    );\n\n    public static function getInitializer(ClassLoader $loader)\n    {\n        return \\Closure::bind(function () use ($loader) {\n            $loader->prefixLengthsPsr4 = ComposerStaticInit0542b7264e9ef9c6fc51bf9c49672617::$prefixLengthsPsr4;\n            $loader->prefixDirsPsr4 = ComposerStaticInit0542b7264e9ef9c6fc51bf9c49672617::$prefixDirsPsr4;\n            $loader->classMap = ComposerStaticInit0542b7264e9ef9c6fc51bf9c49672617::$classMap;\n\n        }, null, ClassLoader::class);\n    }\n}\n"
            }
          },
          "installed.json": {
            "file": {
              "contents": "{\n    \"packages\": [\n        {\n            \"name\": \"josemmo/einvoicing\",\n            \"version\": \"v0.2.7\",\n            \"version_normalized\": \"0.2.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/josemmo/einvoicing.git\",\n                \"reference\": \"fb318980fafda05da66385221d590f610945ee28\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/josemmo/einvoicing/zipball/fb318980fafda05da66385221d590f610945ee28\",\n                \"reference\": \"fb318980fafda05da66385221d590f610945ee28\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"josemmo/uxml\": \"^0.1.4\",\n                \"php\": \">=7.1\"\n            },\n            \"require-dev\": {\n                \"ext-openssl\": \"*\",\n                \"phan/phan\": \"*\",\n                \"phpdocumentor/reflection\": \"^3.0|^5.1\",\n                \"symfony/phpunit-bridge\": \"*\"\n            },\n            \"time\": \"2023-10-03T18:14:45+00:00\",\n            \"type\": \"library\",\n            \"installation-source\": \"dist\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Einvoicing\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"José Miguel Moreno\",\n                    \"email\": \"josemmo@pm.me\",\n                    \"homepage\": \"https://github.com/josemmo\"\n                }\n            ],\n            \"description\": \"Library for reading and creating European-compliant electronic invoices (EN 16931)\",\n            \"homepage\": \"https://github.com/josemmo/einvoicing\",\n            \"keywords\": [\n                \"cii\",\n                \"invoice\",\n                \"invoicing\",\n                \"peppol\",\n                \"ubl\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/josemmo/einvoicing/issues\",\n                \"source\": \"https://github.com/josemmo/einvoicing/tree/v0.2.7\"\n            },\n            \"install-path\": \"../josemmo/einvoicing\"\n        },\n        {\n            \"name\": \"josemmo/uxml\",\n            \"version\": \"v0.1.4\",\n            \"version_normalized\": \"0.1.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/josemmo/uxml.git\",\n                \"reference\": \"bcd7d8e410285c642116294e01581374d6be696f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/josemmo/uxml/zipball/bcd7d8e410285c642116294e01581374d6be696f\",\n                \"reference\": \"bcd7d8e410285c642116294e01581374d6be696f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"lib-libxml\": \"*\",\n                \"php\": \">=7.1\"\n            },\n            \"require-dev\": {\n                \"phan/phan\": \"*\",\n                \"symfony/phpunit-bridge\": \"*\"\n            },\n            \"time\": \"2022-05-28T16:43:25+00:00\",\n            \"type\": \"library\",\n            \"installation-source\": \"dist\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"UXML\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"José Miguel Moreno\",\n                    \"email\": \"josemmo@pm.me\",\n                    \"homepage\": \"https://github.com/josemmo\"\n                }\n            ],\n            \"description\": \"Uncomplicated XML manipulation library with a clean and concise syntax\",\n            \"homepage\": \"https://github.com/josemmo/uxml\",\n            \"keywords\": [\n                \"xml\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/josemmo/uxml/issues\",\n                \"source\": \"https://github.com/josemmo/uxml/tree/v0.1.4\"\n            },\n            \"install-path\": \"../josemmo/uxml\"\n        }\n    ],\n    \"dev\": false,\n    \"dev-package-names\": []\n}\n"
            }
          },
          "installed.php": {
            "file": {
              "contents": "<?php return array(\n    'root' => array(\n        'name' => '__root__',\n        'pretty_version' => '1.0.0+no-version-set',\n        'version' => '1.0.0.0',\n        'reference' => NULL,\n        'type' => 'library',\n        'install_path' => __DIR__ . '/../../',\n        'aliases' => array(),\n        'dev' => false,\n    ),\n    'versions' => array(\n        '__root__' => array(\n            'pretty_version' => '1.0.0+no-version-set',\n            'version' => '1.0.0.0',\n            'reference' => NULL,\n            'type' => 'library',\n            'install_path' => __DIR__ . '/../../',\n            'aliases' => array(),\n            'dev_requirement' => false,\n        ),\n        'josemmo/einvoicing' => array(\n            'pretty_version' => 'v0.2.7',\n            'version' => '0.2.7.0',\n            'reference' => 'fb318980fafda05da66385221d590f610945ee28',\n            'type' => 'library',\n            'install_path' => __DIR__ . '/../josemmo/einvoicing',\n            'aliases' => array(),\n            'dev_requirement' => false,\n        ),\n        'josemmo/uxml' => array(\n            'pretty_version' => 'v0.1.4',\n            'version' => '0.1.4.0',\n            'reference' => 'bcd7d8e410285c642116294e01581374d6be696f',\n            'type' => 'library',\n            'install_path' => __DIR__ . '/../josemmo/uxml',\n            'aliases' => array(),\n            'dev_requirement' => false,\n        ),\n    ),\n);\n"
            }
          },
          "platform_check.php": {
            "file": {
              "contents": "<?php\n\n// platform_check.php @generated by Composer\n\n$issues = array();\n\nif (!(PHP_VERSION_ID >= 70100)) {\n    $issues[] = 'Your Composer dependencies require a PHP version \">= 7.1.0\". You are running ' . PHP_VERSION . '.';\n}\n\nif ($issues) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);\n        } elseif (!headers_sent()) {\n            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;\n        }\n    }\n    trigger_error(\n        'Composer detected issues in your platform: ' . implode(' ', $issues),\n        E_USER_ERROR\n    );\n}\n"
            }
          }
        }
      },
      "josemmo": {
        "directory": {
          "einvoicing": {
            "directory": {
              ".phan": {
                "directory": {
                  "config.php": {
                    "file": {
                      "contents": "<?php\nuse Phan\\Issue;\n\n/**\n * This configuration will be read and overlaid on top of the\n * default configuration. Command line arguments will be applied\n * after this file is read.\n *\n * @see https://github.com/phan/phan/wiki/Phan-Config-Settings for all configurable options\n * @see src/Phan/Config.php for the configurable options in this version of Phan\n *\n * A Note About Paths\n * ==================\n *\n * Files referenced from this file should be defined as\n *\n * ```\n *   Config::projectPath('relative_path/to/file')\n * ```\n *\n * where the relative path is relative to the root of the\n * project which is defined as either the working directory\n * of the phan executable or a path passed in via the CLI\n * '-d' flag.\n */\nreturn [\n    // The PHP version that the codebase will be checked for compatibility against.\n    // For best results, the PHP binary used to run Phan should have the same PHP version.\n    // (Phan relies on Reflection for some types, param counts,\n    // and checks for undefined classes/methods/functions)\n    //\n    // Supported values: `'5.6'`, `'7.0'`, `'7.1'`, `'7.2'`, `'7.3'`, `'7.4'`,\n    // `'8.0'`, `'8.1'`, `null`.\n    // If this is set to `null`,\n    // then Phan assumes the PHP version which is closest to the minor version\n    // of the php executable used to execute Phan.\n    //\n    // Note that the **only** effect of choosing `'5.6'` is to infer that functions removed in php 7.0 exist.\n    // (See `backward_compatibility_checks` for additional options)\n    'target_php_version' => null,\n\n    // A list of directories that should be parsed for class and\n    // method information. After excluding the directories\n    // defined in exclude_analysis_directory_list, the remaining\n    // files will be statically analyzed for errors.\n    //\n    // Thus, both first-party and third-party code being used by\n    // your application should be included in this list.\n    'directory_list' => [\n        'src',\n        'vendor',\n    ],\n\n    // A directory list that defines files that will be excluded\n    // from static analysis, but whose class and method\n    // information should be included.\n    //\n    // Generally, you'll want to include the directories for\n    // third-party code (such as \"vendor/\") in this list.\n    //\n    // n.b.: If you'd like to parse but not analyze 3rd\n    //       party code, directories containing that code\n    //       should be added to both the `directory_list`\n    //       and `exclude_analysis_directory_list` arrays.\n    'exclude_analysis_directory_list' => [\n        'vendor',\n    ],\n\n    // If enabled, Phan will warn if **any** type in a method invocation's object\n    // is definitely not an object,\n    // or if **any** type in an invoked expression is not a callable.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    'strict_method_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in the argument's union type\n    // cannot be cast to a type in the parameter's expected union type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    'strict_param_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in a property assignment's union type\n    // cannot be cast to a type in the property's declared union type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    // (For self-analysis, Phan has a large number of suppressions and file-level suppressions, due to \\ast\\Node being difficult to type check)\n    'strict_property_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in a returned value's union type\n    // cannot be cast to the declared return type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    // (For self-analysis, Phan has a large number of suppressions and file-level suppressions, due to \\ast\\Node being difficult to type check)\n    'strict_return_checking' => true,\n\n    // If enabled, Phan will warn if **any** type of the object expression for a property access\n    // does not contain that property.\n    'strict_object_checking' => true,\n\n    // If enabled, check all methods that override a\n    // parent method to make sure its signature is\n    // compatible with the parent's. This check\n    // can add quite a bit of time to the analysis.\n    // This will also check if final methods are overridden, etc.\n    'analyze_signature_compatibility' => true,\n\n    // If true, check to make sure the return type declared\n    // in the doc-block (if any) matches the return type\n    // declared in the method signature.\n    'check_docblock_signature_return_type_match' => true,\n\n    // If true, check to make sure the param types declared\n    // in the doc-block (if any) matches the param types\n    // declared in the method signature.\n    'check_docblock_signature_param_type_match' => true,\n\n    // Set to true in order to attempt to detect dead\n    // (unreferenced) code. Keep in mind that the\n    // results will only be a guess given that classes,\n    // properties, constants and methods can be referenced\n    // as variables (like `$class->$property` or\n    // `$class->$method()`) in ways that we're unable\n    // to make sense of.\n    //\n    // To more aggressively detect dead code,\n    // you may want to set `dead_code_detection_prefer_false_negative` to `false`.\n    'dead_code_detection' => true,\n\n    // Set to true in order to attempt to detect redundant and impossible conditions.\n    //\n    // This has some false positives involving loops,\n    // variables set in branches of loops, and global variables.\n    'redundant_condition_detection' => true,\n\n    // Set to true in order to attempt to detect error-prone truthiness/falsiness checks.\n    //\n    // This is not suitable for all codebases.\n    'error_prone_truthy_condition_detection' => true,\n\n    // Enable or disable support for generic templated\n    // class types.\n    'generic_types_enabled' => true,\n\n    // If enabled, warn about throw statement where the exception types\n    // are not documented in the PHPDoc of functions, methods, and closures.\n    'warn_about_undocumented_throw_statements' => true,\n\n    // If enabled (and `warn_about_undocumented_throw_statements` is enabled),\n    // Phan will warn about function/closure/method invocations that have `@throws`\n    // that aren't caught or documented in the invoking method.\n    'warn_about_undocumented_exceptions_thrown_by_invoked_functions' => true,\n\n    // The minimum severity level to report on. This can be\n    // set to Issue::SEVERITY_LOW, Issue::SEVERITY_NORMAL or\n    // Issue::SEVERITY_CRITICAL.\n    'minimum_severity' => Issue::SEVERITY_NORMAL,\n\n    // Add any issue types (such as `'PhanUndeclaredMethod'`)\n    // to this list to inhibit them from being reported.\n    'suppress_issue_types' => [\n        'PhanUnreferencedClass',\n        'PhanUnreferencedPublicMethod',\n    ],\n\n    // A list of plugin files to execute.\n    // Plugins which are bundled with Phan can be added here by providing their name\n    // (e.g. 'AlwaysReturnPlugin')\n    //\n    // Documentation about available bundled plugins can be found\n    // at https://github.com/phan/phan/tree/v4/.phan/plugins\n    //\n    // Alternately, you can pass in the full path to a PHP file\n    // with the plugin's implementation.\n    // (e.g. 'vendor/phan/phan/.phan/plugins/AlwaysReturnPlugin.php')\n    'plugins' => [\n        'AlwaysReturnPlugin', // Checks if a function, closure or method unconditionally returns.\n        'DollarDollarPlugin',\n        'DuplicateArrayKeyPlugin',\n        'DuplicateExpressionPlugin',\n        'EmptyStatementListPlugin',\n        'InlineHTMLPlugin',\n        'LoopVariableReusePlugin',\n        'PreferNamespaceUsePlugin',\n        'PregRegexCheckerPlugin',\n        'PrintfCheckerPlugin',\n        'SleepCheckerPlugin',\n        'UnreachableCodePlugin', // Checks for syntactically unreachable statements in the global scope or function bodies.\n        'UseReturnValuePlugin',\n    ],\n];\n"
                    }
                  }
                }
              },
              "composer.json": {
                "file": {
                  "contents": "{\n    \"name\": \"josemmo/einvoicing\",\n    \"description\": \"Library for reading and creating European-compliant electronic invoices (EN 16931)\",\n    \"keywords\": [\n        \"invoicing\",\n        \"invoice\",\n        \"peppol\",\n        \"ubl\",\n        \"cii\"\n    ],\n    \"license\": \"MIT\",\n    \"homepage\": \"https://github.com/josemmo/einvoicing\",\n    \"authors\": [\n        {\n            \"name\": \"José Miguel Moreno\",\n            \"email\": \"josemmo@pm.me\",\n            \"homepage\": \"https://github.com/josemmo\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"Einvoicing\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=7.1\",\n        \"josemmo/uxml\": \"^0.1.4\"\n    },\n    \"require-dev\": {\n        \"ext-openssl\": \"*\",\n        \"phan/phan\": \"*\",\n        \"phpdocumentor/reflection\": \"^3.0|^5.1\",\n        \"symfony/phpunit-bridge\": \"*\"\n    }\n}\n"
                }
              },
              "phpunit.xml": {
                "file": {
                  "contents": "<?xml version=\"1.0\"?>\n<phpunit cacheResult=\"false\" colors=\"true\" bootstrap=\"vendor/autoload.php\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Tests\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
                }
              },
              "scripts": {
                "directory": {}
              },
              "src": {
                "directory": {
                  "AllowanceOrCharge.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse Einvoicing\\Traits\\VatTrait;\n\nclass AllowanceOrCharge {\n    protected $reasonCode = null;\n    protected $reason = null;\n    protected $amount = null;\n    protected $isPercentage = false;\n\n    use VatTrait;\n\n    /**\n     * Get reason code\n     * @return string|null Reason code\n     */\n    public function getReasonCode(): ?string {\n        return $this->reasonCode;\n    }\n\n\n    /**\n     * Set reason code\n     * @param  string|null $reasonCode Reason code\n     * @return self                    This instance\n     */\n    public function setReasonCode(?string $reasonCode): self {\n        $this->reasonCode = $reasonCode;\n        return $this;\n    }\n\n\n    /**\n     * Get reason\n     * @return string|null Reason expressed as text\n     */\n    public function getReason(): ?string {\n        return $this->reason;\n    }\n\n\n    /**\n     * Set reason\n     * @param  string|null $reason Reason expressed as text\n     * @return self                This instance\n     */\n    public function setReason(?string $reason): self {\n        $this->reason = $reason;\n        return $this;\n    }\n\n\n    /**\n     * Get amount\n     * @return float Allowance/charge amount\n     */\n    public function getAmount(): float {\n        return $this->amount;\n    }\n\n\n    /**\n     * Set amount\n     * @param  float $amount Allowance/charge amount\n     * @return self          This instance\n     */\n    public function setAmount(float $amount): self {\n        $this->amount = $amount;\n        return $this;\n    }\n\n\n    /**\n     * Is percentage\n     * @return boolean Whether amount is a percentage or not\n     */\n    public function isPercentage(): bool {\n        return $this->isPercentage;\n    }\n\n\n    /**\n     * Mark as percentage\n     * @return self This instance\n     */\n    public function markAsPercentage(): self {\n        $this->isPercentage = true;\n        return $this;\n    }\n\n    \n    /**\n     * Mark as fixed amount (not a percentage)\n     * @return self This instance\n     */\n    public function markAsFixedAmount(): self {\n        $this->isPercentage = false;\n        return $this;\n    }\n\n\n    /**\n     * Get effective amount relative to base amount\n     * @param  float $baseAmount Base amount\n     * @return float             Effective amount\n     */\n    public function getEffectiveAmount(float $baseAmount): float {\n        $amount = $this->getAmount();\n        if ($this->isPercentage()) {\n            $amount = $baseAmount * ($amount / 100);\n        }\n\n        return $amount;\n    }\n}\n"
                    }
                  },
                  "Attachment.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nclass Attachment {\n    protected $id = null;\n    protected $description = null;\n    protected $externalUrl = null;\n    protected $filename = null;\n    protected $mimeCode = null;\n    protected $contents = null;\n\n    /**\n     * Get attachment ID\n     * @return Identifier|null Attachment ID\n     */\n    public function getId(): ?Identifier {\n        return $this->id;\n    }\n\n\n    /**\n     * Set attachment ID\n     * @param  Identifier|null $id Attachment ID\n     * @return self                Attachment instance\n     */\n    public function setId(?Identifier $id): self {\n        $this->id = $id;\n        return $this;\n    }\n\n\n    /**\n     * Get description\n     * @return string|null Attachment description\n     */\n    public function getDescription(): ?string {\n        return $this->description;\n    }\n\n\n    /**\n     * Set description\n     * @param  string|null $description Attachment description\n     * @return self                     Attachment instance\n     */\n    public function setDescription(?string $description): self {\n        $this->description = $description;\n        return $this;\n    }\n\n\n    /**\n     * Has external URL\n     * @return boolean Whether this attachment has an external URL or not\n     */\n    public function hasExternalUrl(): bool {\n        return ($this->externalUrl !== null);\n    }\n\n\n    /**\n     * Get external URL\n     * @return string|null Attachment external URL\n     */\n    public function getExternalUrl(): ?string {\n        return $this->externalUrl;\n    }\n\n\n    /**\n     * Set external URL\n     * @param  string|null $externalUrl Attachment external URL\n     * @return self                     Attachment instance\n     */\n    public function setExternalUrl(?string $externalUrl): self {\n        $this->externalUrl = $externalUrl;\n        return $this;\n    }\n\n\n    /**\n     * Get filename\n     * @return string|null Attachment filename\n     */\n    public function getFilename(): ?string {\n        return $this->filename;\n    }\n\n\n    /**\n     * Set filename\n     * @param  string|null $filename Attachment filename\n     * @return self                  Attachment instance\n     */\n    public function setFilename(?string $filename): self {\n        $this->filename = $filename;\n        return $this;\n    }\n\n\n    /**\n     * Get mime code\n     * @return string|null Attachment mime code\n     */\n    public function getMimeCode(): ?string {\n        return $this->mimeCode;\n    }\n\n\n    /**\n     * Set mime code\n     * @param  string|null $mimeCode Attachment mime code\n     * @return self                  Attachment instance\n     */\n    public function setMimeCode(?string $mimeCode): self {\n        $this->mimeCode = $mimeCode;\n        return $this;\n    }\n\n\n    /**\n     * Has embedded contents\n     * @return boolean Whether this attachment has embedded contents or not\n     */\n    public function hasContents(): bool {\n        return ($this->contents !== null);\n    }\n\n\n    /**\n     * Get embedded contents\n     * @return string|null Attachment contents\n     */\n    public function getContents(): ?string {\n        return $this->contents;\n    }\n\n\n    /**\n     * Set embedded contents\n     * @param  string|null $content Attachment contents\n     * @return self                 Attachment instance\n     */\n    public function setContents(?string $contents): self {\n        $this->contents = $contents;\n        return $this;\n    }\n}\n"
                    }
                  },
                  "Attribute.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nclass Attribute {\n    protected $name;\n    protected $value;\n\n    /**\n     * Class constructor\n     * @param string $name  Attribute name\n     * @param string $value Attribute value\n     */\n    public function __construct(string $name, string $value) {\n        $this->setName($name);\n        $this->setValue($value);\n    }\n\n\n    /**\n     * Get attribute name\n     * @return string Attribute name\n     */\n    public function getName(): string {\n        return $this->name;\n    }\n\n\n    /**\n     * Set attribute name\n     * @param  string $name Attribute name\n     * @return self         Attribute instance\n     */\n    public function setName(string $name): self {\n        $this->name = $name;\n        return $this;\n    }\n\n\n    /**\n     * Get attribute value\n     * @return string Attribute value\n     */\n    public function getValue(): string {\n        return $this->value;\n    }\n\n\n    /**\n     * Set attribute value\n     * @param  string $value Attribute value\n     * @return self          Attribute instance\n     */\n    public function setValue(string $value): self {\n        $this->value = $value;\n        return $this;\n    }\n}\n"
                    }
                  },
                  "Delivery.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse DateTime;\nuse Einvoicing\\Traits\\PostalAddressTrait;\n\nclass Delivery {\n    protected $name = null;\n    protected $date = null;\n    protected $locationIdentifier = null;\n\n    use PostalAddressTrait;\n\n    /**\n     * Get party name\n     * @return string|null Party name\n     */\n    public function getName(): ?string {\n        return $this->name;\n    }\n\n\n    /**\n     * Set party name\n     * @param  string|null $name Party name\n     * @return self              Delivery instance\n     */\n    public function setName(?string $name): self {\n        $this->name = $name;\n        return $this;\n    }\n\n\n    /**\n     * Get actual delivery date\n     * @return DateTime|null Actual delivery date\n     */\n    public function getDate(): ?DateTime {\n        return $this->date;\n    }\n\n\n    /**\n     * Set actual delivery date\n     * @param  DateTime|null $date Actual delivery date\n     * @return self                Delivery instance\n     */\n    public function setDate(?DateTime $date): self {\n        $this->date = $date;\n        return $this;\n    }\n\n\n    /**\n     * Get delivery location identifier\n     * @return Identifier|null Delivery location identifier\n     */\n    public function getLocationIdentifier(): ?Identifier {\n        return $this->locationIdentifier;\n    }\n\n\n    /**\n     * Set delivery location identifier\n     * @param  Identifier|null $identifier Delivery location identifier\n     * @return self                        Delivery instance\n     */\n    public function setLocationIdentifier(?Identifier $identifier): self {\n        $this->locationIdentifier = $identifier;\n        return $this;\n    }\n}\n"
                    }
                  },
                  "Exceptions": {
                    "directory": {
                      "ValidationException.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Exceptions;\n\nuse Exception;\n\nclass ValidationException extends Exception {\n    protected $businessRuleId;\n\n    /**\n     * Class constructor\n     * @param string      $message Exception message\n     * @param string|null $brId    Business rule ID\n     */\n    public function __construct(string $message, ?string $brId=null) {\n        $this->businessRuleId = $brId;\n        parent::__construct($message);\n    }\n\n\n    /**\n     * Get business rule ID\n     * @return string|null Business rule ID\n     */\n    public function getBusinessRuleId(): ?string {\n        return $this->businessRuleId;\n    }\n}\n"
                        }
                      }
                    }
                  },
                  "Identifier.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nclass Identifier {\n    protected $value;\n    protected $scheme;\n\n    /**\n     * Class constructor\n     * @param string      $value  Value\n     * @param string|null $scheme Scheme ID\n     */\n    public function __construct(string $value, ?string $scheme=null) {\n        $this->setValue($value);\n        $this->setScheme($scheme);\n    }\n\n\n    /**\n     * Get value\n     * @return string Value\n     */\n    public function getValue(): string {\n        return $this->value;\n    }\n\n\n    /**\n     * Set value\n     * @param  string $value Value\n     * @return self          Identifier instance\n     */\n    public function setValue(string $value): self {\n        $this->value = $value;\n        return $this;\n    }\n\n\n    /**\n     * Get scheme ID\n     * @return string|null Scheme ID\n     */\n    public function getScheme(): ?string {\n        return $this->scheme;\n    }\n\n\n    /**\n     * Set scheme ID\n     * @param  string|null $scheme Scheme ID\n     * @return self                Identifier instance\n     */\n    public function setScheme(?string $scheme): self {\n        $this->scheme = $scheme;\n        return $this;\n    }\n}\n"
                    }
                  },
                  "Invoice.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse DateTime;\nuse Einvoicing\\Models\\InvoiceTotals;\nuse Einvoicing\\Payments\\Payment;\nuse Einvoicing\\Presets\\AbstractPreset;\nuse Einvoicing\\Traits\\AllowanceOrChargeTrait;\nuse Einvoicing\\Traits\\AttachmentsTrait;\nuse Einvoicing\\Traits\\BuyerAccountingReferenceTrait;\nuse Einvoicing\\Traits\\InvoiceValidationTrait;\nuse Einvoicing\\Traits\\PeriodTrait;\nuse Einvoicing\\Traits\\PrecedingInvoiceReferencesTrait;\nuse InvalidArgumentException;\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\nuse function is_subclass_of;\nuse function round;\n\n/** @phan-suppress PhanUnreferencedPublicClassConstant */\nclass Invoice {\n    const DEFAULT_DECIMALS = 8;\n\n    /**\n     * Request for payment\n     *\n     * Document/message issued by a creditor to a debtor to request payment of one or more invoices past due.\n     */\n    const TYPE_REQUEST_FOR_PAYMENT = 71;\n\n    /**\n     * Debit note related to goods or services\n     *\n     * Debit information related to a transaction for goods or services to the relevant party.\n     */\n    const TYPE_DEBIT_NOTE_RELATED_TO_GOODS_OR_SERVICES = 80;\n\n    /**\n     * Metered services invoice\n     *\n     * Document/message claiming payment for the supply of metered services (e.g., gas, electricity, etc.) supplied to\n     * a fixed meter whose consumption is measured over a period of time.\n     */\n    const TYPE_METERED_SERVICES_INVOICE = 82;\n\n    /**\n     * Debit note related to financial adjustments\n     *\n     * Document/message for providing debit information related to financial adjustments to the relevant party.\n     */\n    const TYPE_DEBIT_NOTE_RELATED_TO_FINANCIAL_ADJUSTMENTS = 84;\n\n    /**\n     * Tax notification\n     *\n     * Used to specify that the message is a tax notification.\n     */\n    const TYPE_TAX_NOTIFICATION = 102;\n\n    /**\n     * Final payment request based on completion of work\n     *\n     * The final payment request of a series of payment requests submitted upon completion of all the work.\n     */\n    const TYPE_FINAL_PAYMENT_REQUEST_BASED_ON_COMPLETION_OF_WORK = 218;\n\n    /**\n     * Payment request for completed units\n     *\n     * A request for payment for completed units.\n     */\n    const TYPE_PAYMENT_REQUEST_FOR_COMPLETED_UNITS = 219;\n\n    /**\n     * Commercial invoice which includes a packing list\n     *\n     * Commercial transaction (invoice) will include a packing list.\n     */\n    const TYPE_COMMERCIAL_INVOICE_WHICH_INCLUDES_A_PACKING_LIST = 331;\n\n    /**\n     * Commercial invoice\n     *\n     * Document/message claiming payment for goods or services supplied under conditions agreed between seller and\n     * buyer.\n     */\n    const TYPE_COMMERCIAL_INVOICE = 380;\n\n    /**\n     * Commission note\n     *\n     * Document/message in which a seller specifies the amount of commission, the percentage of the invoice amount, or\n     * some other basis for the calculation of the commission to which a sales agent is entitled.\n     */\n    const TYPE_COMMISSION_NOTE = 382;\n\n    /**\n     * Debit note\n     *\n     * Document/message for providing debit information to the relevant party.\n     */\n    const TYPE_DEBIT_NOTE = 383;\n\n    /**\n     * Prepayment invoice\n     *\n     * An invoice to pay amounts for goods and services in advance; these amounts will be subtracted from the final\n     * invoice.\n     */\n    const TYPE_PREPAYMENT_INVOICE = 386;\n\n    /**\n     * Tax invoice\n     *\n     * An invoice for tax purposes.\n     */\n    const TYPE_TAX_INVOICE = 388;\n\n    /**\n     * Factored invoice\n     *\n     * Invoice assigned to a third party for collection.\n     */\n    const TYPE_FACTORED_INVOICE = 393;\n\n    /**\n     * Consignment invoice\n     *\n     * Commercial invoice that covers a transaction other than one involving a sale.\n     */\n    const TYPE_CONSIGNMENT_INVOICE = 395;\n\n    /**\n     * Forwarder's invoice discrepancy report\n     *\n     * Document/message reporting invoice discrepancies indentified by the forwarder.\n     */\n    const TYPE_FORWARDERS_INVOICE_DISCREPANCY_REPORT = 553;\n\n    /**\n     * Insurer's invoice\n     *\n     * Document/message issued by an insurer specifying the cost of an insurance which has been effected and claiming\n     * payment therefore.\n     */\n    const TYPE_INSURERS_INVOICE = 575;\n\n    /**\n     * Forwarder's invoice\n     *\n     * Invoice issued by a freight forwarder specifying services rendered and costs incurred and claiming payment\n     * therefore.\n     */\n    const TYPE_FORWARDERS_INVOICE = 623;\n\n    /**\n     * Freight invoice\n     *\n     * Document/message issued by a transport operation specifying freight costs and charges incurred for a transport\n     * operation and stating conditions of payment.\n     */\n    const TYPE_FREIGHT_INVOICE = 780;\n\n    /**\n     * Claim notification\n     *\n     * Document notifying a claim.\n     */\n    const TYPE_CLAIM_NOTIFICATION = 817;\n\n    /**\n     * Consular invoice\n     *\n     * Document/message to be prepared by an exporter in his country and presented to a diplomatic representation of the\n     * importing country for endorsement and subsequently to be presented by the importer in connection with the import\n     * of the goods described therein.\n     */\n    const TYPE_CONSULAR_INVOICE = 870;\n\n    /**\n     * Partial construction invoice\n     *\n     * Partial invoice in the context of a specific construction project.\n     */\n    const TYPE_PARTIAL_CONSTRUCTION_INVOICE = 875;\n\n    /**\n     * Partial final construction invoice\n     *\n     * Invoice concluding all previous partial construction invoices of a completed partial rendered service in the\n     * context of a specific construction project.\n     */\n    const TYPE_PARTIAL_FINAL_CONSTRUCTION_INVOICE = 876;\n\n    /**\n     * Final construction invoice\n     *\n     * Invoice concluding all previous partial invoices and partial final construction invoices in the context of a\n     * specific construction project.\n     */\n    const TYPE_FINAL_CONSTRUCTION_INVOICE = 877;\n\n    /**\n     * Credit note related to goods or services\n     * \n     * Document message used to provide credit information related to a transaction for goods or services to the\n     * relevant party.\n     */\n    const TYPE_CREDIT_NOTE_RELATED_TO_GOODS_OR_SERVICES = 81;\n\n    /**\n     * Credit note related to financial adjustments\n     * \n     * Document message for providing credit information related to financial adjustments to the relevant party,\n     * e.g., bonuses.\n     */\n    const TYPE_CREDIT_NOTE_RELATED_TO_FINANCIAL_ADJUSTMENTS = 83;\n\n    /**\n     * Credit note\n     * \n     * Document/message for providing credit information to the relevant party.\n     */\n    const TYPE_CREDIT_NOTE = 381;\n\n    /**\n     * Factored credit note\n     * \n     * Credit note related to assigned invoice(s).\n     */\n    const TYPE_FACTORED_CREDIT_NOTE = 396;\n\n    /**\n     * Forwarder's credit note\n     * \n     * Document/message for providing credit information to the relevant party.\n     */\n    const TYPE_FORWARDERS_CREDIT_NOTE = 532;\n\n    protected $preset = null;\n    protected $roundingMatrix = null;\n    protected $specification = null;\n    protected $businessProcess = null;\n    protected $number = null;\n    protected $type = self::TYPE_COMMERCIAL_INVOICE;\n    protected $currency = \"EUR\"; // TODO: add constants\n    protected $vatCurrency = null;\n    protected $issueDate = null;\n    protected $dueDate = null;\n    protected $taxPointDate = null;\n    protected $notes = [];\n    protected $buyerReference = null;\n    protected $purchaseOrderReference = null;\n    protected $salesOrderReference = null;\n    protected $tenderOrLotReference = null;\n    protected $contractReference = null;\n    protected $paidAmount = 0;\n    protected $roundingAmount = 0;\n    protected $customVatAmount = null;\n    protected $seller = null;\n    protected $buyer = null;\n    protected $payee = null;\n    protected $delivery = null;\n    protected $payment = null;\n    protected $lines = [];\n\n    use AllowanceOrChargeTrait;\n    use AttachmentsTrait;\n    use BuyerAccountingReferenceTrait;\n    use PeriodTrait;\n    use InvoiceValidationTrait;\n    use PrecedingInvoiceReferencesTrait;\n\n    /**\n     * Invoice constructor\n     * @param string|null $preset Preset classname or NULL for blank invoice\n     * @throws InvalidArgumentException if not a valid preset\n     */\n    public function __construct(?string $preset=null) {\n        if ($preset === null) return;\n\n        // Validate preset classname\n        if (!is_subclass_of($preset, AbstractPreset::class)) {\n            throw new InvalidArgumentException(\"$preset is not a valid invoice preset\");\n        }\n        /** @var AbstractPreset */\n        $this->preset = new $preset();\n\n        // Initialize instance from preset\n        $this->setSpecification($this->preset->getSpecification());\n        $this->preset->setupInvoice($this);\n    }\n\n\n    /**\n     * Get number of decimal places for a given field\n     * @param  string $field Field name\n     * @return int           Number of decimal places\n     */\n    public function getDecimals(string $field): int {\n        return $this->roundingMatrix[$field] ?? $this->roundingMatrix[''] ?? self::DEFAULT_DECIMALS;\n    }\n\n\n    /**\n     * Round value\n     * @param  float  $value Value to round\n     * @param  string $field Field name\n     * @return float         Rounded value\n     */\n    public function round(float $value, string $field): float {\n        $rounded = round($value, $this->getDecimals($field));\n        if ($rounded == 0) {\n            $rounded += 0; // To fix negative zero\n        }\n        return $rounded;\n    }\n\n\n    /**\n     * Set rounding matrix\n     * @param  array $matrix Rounding matrix\n     * @return self          Invoice instance\n     */\n    public function setRoundingMatrix(array $matrix): self {\n        $this->roundingMatrix = $matrix;\n        return $this;\n    }\n\n\n    /**\n     * Get specification identifier\n     * @return string|null Specification identifier\n     */\n    public function getSpecification(): ?string {\n        return $this->specification;\n    }\n\n\n    /**\n     * Set specification identifier\n     * @param  string $specification Specification identifier\n     * @return self                  Invoice instance\n     */\n    public function setSpecification(string $specification): self {\n        $this->specification = $specification;\n        return $this;\n    }\n\n\n    /**\n     * Get business process type\n     * @return string|null Business process type\n     */\n    public function getBusinessProcess(): ?string {\n        return $this->businessProcess;\n    }\n\n\n    /**\n     * Set business process type\n     * @param  string|null $businessProcess Business process type\n     * @return self                         Invoice instance\n     */\n    public function setBusinessProcess(?string $businessProcess): self {\n        $this->businessProcess = $businessProcess;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice number\n     * @return string|null Invoice number\n     */\n    public function getNumber(): ?string {\n        return $this->number;\n    }\n\n\n    /**\n     * Set invoice number\n     * @param  string $number Invoice number\n     * @return self           Invoice instance\n     */\n    public function setNumber(string $number): self {\n        $this->number = $number;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice type code\n     * @return int Invoice type code\n     */\n    public function getType(): int {\n        return $this->type;\n    }\n\n\n    /**\n     * Set invoice type code\n     * @param  int  $typeCode Invoice type code\n     * @return self           Invoice instance\n     */\n    public function setType(int $typeCode): self {\n        $this->type = $typeCode;\n        return $this;\n    }\n\n\n    /**\n     * Get document currency code\n     * @return string Document currency code\n     */\n    public function getCurrency(): string {\n        return $this->currency;\n    }\n\n\n    /**\n     * Set document currency code\n     * @param  string $currencyCode Document currency code\n     * @return self                 Invoice instance\n     */\n    public function setCurrency(string $currencyCode): self {\n        $this->currency = $currencyCode;\n        return $this;\n    }\n\n\n    /**\n     * Get VAT accounting currency code\n     * @return string|null VAT accounting currency code or NULL if same as document's\n     */\n    public function getVatCurrency(): ?string {\n        return $this->vatCurrency;\n    }\n\n\n    /**\n     * Set VAT accounting currency code\n     * @param  string|null $currencyCode VAT accounting currency code or NULL if same as document's\n     * @return self                      Invoice instance\n     */\n    public function setVatCurrency(?string $currencyCode): self {\n        $this->vatCurrency = $currencyCode;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice issue date\n     * @return DateTime|null Invoice issue date\n     */\n    public function getIssueDate(): ?DateTime {\n        return $this->issueDate;\n    }\n\n\n    /**\n     * Set invoice issue date\n     * @param  DateTime $issueDate Invoice issue date\n     * @return self                Invoice instance\n     */\n    public function setIssueDate(DateTime $issueDate): self {\n        $this->issueDate = $issueDate;\n        return $this;\n    }\n\n\n    /**\n     * Get payment due date\n     * @return DateTime|null Payment due date\n     */\n    public function getDueDate(): ?DateTime {\n        return $this->dueDate;\n    }\n\n\n    /**\n     * Set payment due date\n     * @param  DateTime|null $dueDate Payment due date\n     * @return self                   Invoice instance\n     */\n    public function setDueDate(?DateTime $dueDate): self {\n        $this->dueDate = $dueDate;\n        return $this;\n    }\n\n\n    /**\n     * Get tax point date\n     * @return DateTime|null Tax point date\n     */\n    public function getTaxPointDate(): ?DateTime {\n        return $this->taxPointDate;\n    }\n\n\n    /**\n     * Set tax point date\n     * @param  DateTime|null $taxPointDate Tax point date\n     * @return self                        Invoice instance\n     */\n    public function setTaxPointDate(?DateTime $taxPointDate): self {\n        $this->taxPointDate = $taxPointDate;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice notes\n     * @return string[] Invoice notes\n     */\n    public function getNotes(): array {\n        return $this->notes;\n    }\n\n\n    /**\n     * Add invoice note\n     * @param  string $note Invoice note\n     * @return self         Invoice instance\n     */\n    public function addNote(string $note): self {\n        $this->notes[] = $note;\n        return $this;\n    }\n\n\n    /**\n     * Remove invoice note\n     * @param  int  $index Invoice note index\n     * @return self        Invoice instance\n     * @throws OutOfBoundsException if invoice note index is out of bounds\n     */\n    public function removeNote(int $index): self {\n        if ($index < 0 || $index >= count($this->notes)) {\n            throw new OutOfBoundsException('Could not find invoice note by index');\n        }\n        array_splice($this->notes, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all invoice notes\n     * @return self Invoice instance\n     */\n    public function clearNotes(): self {\n        $this->notes = [];\n        return $this;\n    }\n\n\n    /**\n     * Get invoice note\n     * @return string|null Invoice note\n     * @deprecated 0.2.1\n     * @see Invoice::getNotes()\n     */\n    public function getNote(): ?string {\n        return $this->notes[0] ?? null;\n    }\n\n\n    /**\n     * Set invoice note\n     * @param  string|null $note Invoice note\n     * @return self              Invoice instance\n     * @deprecated 0.2.1\n     * @see Invoice::addNote()\n     */\n    public function setNote(?string $note): self {\n        // @phan-suppress-next-line PhanPartialTypeMismatchProperty\n        $this->notes = ($note === null) ? [] : [$note];\n        return $this;\n    }\n\n\n    /**\n     * Get buyer reference\n     * @return string|null Buyer reference\n     */\n    public function getBuyerReference(): ?string {\n        return $this->buyerReference;\n    }\n\n\n    /**\n     * Set buyer reference\n     * @param  string|null $buyerReference Buyer reference\n     * @return self                        Invoice instance\n     */\n    public function setBuyerReference(?string $buyerReference): self {\n        $this->buyerReference = $buyerReference;\n        return $this;\n    }\n\n\n    /**\n     * Get purchase order reference\n     * @return string|null Purchase order reference\n     */\n    public function getPurchaseOrderReference(): ?string {\n        return $this->purchaseOrderReference;\n    }\n\n\n    /**\n     * Set purchase order reference\n     * @param  string|null $purchaseOrderReference Purchase order reference\n     * @return self                                Invoice instance\n     */\n    public function setPurchaseOrderReference(?string $purchaseOrderReference): self {\n        $this->purchaseOrderReference = $purchaseOrderReference;\n        return $this;\n    }\n\n\n    /**\n     * Get sales order reference\n     * @return string|null Sales order reference\n     */\n    public function getSalesOrderReference(): ?string {\n        return $this->salesOrderReference;\n    }\n\n\n    /**\n     * Set sales order reference\n     * @param  string|null $salesOrderReference Sales order reference\n     * @return self                             Invoice instance\n     */\n    public function setSalesOrderReference(?string $salesOrderReference): self {\n        $this->salesOrderReference = $salesOrderReference;\n        return $this;\n    }\n\n\n    /**\n     * Get tender or lot reference\n     * @return string|null Tender or lot reference\n     */\n    public function getTenderOrLotReference(): ?string {\n        return $this->tenderOrLotReference;\n    }\n\n\n    /**\n     * Set tender or lot reference\n     * @param  string|null $tenderOrLotReference Tender or lot reference\n     * @return self                              Invoice instance\n     */\n    public function setTenderOrLotReference(?string $tenderOrLotReference): self {\n        $this->tenderOrLotReference = $tenderOrLotReference;\n        return $this;\n    }\n\n\n    /**\n     * Get contract reference\n     * @return string|null Contract reference\n     */\n    public function getContractReference(): ?string {\n        return $this->contractReference;\n    }\n\n\n    /**\n     * Set contract reference\n     * @param  string|null $contractReference Contract reference\n     * @return self                           Invoice instance\n     */\n    public function setContractReference(?string $contractReference): self {\n        $this->contractReference = $contractReference;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice prepaid amount\n     * @return float Invoice prepaid amount\n     */\n    public function getPaidAmount(): float {\n        return $this->paidAmount;\n    }\n\n\n    /**\n     * Set invoice prepaid amount\n     * @param  float $paidAmount Invoice prepaid amount\n     * @return self              Invoice instance\n     */\n    public function setPaidAmount(float $paidAmount): self {\n        $this->paidAmount = $paidAmount;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice rounding amount\n     * @return float Invoice rounding amount\n     */\n    public function getRoundingAmount(): float {\n        return $this->roundingAmount;\n    }\n\n\n    /**\n     * Set invoice rounding amount\n     * @param  float $roundingAmount Invoice rounding amount\n     * @return self                  Invoice instance\n     */\n    public function setRoundingAmount(float $roundingAmount): self {\n        $this->roundingAmount = $roundingAmount;\n        return $this;\n    }\n\n\n    /**\n     * Get total VAT amount in VAT accounting currency\n     * @return float|null Total amount in accounting currency\n     */\n    public function getCustomVatAmount(): ?float {\n        return $this->customVatAmount;\n    }\n\n\n    /**\n     * Set total VAT amount in VAT accounting currency\n     * @param  float|null  $customVatAmount Total amount in accounting currency\n     * @return self                         Invoice instance\n     */\n    public function setCustomVatAmount(?float $customVatAmount): self {\n        $this->customVatAmount = $customVatAmount;\n        return $this;\n    }\n\n\n    /**\n     * Get seller\n     * @return Party|null Seller instance\n     */\n    public function getSeller(): ?Party {\n        return $this->seller;\n    }\n\n\n    /**\n     * Set seller\n     * @param  Party $seller Seller instance\n     * @return self          Invoice instance\n     */\n    public function setSeller(Party $seller): self {\n        $this->seller = $seller;\n        return $this;\n    }\n\n\n    /**\n     * Get buyer\n     * @return Party|null Buyer instance\n     */\n    public function getBuyer(): ?Party {\n        return $this->buyer;\n    }\n\n\n    /**\n     * Set buyer\n     * @param  Party $buyer Buyer instance\n     * @return self          Invoice instance\n     */\n    public function setBuyer(Party $buyer): self {\n        $this->buyer = $buyer;\n        return $this;\n    }\n\n\n    /**\n     * Get payee\n     * @return Party|null Payee instance\n     */\n    public function getPayee(): ?Party {\n        return $this->payee;\n    }\n\n\n    /**\n     * Set payee\n     * @param  Party|null $payee Payee instance\n     * @return self              Invoice instance\n     */\n    public function setPayee(?Party $payee): self {\n        $this->payee = $payee;\n        return $this;\n    }\n\n\n    /**\n     * Get delivery information\n     * @return Delivery|null Delivery instance\n     */\n    public function getDelivery(): ?Delivery {\n        return $this->delivery;\n    }\n\n\n    /**\n     * Set delivery information\n     * @param  Delivery|null $delivery Delivery instance\n     * @return self                    Invoice instance\n     */\n    public function setDelivery(?Delivery $delivery): self {\n        $this->delivery = $delivery;\n        return $this;\n    }\n\n\n    /**\n     * Get payment information\n     * @return Payment|null Payment instance\n     */\n    public function getPayment(): ?Payment {\n        return $this->payment;\n    }\n\n\n    /**\n     * Set payment information\n     * @param  Payment|null $payment Payment instance\n     * @return self                  Invoice instance\n     */\n    public function setPayment(?Payment $payment): self {\n        $this->payment = $payment;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice lines\n     * @return InvoiceLine[] Invoice lines\n     */\n    public function getLines(): array {\n        return $this->lines;\n    }\n\n\n    /**\n     * Add invoice line\n     * @param  InvoiceLine $line Invoice line instance\n     * @return self              Invoice instance\n     */\n    public function addLine(InvoiceLine $line): self {\n        $this->lines[] = $line;\n        return $this;\n    }\n\n\n    /**\n     * Remove invoice line\n     * @param  int  $index Invoice line index\n     * @return self        Invoice instance\n     * @throws OutOfBoundsException if line index is out of bounds\n     */\n    public function removeLine(int $index): self {\n        if ($index < 0 || $index >= count($this->lines)) {\n            throw new OutOfBoundsException('Could not find line by index inside invoice');\n        }\n        array_splice($this->lines, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all invoice lines\n     * @return self Invoice instance\n     */\n    public function clearLines(): self {\n        $this->lines = [];\n        return $this;\n    }\n\n\n    /**\n     * Get invoice total\n     * @return InvoiceTotals Invoice totals\n     */\n    public function getTotals(): InvoiceTotals {\n        return InvoiceTotals::fromInvoice($this);\n    }\n}\n"
                    }
                  },
                  "InvoiceLine.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse Einvoicing\\Traits\\AllowanceOrChargeTrait;\nuse Einvoicing\\Traits\\AttributesTrait;\nuse Einvoicing\\Traits\\BuyerAccountingReferenceTrait;\nuse Einvoicing\\Traits\\ClassificationIdentifiersTrait;\nuse Einvoicing\\Traits\\PeriodTrait;\nuse Einvoicing\\Traits\\VatTrait;\n\nclass InvoiceLine {\n    protected $id = null;\n    protected $orderLineReference = null;\n    protected $name = null;\n    protected $description = null;\n    protected $originCountry = null;\n    protected $note = null;\n    protected $standardIdentifier = null;\n    protected $buyerIdentifier = null;\n    protected $sellerIdentifier = null;\n    protected $quantity = 1;\n    protected $unit = \"C62\"; // TODO: add constants\n    protected $price = null;\n    protected $baseQuantity = 1;\n\n    use AllowanceOrChargeTrait;\n    use AttributesTrait;\n    use BuyerAccountingReferenceTrait;\n    use ClassificationIdentifiersTrait;\n    use PeriodTrait;\n    use VatTrait;\n\n    /**\n     * Get invoice line identifier\n     * @return string|null Invoice line identifier\n     */\n    public function getId(): ?string {\n        return $this->id;\n    }\n\n\n    /**\n     * Set invoice line identifier\n     * @param  string $id Invoice line identifier\n     * @return self       Invoice line instance\n     */\n    public function setId(string $id): self {\n        $this->id = $id;\n        return $this;\n    }\n\n\n    /**\n     * Get order line reference\n     * @return string|null Order line reference\n     */\n    public function getOrderLineReference(): ?string {\n        return $this->orderLineReference;\n    }\n\n\n    /**\n     * Set order line reference\n     * @param  string|null $reference Order line reference\n     * @return self                   Invoice line instance\n     */\n    public function setOrderLineReference(?string $reference): self {\n        $this->orderLineReference = $reference;\n        return $this;\n    }\n\n\n    /**\n     * Get item name\n     * @return string|null Item name\n     */\n    public function getName(): ?string {\n        return $this->name;\n    }\n\n\n    /**\n     * Set item name\n     * @param  string $name Item name\n     * @return self         Invoice line instance\n     */\n    public function setName(string $name): self {\n        $this->name = $name;\n        return $this;\n    }\n\n\n    /**\n     * Get item description\n     * @return string|null Item description\n     */\n    public function getDescription(): ?string {\n        return $this->description;\n    }\n\n\n    /**\n     * Set item description\n     * @param  string|null $description Item description\n     * @return self                     Invoice line instance\n     */\n    public function setDescription(?string $description): self {\n        $this->description = $description;\n        return $this;\n    }\n\n\n    /**\n     * Get item origin country\n     * @return string|null Item origin country code\n     */\n    public function getOriginCountry(): ?string {\n        return $this->originCountry;\n    }\n\n\n    /**\n     * Set item origin country\n     * @param  string|null $originCountry Item origin country code\n     * @return self                       Invoice line instance\n     */\n    public function setOriginCountry(?string $originCountry): self {\n        $this->originCountry = $originCountry;\n        return $this;\n    }\n\n\n    /**\n     * Get invoice line note\n     * @return string|null Invoice line note\n     */\n    public function getNote(): ?string {\n        return $this->note;\n    }\n\n\n    /**\n     * Set invoice line note\n     * @param  string|null $note Invoice line note\n     * @return self              Invoice line instance\n     */\n    public function setNote(?string $note): self {\n        $this->note = $note;\n        return $this;\n    }\n\n\n    /**\n     * Get item standard identifier\n     * @return Identifier|null Item standard identifier\n     */\n    public function getStandardIdentifier(): ?Identifier {\n        return $this->standardIdentifier;\n    }\n\n\n    /**\n     * Set item standard identifier\n     * @param  Identifier|null $identifier Item standard identifier\n     * @return self                        Invoice line instance\n     */\n    public function setStandardIdentifier(?Identifier $identifier): self {\n        $this->standardIdentifier = $identifier;\n        return $this;\n    }\n\n\n    /**\n     * Get buyer identifier\n     * @return string|null Buyer identifier\n     */\n    public function getBuyerIdentifier(): ?string {\n        return $this->buyerIdentifier;\n    }\n\n\n    /**\n     * Set buyer identifier\n     * @param  string|null $identifier Buyer identifier\n     * @return self                    Invoice line instance\n     */\n    public function setBuyerIdentifier(?string $identifier): self {\n        $this->buyerIdentifier = $identifier;\n        return $this;\n    }\n\n\n    /**\n     * Get seller identifier\n     * @return string|null Seller identifier\n     */\n    public function getSellerIdentifier(): ?string {\n        return $this->sellerIdentifier;\n    }\n\n\n    /**\n     * Set seller identifier\n     * @param  string|null $identifier Seller identifier\n     * @return self                    Invoice line instance\n     */\n    public function setSellerIdentifier(?string $identifier): self {\n        $this->sellerIdentifier = $identifier;\n        return $this;\n    }\n\n\n    /**\n     * Get quantity\n     * @return float Quantity\n     */\n    public function getQuantity(): float {\n        return $this->quantity;\n    }\n\n\n    /**\n     * Set quantity\n     * @param  float $quantity Quantity\n     * @return self            Invoice line instance\n     */\n    public function setQuantity(float $quantity): self {\n        $this->quantity = $quantity;\n        return $this;\n    }\n\n\n    /**\n     * Get unit code\n     * @return string Unit code\n     */\n    public function getUnit(): string {\n        return $this->unit;\n    }\n\n\n    /**\n     * Set unit code\n     * @param  string $unitCode Unit code\n     * @return self             Invoice line instance\n     */\n    public function setUnit(string $unitCode): self {\n        $this->unit = $unitCode;\n        return $this;\n    }\n\n\n    /**\n     * Get price\n     * @return float|null Price\n     */\n    public function getPrice(): ?float {\n        return $this->price;\n    }\n\n\n    /**\n     * Set price\n     * @param  float      $price        Price\n     * @param  float|null $baseQuantity Base quantity\n     * @return self                     Invoice line instance\n     */\n    public function setPrice(float $price, ?float $baseQuantity=null): self {\n        $this->price = $price;\n        if ($baseQuantity !== null) {\n            $this->setBaseQuantity($baseQuantity);\n        }\n        return $this;\n    }\n\n\n    /**\n     * Get base quantity\n     * @return float Base quantity\n     */\n    public function getBaseQuantity(): float {\n        return $this->baseQuantity;\n    }\n\n\n    /**\n     * Set base quantity\n     * @param  float $baseQuantity Base quantity\n     * @return self                Invoice line instance\n     */\n    public function setBaseQuantity(float $baseQuantity): self {\n        $this->baseQuantity = $baseQuantity;\n        return $this;\n    }\n\n\n    /**\n     * Get total net amount (without VAT) before allowances/charges\n     * @return float|null Net amount before allowances/charges\n     */\n    public function getNetAmountBeforeAllowancesCharges(): ?float {\n        if ($this->price === null) {\n            return null;\n        }\n        return ($this->price / $this->baseQuantity) * $this->quantity;\n    }\n\n\n    /**\n     * Get allowances total amount\n     * @return float Allowances total amount\n     */\n    public function getAllowancesAmount(): float {\n        $allowancesAmount = 0;\n        $baseAmount = $this->getNetAmountBeforeAllowancesCharges() ?? 0.0;\n        foreach ($this->getAllowances() as $item) {\n            $allowancesAmount += $item->getEffectiveAmount($baseAmount);\n        }\n        return $allowancesAmount;\n    }\n\n\n    /**\n     * Get charges total amount\n     * @return float Charges total amount\n     */\n    public function getChargesAmount(): float {\n        $chargesAmount = 0;\n        $baseAmount = $this->getNetAmountBeforeAllowancesCharges() ?? 0.0;\n        foreach ($this->getCharges() as $item) {\n            $chargesAmount += $item->getEffectiveAmount($baseAmount);\n        }\n        return $chargesAmount;\n    }\n\n\n    /**\n     * Get total net amount (without VAT)\n     * NOTE: inclusive of line level allowances and charges\n     * @return float|null Net amount\n     */\n    public function getNetAmount(): ?float {\n        $netAmount = $this->getNetAmountBeforeAllowancesCharges();\n        if ($netAmount === null) {\n            return null;\n        }\n        $netAmount -= $this->getAllowancesAmount();\n        $netAmount += $this->getChargesAmount();\n        return $netAmount;\n    }\n}\n"
                    }
                  },
                  "InvoiceReference.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse DateTime;\n\nclass InvoiceReference {\n    protected $value;\n    protected $issueDate;\n\n    /**\n     * Class constructor\n     * @param string        $value     Value\n     * @param DateTime|null $issueDate Issue date\n     */\n    public function __construct(string $value, ?DateTime $issueDate=null) {\n        $this->setValue($value);\n        $this->setIssueDate($issueDate);\n    }\n\n\n    /**\n     * Get value\n     * @return string Value\n     */\n    public function getValue(): string {\n        return $this->value;\n    }\n\n\n    /**\n     * Set value\n     * @param  string $value Value\n     * @return self          Invoice reference instance\n     */\n    public function setValue(string $value): self {\n        $this->value = $value;\n        return $this;\n    }\n\n\n    /**\n     * Get issue date\n     * @return DateTime|null Issue date\n     */\n    public function getIssueDate(): ?DateTime {\n        return $this->issueDate;\n    }\n\n\n    /**\n     * Set issue date\n     * @param  DateTime|null $issueDate Issue date\n     * @return self                     Invoice reference instance\n     */\n    public function setIssueDate(?DateTime $issueDate): self {\n        $this->issueDate = $issueDate;\n        return $this;\n    }\n}\n"
                    }
                  },
                  "Models": {
                    "directory": {
                      "InvoiceTotals.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Models;\n\nuse Einvoicing\\Invoice;\nuse Einvoicing\\Traits\\VatTrait;\nuse function array_values;\n\nclass InvoiceTotals {\n    /**\n     * Invoice currency code\n     * @var string\n     */\n    public $currency;\n\n    /**\n     * VAT accounting currency code\n     * @var string|null\n     */\n    public $vatCurrency = null;\n\n    /**\n     * Sum of all invoice line net amounts\n     * @var float\n     */\n    public $netAmount = 0;\n\n    /**\n     * Sum of all allowances on document level\n     * @var float\n     */\n    public $allowancesAmount = 0;\n\n    /**\n     * Sum of all charges on document level\n     * @var float\n     */\n    public $chargesAmount = 0;\n\n    /**\n     * Total VAT amount for the invoice\n     * @var float\n     */\n    public $vatAmount = 0;\n\n    /**\n     * Invoice total amount without VAT\n     * @var float\n     */\n    public $taxExclusiveAmount = 0;\n\n    /**\n     * Invoice total amount with VAT\n     * @var float\n     */\n    public $taxInclusiveAmount = 0;\n    \n    /**\n     * The sum of amounts which have been paid in advance\n     * @var float\n     */\n    public $paidAmount = 0;\n\n    /**\n     * The amount to be added to the invoice total to round the amount to be paid\n     * @var float\n     */\n    public $roundingAmount = 0;\n\n    /**\n     * Total VAT amount in accounting currency\n     * @var float|null\n     */\n    public $customVatAmount = null;\n\n    /**\n     * Amount due for payment\n     * @var float\n     */\n    public $payableAmount = 0;\n\n    /**\n     * Group of business terms providing information about VAT breakdown\n     * @var VatBreakdown[]\n     */\n    public $vatBreakdown = [];\n\n    /**\n     * Create instance from invoice\n     * @param  Invoice $inv Invoice instance\n     * @return self         Totals instance\n     */\n    static public function fromInvoice(Invoice $inv): InvoiceTotals {\n        $totals = new self();\n        $vatMap = [];\n\n        // Set currency codes\n        $totals->currency = $inv->getCurrency();\n        $totals->vatCurrency = $inv->getVatCurrency();\n\n        // Process all invoice lines\n        foreach ($inv->getLines() as $line) {\n            $lineNetAmount = $inv->round($line->getNetAmount() ?? 0.0, 'line/netAmount');\n            $totals->netAmount += $lineNetAmount;\n            self::updateVatMap($vatMap, $line, $lineNetAmount);\n        }\n        $totals->netAmount = $inv->round($totals->netAmount, 'invoice/netAmount');\n\n        // Process allowances\n        foreach ($inv->getAllowances() as $item) {\n            $allowanceAmount = $inv->round($item->getEffectiveAmount($totals->netAmount), 'line/allowanceChargeAmount');\n            $totals->allowancesAmount += $allowanceAmount;\n            self::updateVatMap($vatMap, $item, -$allowanceAmount);\n        }\n        $totals->allowancesAmount = $inv->round($totals->allowancesAmount, 'invoice/allowancesChargesAmount');\n\n        // Process charges\n        foreach ($inv->getCharges() as $item) {\n            $chargeAmount = $inv->round($item->getEffectiveAmount($totals->netAmount), 'line/allowanceChargeAmount');\n            $totals->chargesAmount += $chargeAmount;\n            self::updateVatMap($vatMap, $item, $chargeAmount);\n        }\n        $totals->chargesAmount = $inv->round($totals->chargesAmount, 'invoice/allowancesChargesAmount');\n\n        // Calculate VAT amounts\n        foreach ($vatMap as $item) {\n            $item->taxableAmount = $inv->round($item->taxableAmount, 'invoice/allowancesChargesAmount');\n            $item->taxAmount = $inv->round($item->taxableAmount * ($item->rate / 100), 'invoice/vatAmount');\n            $totals->vatAmount += $item->taxAmount;\n        }\n        $totals->vatAmount = $inv->round($totals->vatAmount, 'invoice/vatAmount');\n\n        // Add custom VAT amount\n        $totals->customVatAmount = $inv->getCustomVatAmount();\n        if ($totals->customVatAmount !== null) {\n            $totals->customVatAmount = $inv->round($inv->getCustomVatAmount(), 'invoice/vatAmount');\n        }\n\n        // Attach VAT breakdown\n        $totals->vatBreakdown = array_values($vatMap);\n\n        // Calculate rest of properties\n        $totals->taxExclusiveAmount = $inv->round(\n            $totals->netAmount - $totals->allowancesAmount + $totals->chargesAmount,\n            'invoice/taxExclusiveAmount'\n        );\n        $totals->taxInclusiveAmount = $inv->round(\n            $totals->taxExclusiveAmount + $totals->vatAmount,\n            'invoice/taxInclusiveAmount'\n        );\n        $totals->paidAmount = $inv->round($inv->getPaidAmount(), 'invoice/paidAmount');\n        $totals->roundingAmount = $inv->round($inv->getRoundingAmount(), 'invoice/roundingAmount');\n        $totals->payableAmount = $inv->round(\n            $totals->taxInclusiveAmount - $totals->paidAmount + $totals->roundingAmount,\n            'invoice/payableAmount'\n        );\n\n        return $totals;\n    }\n\n\n    /**\n     * Update VAT map\n     * @param VatBreakdown[string] &$vatMap          VAT map reference\n     * @param VatTrait             $item             Item instance\n     * @param float|null           $rate             VAT rate\n     * @param float                $addTaxableAmount Taxable amount to add\n     */\n    static private function updateVatMap(array &$vatMap, $item, float $addTaxableAmount) {\n        $category = $item->getVatCategory();\n        $rate = $item->getVatRate();\n        $key = \"$category:$rate\";\n\n        // Initialize VAT breakdown\n        if (!isset($vatMap[$key])) {\n            $vatMap[$key] = new VatBreakdown();\n            $vatMap[$key]->category = $category;\n            $vatMap[$key]->rate = $rate;\n        }\n\n        // Update exemption reason (last item overwrites previous ones)\n        $exemptionReasonCode = $item->getVatExemptionReasonCode();\n        $exemptionReason = $item->getVatExemptionReason();\n        if ($exemptionReasonCode !== null) {\n            $vatMap[$key]->exemptionReasonCode = $exemptionReasonCode;\n        }\n        if ($exemptionReason !== null) {\n            $vatMap[$key]->exemptionReason = $exemptionReason;\n        }\n\n        // Increase taxable amount\n        $vatMap[$key]->taxableAmount += $addTaxableAmount;\n    }\n}\n"
                        }
                      },
                      "VatBreakdown.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Models;\n\nclass VatBreakdown {\n    /**\n     * VAT category code\n     * @var string\n     */\n    public $category;\n\n    /**\n     * VAT rate as a percentage\n     * @var float|null\n     */\n    public $rate;\n\n    /**\n     * VAT exemption reason code\n     * @var string|null\n     */\n    public $exemptionReasonCode = null;\n\n    /**\n     * VAT exemption reason as text\n     * @var string|null\n     */\n    public $exemptionReason = null;\n\n    /**\n     * Sum of all taxable amounts\n     * @var float\n     */\n    public $taxableAmount = 0;\n\n    /**\n     * Total VAT amount\n     * @var float\n     */\n    public $taxAmount = 0;\n}\n"
                        }
                      }
                    }
                  },
                  "Party.php": {
                    "file": {
                      "contents": "<?php\nnamespace Einvoicing;\n\nuse Einvoicing\\Traits\\IdentifiersTrait;\nuse Einvoicing\\Traits\\PostalAddressTrait;\n\nclass Party {\n    protected $electronicAddress = null;\n    protected $name = null;\n    protected $tradingName = null;\n    protected $companyId = null;\n    protected $vatNumber = null;\n    protected $taxRegistrationId = null;\n    protected $legalInformation = null;\n    protected $contactName = null;\n    protected $contactPhone = null;\n    protected $contactEmail = null;\n\n    use IdentifiersTrait;\n    use PostalAddressTrait;\n\n    /**\n     * Get electronic address\n     * @return Identifier|null Electronic address\n     */\n    public function getElectronicAddress(): ?Identifier {\n        return $this->electronicAddress;\n    }\n\n\n    /**\n     * Set electronic address\n     * @param  Identifier|null $electronicAddress Electronic address\n     * @return self                               Party instance\n     */\n    public function setElectronicAddress(?Identifier $electronicAddress): self {\n        $this->electronicAddress = $electronicAddress;\n        return $this;\n    }\n\n\n    /**\n     * Get party legal name\n     * @return string|null Party legal name\n     */\n    public function getName(): ?string {\n        return $this->name;\n    }\n\n\n    /**\n     * Set party legal name\n     * @param  string|null $name Party legal name\n     * @return self              Party instance\n     */\n    public function setName(?string $name): self {\n        $this->name = $name;\n        return $this;\n    }\n\n\n    /**\n     * Get party trading name (also known as business name)\n     * @return string|null Party trading name\n     */\n    public function getTradingName(): ?string {\n        return $this->tradingName;\n    }\n\n\n    /**\n     * Set party trading name (also known as business name)\n     * @param  string|null $tradingName Party trading name\n     * @return self                     Party instance\n     */\n    public function setTradingName(?string $tradingName): self {\n        $this->tradingName = $tradingName;\n        return $this;\n    }\n\n    \n    /**\n     * Get party company legal ID\n     * @return Identifier|null Party company legal ID\n     */\n    public function getCompanyId(): ?Identifier {\n        return $this->companyId;\n    }\n\n\n    /**\n     * Set party company legal ID\n     * @param  Identifier|null $companyId Party company legal ID\n     * @return self                       Party instance\n     */\n    public function setCompanyId(?Identifier $companyId): self {\n        $this->companyId = $companyId;\n        return $this;\n    }\n\n\n    /**\n     * Get party VAT number\n     * @return string|null Party VAT number\n     */\n    public function getVatNumber(): ?string {\n        return $this->vatNumber;\n    }\n\n\n    /**\n     * Set party VAT number\n     * @param  string|null $vatNumber Party VAT number\n     * @return self                   Party instance\n     */\n    public function setVatNumber(?string $vatNumber): self {\n        $this->vatNumber = $vatNumber;\n        return $this;\n    }\n\n\n    /**\n     * Get tax registration ID\n     * @return Identifier|null Tax registration ID\n     */\n    public function getTaxRegistrationId(): ?Identifier {\n        return $this->taxRegistrationId;\n    }\n\n\n    /**\n     * Set tax registration ID\n     * @param  Identifier|null $taxRegistrationId Tax registration ID\n     * @return self                               Party instance\n     */\n    public function setTaxRegistrationId(?Identifier $taxRegistrationId): self {\n        $this->taxRegistrationId = $taxRegistrationId;\n        return $this;\n    }\n\n\n    /**\n     * Get additional legal information\n     * @return string|null Additional legal information\n     */\n    public function getLegalInformation(): ?string {\n        return $this->legalInformation;\n    }\n\n\n    /**\n     * Set additional legal information\n     * @param string|null $legalInformation Additional legal information\n     * @return self                         Party instance\n     */\n    public function setLegalInformation(?string $legalInformation): self {\n        $this->legalInformation = $legalInformation;\n        return $this;\n    }\n\n\n    /**\n     * Get contact point name\n     * @return string|null Contact name\n     */\n    public function getContactName(): ?string {\n        return $this->contactName;\n    }\n\n\n    /**\n     * Set contact point name\n     * @param  string|null $contactName Contact name\n     * @return self                     This instance\n     */\n    public function setContactName(?string $contactName): self {\n        $this->contactName = $contactName;\n        return $this;\n    }\n\n\n    /**\n     * Get contact point phone number\n     * @return string|null Contact phone number\n     */\n    public function getContactPhone(): ?string {\n        return $this->contactPhone;\n    }\n\n\n    /**\n     * Set contact point phone number\n     * @param  string|null $contactPhone Contact phone number\n     * @return self                      This instance\n     */\n    public function setContactPhone(?string $contactPhone): self {\n        $this->contactPhone = $contactPhone;\n        return $this;\n    }\n\n\n    /**\n     * Get contact point email addresss\n     * @return string|null Contact email address\n     */\n    public function getContactEmail(): ?string {\n        return $this->contactEmail;\n    }\n\n\n    /**\n     * Set contact point email address\n     * @param  string|null $contactEmail Contact email address\n     * @return self                      This instance\n     */\n    public function setContactEmail(?string $contactEmail): self {\n        $this->contactEmail = $contactEmail;\n        return $this;\n    }\n\n\n    /**\n     * Has contact information\n     * @return boolean TRUE if party has any contact information, FALSE otherwise\n     */\n    public function hasContactInformation(): bool {\n        return ($this->contactName !== null) || ($this->contactPhone !== null) || ($this->contactEmail !== null);\n    }\n}\n"
                    }
                  },
                  "Payments": {
                    "directory": {
                      "Card.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Payments;\n\nclass Card {\n    protected $pan = null;\n    protected $network = null;\n    protected $holder = null;\n\n    /**\n     * Get card PAN (Primary Account Number)\n     * @return string|null Card PAN\n     */\n    public function getPan(): ?string {\n        return $this->pan;\n    }\n\n\n    /**\n     * Set card PAN (Primary Account Number)\n     * @param  string $pan Card PAN\n     * @return self        Card instance\n     */\n    public function setPan(string $pan): self {\n        $this->pan = $pan;\n        return $this;\n    }\n\n\n    /**\n     * Get card network ID\n     * @return string|null Card network ID\n     */\n    public function getNetwork(): ?string {\n        return $this->network;\n    }\n\n\n    /**\n     * Set card network ID\n     * @param  string|null $network Card network ID\n     * @return self                 Card instance\n     */\n    public function setNetwork(?string $network): self {\n        $this->network = $network;\n        return $this;\n    }\n\n\n    /**\n     * Get card holder name\n     * @return string|null Card holder name\n     */\n    public function getHolder(): ?string {\n        return $this->holder;\n    }\n\n\n    /**\n     * Set card holder name\n     * @param  string|null $holder Card holder name\n     * @return self                Card instance\n     */\n    public function setHolder(?string $holder): self {\n        $this->holder = $holder;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "Mandate.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Payments;\n\nclass Mandate {\n    protected $reference = null;\n    protected $account = null;\n\n    /**\n     * Get mandate reference ID\n     * @return string|null Mandate reference ID\n     */\n    public function getReference(): ?string {\n        return $this->reference;\n    }\n\n\n    /**\n     * Set mandate reference ID\n     * @param  string|null $reference Mandate reference ID\n     * @return self                   Mandate instance\n     */\n    public function setReference(?string $reference): self {\n        $this->reference = $reference;\n        return $this;\n    }\n\n\n    /**\n     * Get debited account ID\n     * @return string|null Debited account ID\n     */\n    public function getAccount(): ?string {\n        return $this->account;\n    }\n\n\n    /**\n     * Set debited account ID\n     * @param  string|null $account Debited account ID\n     * @return self                 Mandate instance\n     */\n    public function setAccount(?string $account): self {\n        $this->account = $account;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "Payment.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Payments;\n\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\n\nclass Payment {\n    protected $id = null;\n    protected $meansCode = null;\n    protected $meansText = null;\n    protected $terms = null;\n    protected $transfers = [];\n    protected $card = null;\n    protected $mandate = null;\n\n    /**\n     * Get payment ID\n     * @return string|null Payment ID\n     */\n    public function getId(): ?string {\n        return $this->id;\n    }\n\n\n    /**\n     * Set payment ID\n     * @param  string|null $id Payment ID\n     * @return self            Payment instance\n     */\n    public function setId(?string $id): self {\n        $this->id = $id;\n        return $this;\n    }\n\n\n    /**\n     * Get payment means code\n     * @return string|null Payment means code\n     */\n    public function getMeansCode(): ?string {\n        return $this->meansCode;\n    }\n\n\n    /**\n     * Set payment means code\n     * @param  string $meansCode Payment means code\n     * @return self              Payment instance\n     */\n    public function setMeansCode(string $meansCode): self {\n        $this->meansCode = $meansCode;\n        return $this;\n    }\n\n\n    /**\n     * Get payment means text\n     * @return string|null Payment means text\n     */\n    public function getMeansText(): ?string {\n        return $this->meansText;\n    }\n\n\n    /**\n     * Set payment means text\n     * @param  string|null $meansText Payment means text\n     * @return self                   Payment instance\n     */\n    public function setMeansText(?string $meansText): self {\n        $this->meansText = $meansText;\n        return $this;\n    }\n\n\n    /**\n     * Get payment terms\n     * @return string|null Payment terms\n     */\n    public function getTerms(): ?string {\n        return $this->terms;\n    }\n\n\n    /**\n     * Set payment terms\n     * @param  string|null $terms Payment terms\n     * @return self               Payment instance\n     */\n    public function setTerms(?string $terms): self {\n        $this->terms = $terms;\n        return $this;\n    }\n\n\n    /**\n     * Get payment transfers\n     * @return Transfer[] Array of transfers\n     */\n    public function getTransfers(): array {\n        return $this->transfers;\n    }\n\n\n    /**\n     * Add payment transfers\n     * @param  Transfer $transfer Transfer instance\n     * @return self               Payment instance\n     */\n    public function addTransfer(Transfer $transfer): self {\n        $this->transfers[] = $transfer;\n        return $this;\n    }\n\n\n    /**\n     * Remove payment transfer\n     * @param  int  $index Transfer index\n     * @return self        Payment instance\n     * @throws OutOfBoundsException if transfer index is out of bounds\n     */\n    public function removeTransfer(int $index): self {\n        if ($index < 0 || $index >= count($this->transfers)) {\n            throw new OutOfBoundsException('Could not find transfer by index');\n        }\n        array_splice($this->transfers, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all payment transfers\n     * @return self Payment instance\n     */\n    public function clearTransfers(): self {\n        $this->transfers = [];\n        return $this;\n    }\n\n\n    /**\n     * Get payment card\n     * @return Card|null Card instance\n     */\n    public function getCard(): ?Card {\n        return $this->card;\n    }\n\n\n    /**\n     * Set payment card\n     * @param  Card|null $card Card instance\n     * @return self            Payment instance\n     */\n    public function setCard(?Card $card): self {\n        $this->card = $card;\n        return $this;\n    }\n\n\n    /**\n     * Get payment mandate\n     * @return Mandate|null Mandate instance\n     */\n    public function getMandate(): ?Mandate {\n        return $this->mandate;\n    }\n\n\n    /**\n     * Set payment mandate\n     * @param  Mandate|null $mandate Mandate instance\n     * @return self                  Payment instance\n     */\n    public function setMandate(?Mandate $mandate): self {\n        $this->mandate = $mandate;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "Transfer.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Payments;\n\nclass Transfer {\n    protected $accountId = null;\n    protected $accountName = null;\n    protected $provider = null;\n\n    /**\n     * Get receiving account ID\n     * @return string|null Account ID\n     */\n    public function getAccountId(): ?string {\n        return $this->accountId;\n    }\n\n\n    /**\n     * Set receiving account ID\n     * @param  string $accountId Account ID\n     * @return self              Transfer instance\n     */\n    public function setAccountId(string $accountId): self {\n        $this->accountId = $accountId;\n        return $this;\n    }\n\n\n    /**\n     * Get receiving account name\n     * @return string|null Account name\n     */\n    public function getAccountName(): ?string {\n        return $this->accountName;\n    }\n\n\n    /**\n     * Set receiving account name\n     * @param  string|null $accountName Account name\n     * @return self                     Transfer instance\n     */\n    public function setAccountName(?string $accountName): self {\n        $this->accountName = $accountName;\n        return $this;\n    }\n\n\n    /**\n     * Get service provider ID\n     * @return string|null Service provider ID\n     */\n    public function getProvider(): ?string {\n        return $this->provider;\n    }\n\n\n    /**\n     * Set service provider ID\n     * @param  string|null $provider Service provider ID\n     * @return self                  Transfer instance\n     */\n    public function setProvider(?string $provider): self {\n        $this->provider = $provider;\n        return $this;\n    }\n}\n"
                        }
                      }
                    }
                  },
                  "Presets": {
                    "directory": {
                      "AbstractPreset.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\nuse Einvoicing\\Invoice;\n\nabstract class AbstractPreset {\n    /**\n     * Get specification identifier\n     * @return string Specification identifier\n     */\n    abstract public function getSpecification(): string;\n\n\n    /**\n     * Get additional validation rules\n     * @return array<string,callable> Map of rules\n     */\n    public function getRules(): array {\n        return [];\n    }\n\n\n    /**\n     * Setup invoice\n     * @param Invoice $invoice Invoice instance\n     */\n    public function setupInvoice(Invoice $invoice) {\n        $invoice->setRoundingMatrix(['' => 2]);\n    }\n}\n"
                        }
                      },
                      "CiusAtGov.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\n/**\n * CIUS-AT-GOV\n * @author Bundesrechenzentrum (BRZ)\n * @link https://www.erechnung.gv.at/files/en16931/CIUS-AT-GOV-XS-1.1.0.pdf\n */\nclass CiusAtGov extends CiusAtNat {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return parent::getSpecification() . \"#compliant#urn:erechnung.gv.at:CIUS-AT-GOV:1.1.0\";\n    }\n}\n"
                        }
                      },
                      "CiusAtNat.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\n/**\n * CIUS-AT-NAT\n * @author Bundesrechenzentrum (BRZ)\n * @link https://www.erechnung.gv.at/files/en16931/CIUS-AT-NAT-XS-1.0.0.pdf\n */\nclass CiusAtNat extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:erechnung.gv.at:CIUS-ATNAT:1.0.0\";\n    }\n}\n"
                        }
                      },
                      "CiusEsFace.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\n/**\n * CIUS-ES-FACE\n * @author Spanish Government\n * @link https://administracionelectronica.gob.es/ctt/face/descargas\n */\nclass CiusEsFace extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:face.gob.es:CIUS-ES-FACE:1.0.0\";\n    }\n}\n"
                        }
                      },
                      "CiusIt.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\n/**\n * CIUS-IT\n * @author Agenzia delle Entrate (AdE)\n * @link https://www.agenziaentrate.gov.it/portale/documents/20143/296874/Specifiche+Tecniche+Fatturazione+Europea+v1.1_ENG.pdf\n */\nclass CiusIt extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:fatturapa.gov.it:CIUS-IT:1.0.0\";\n    }\n}\n"
                        }
                      },
                      "CiusRo.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\nuse Einvoicing\\Invoice;\n\n// @phan-file-suppress PhanPluginInconsistentReturnFunction\n\n/**\n * CIUS-RO e-Factura\n * @author Ministerul Finanțelor\n * @link https://mfinante.gov.ro/web/efactura/informatii-tehnice\n */\nclass CiusRo extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:efactura.mfinante.ro:CIUS-RO:1.0.1\";\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    public function getRules(): array {\n        $res = [];\n\n        $res['BR-RO-A020'] = static function(Invoice $inv) {\n            if (count($inv->getNotes()) > 20) {\n                return \"The allowed maximum number of occurrences of Invoice note (BG-1) is 20.\";\n            }\n        };\n\n        return $res;\n    }\n}\n"
                        }
                      },
                      "Nlcius.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\n/**\n * NLCIUS\n * @author Standaardisatieplatform e-factureren\n * @link https://stpe.nl/media/E-Factureren%20-%20Gebruiksinstructie%20voor%20de%20basisfactuur%20v1.0.3.pdf\n */\nclass Nlcius extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:fdc:nen.nl:nlcius:v1.0\";\n    }\n}\n"
                        }
                      },
                      "Peppol.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Presets;\n\nuse Einvoicing\\Invoice;\n\n// @phan-file-suppress PhanPluginInconsistentReturnFunction, PhanPossiblyNonClassMethodCall\n\n/**\n * PEPPOL BIS Billing 3.0\n * @author OpenPEPPOL\n * @link https://docs.peppol.eu/poacc/billing/3.0/\n */\nclass Peppol extends AbstractPreset {\n    /**\n     * @inheritdoc\n     */\n    public function getSpecification(): string {\n        return \"urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0\";\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    public function getRules(): array {\n        $res = [];\n\n        $res['PEPPOL-EN16931-R002'] = static function(Invoice $inv) {\n            if (count($inv->getNotes()) > 1) {\n                return \"No more than one note is allowed on document level.\";\n            }\n        };\n        $res['PEPPOL-EN16931-R003'] = static function(Invoice $inv) {\n            if ($inv->getBuyerReference() !== null) return;\n            if ($inv->getPurchaseOrderReference() !== null) return;\n            return \"A buyer reference or purchase order reference MUST be provided.\";\n        };\n        $res['PEPPOL-EN16931-R061'] = static function(Invoice $inv) {\n            if ($inv->getPayment() === null) return;\n            if ($inv->getPayment()->getMandate() === null) return;\n            if ($inv->getPayment()->getMandate()->getReference() === null) {\n                return \"Mandate reference MUST be provided for direct debit\";\n            }\n        };\n        $res['BG-17'] = static function(Invoice $inv) {\n            if ($inv->getPayment() !== null && count($inv->getPayment()->getTransfers()) > 1) {\n                return \"An Invoice shall not have multiple credit transfers\";\n            }\n        };\n\n        return $res;\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    public function setupInvoice(Invoice $invoice) {\n        parent::setupInvoice($invoice);\n        $invoice->setBusinessProcess('urn:fdc:peppol.eu:2017:poacc:billing:01:1.0');\n    }\n}\n"
                        }
                      }
                    }
                  },
                  "Readers": {
                    "directory": {
                      "AbstractReader.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Readers;\n\nuse Einvoicing\\Invoice;\nuse Einvoicing\\Presets\\AbstractPreset;\nuse InvalidArgumentException;\nuse function is_subclass_of;\nuse function scandir;\nuse function str_replace;\n\nabstract class AbstractReader {\n    private static $defaultPresets = null;\n    protected $additionalPresets = [];\n\n    /**\n     * Load default presets\n     */\n    private static function loadDefaultPresets(): void {\n        self::$defaultPresets = [];\n        foreach (scandir(__DIR__ . '/../Presets') as $filename) {\n            $classname = \"\\\\Einvoicing\\\\Presets\\\\\" . str_replace('.php', '', $filename);\n\n            // Is this a valid preset?\n            if (!is_subclass_of($classname, AbstractPreset::class)) {\n                continue;\n            }\n\n            /** @var AbstractPreset */\n            $preset = new $classname();\n            self::$defaultPresets[$preset->getSpecification()] = $classname;\n        }\n    }\n\n\n    /**\n     * Get preset classname from specification\n     * @param  string      $specification Specification identifier\n     * @return string|null                Preset classname or NULL if not found\n     */\n    protected function getPresetFromSpecification(string $specification): ?string {\n        if (self::$defaultPresets === null) {\n            self::loadDefaultPresets();\n        }\n        return $this->additionalPresets[$specification] ?? self::$defaultPresets[$specification] ?? null;\n    }\n\n\n    /**\n     * Register additional preset\n     * @param  string $classname Preset classname\n     * @return self              This instance\n     * @throws InvalidArgumentException if not a valid preset classname\n     */\n    public function registerPreset(string $classname): self {\n        if (!is_subclass_of($classname, AbstractPreset::class)) {\n            throw new InvalidArgumentException(\"Cannot register $classname as an invoice preset\");\n        }\n        /** @var AbstractPreset */\n        $preset = new $classname();\n        $this->additionalPresets[$preset->getSpecification()] = $classname;\n        return $this;\n    }\n\n\n    /**\n     * Import invoice\n     * @param  string  $document Document contents\n     * @return Invoice           Invoice instance\n     */\n    abstract public function import(string $document): Invoice;\n}\n"
                        }
                      },
                      "UblReader.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Readers;\n\nuse DateTime;\nuse Einvoicing\\AllowanceOrCharge;\nuse Einvoicing\\Attachment;\nuse Einvoicing\\Attribute;\nuse Einvoicing\\Delivery;\nuse Einvoicing\\Identifier;\nuse Einvoicing\\Invoice;\nuse Einvoicing\\InvoiceLine;\nuse Einvoicing\\InvoiceReference;\nuse Einvoicing\\Party;\nuse Einvoicing\\Payments\\Card;\nuse Einvoicing\\Payments\\Mandate;\nuse Einvoicing\\Payments\\Payment;\nuse Einvoicing\\Payments\\Transfer;\nuse Einvoicing\\Traits\\VatTrait;\nuse Einvoicing\\Writers\\UblWriter;\nuse InvalidArgumentException;\nuse UXML\\UXML;\nuse function array_filter;\nuse function array_map;\n\nclass UblReader extends AbstractReader {\n    /**\n     * @inheritdoc\n     * @throws InvalidArgumentException if failed to parse XML\n     */\n    public function import(string $document): Invoice {\n        $invoice = new Invoice();\n\n        // Load XML document\n        $xml = UXML::fromString($document);\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-24: Specification identifier\n        $specificationNode = $xml->get(\"{{$cbc}}CustomizationID\");\n        if ($specificationNode !== null) {\n            $specification = $specificationNode->asText();\n            $invoice->setSpecification($specification);\n\n            // Try to create from preset\n            $presetClassname = $this->getPresetFromSpecification($specification);\n            if ($presetClassname !== null) {\n                $invoice = new Invoice($presetClassname);\n            }\n        }\n\n        // Index tax exemption reasons\n        /** @var array<string, array{code: string|null, reason: string|null}> */\n        $taxExemptions = [];\n        foreach ($xml->getAll(\"{{$cac}}TaxTotal/{{$cac}}TaxSubtotal/{{$cac}}TaxCategory\") as $node) {\n            $exemptionReasonCodeNode = $node->get(\"{{$cbc}}TaxExemptionReasonCode\");\n            $exemptionReasonNode = $node->get(\"{{$cbc}}TaxExemptionReason\");\n            if ($exemptionReasonCodeNode === null && $exemptionReasonNode === null) continue;\n\n            // Get tax subtotal key\n            $categoryNode = $node->get(\"{{$cbc}}ID\");\n            if ($categoryNode === null) {\n                throw new InvalidArgumentException('Missing <cbc:ID /> node from tax item');\n            }\n            $rateNode = $node->get(\"{{$cbc}}Percent\");\n            $rateKey = ($rateNode === null) ? '' : floatval($rateNode->asText());\n            $key = \"{$categoryNode->asText()}:{$rateKey}\";\n\n            // Save reasons\n            $taxExemptions[$key] = [\n                \"code\" => ($exemptionReasonCodeNode === null) ? null : $exemptionReasonCodeNode->asText(),\n                \"reason\" => ($exemptionReasonNode === null) ? null : $exemptionReasonNode->asText(),\n            ];\n        }\n\n        // BT-23: Business process type\n        $businessProcessNode = $xml->get(\"{{$cbc}}ProfileID\");\n        if ($businessProcessNode !== null) {\n            $invoice->setBusinessProcess($businessProcessNode->asText());\n        }\n\n        // BT-1: Invoice number\n        $numberNode = $xml->get(\"{{$cbc}}ID\");\n        if ($numberNode !== null) {\n            $invoice->setNumber($numberNode->asText());\n        }\n\n        // BT-2: Issue date\n        $issueDateNode = $xml->get(\"{{$cbc}}IssueDate\");\n        if ($issueDateNode !== null) {\n            $invoice->setIssueDate(new DateTime($issueDateNode->asText()));\n        }\n\n        // BT-9: Due date\n        $dueDateNode = $xml->get(\"{{$cbc}}DueDate | {{$cac}}PaymentMeans/{{$cbc}}PaymentDueDate\");\n        if ($dueDateNode !== null) {\n            $invoice->setDueDate(new DateTime($dueDateNode->asText()));\n        }\n\n        // BT-3: Invoice type code\n        $typeNode = $xml->get(\"{{$cbc}}InvoiceTypeCode | {{$cbc}}CreditNoteTypeCode\");\n        if ($typeNode !== null) {\n            $invoice->setType((int) $typeNode->asText());\n        }\n\n        // BT-22: Notes\n        foreach ($xml->getAll(\"{{$cbc}}Note\") as $noteNode) {\n            $invoice->addNote($noteNode->asText());\n        }\n\n        // BT-7: Tax point date\n        $taxPointDateNode = $xml->get(\"{{$cbc}}TaxPointDate\");\n        if ($taxPointDateNode !== null) {\n            $invoice->setTaxPointDate(new DateTime($taxPointDateNode->asText()));\n        }\n\n        // BT-5: Invoice currency code\n        $currencyNode = $xml->get(\"{{$cbc}}DocumentCurrencyCode\");\n        if ($currencyNode !== null) {\n            $invoice->setCurrency($currencyNode->asText());\n        }\n\n        // BT-6: VAT accounting currency code\n        $vatCurrencyNode = $xml->get(\"{{$cbc}}TaxCurrencyCode\");\n        if ($vatCurrencyNode !== null) {\n            $invoice->setVatCurrency($vatCurrencyNode->asText());\n        }\n\n        // BT-19: Buyer accounting reference\n        $buyerAccountingReferenceNode = $xml->get(\"{{$cbc}}AccountingCost\");\n        if ($buyerAccountingReferenceNode !== null) {\n            $invoice->setBuyerAccountingReference($buyerAccountingReferenceNode->asText());\n        }\n\n        // BT-10: Buyer reference\n        $buyerReferenceNode = $xml->get(\"{{$cbc}}BuyerReference\");\n        if ($buyerReferenceNode !== null) {\n            $invoice->setBuyerReference($buyerReferenceNode->asText());\n        }\n\n        // BG-14: Invoice period\n        $this->parsePeriodFields($xml, $invoice);\n\n        // BT-13: Purchase order reference\n        $purchaseOrderReferenceNode = $xml->get(\"{{$cac}}OrderReference/{{$cbc}}ID\");\n        if ($purchaseOrderReferenceNode !== null) {\n            $invoice->setPurchaseOrderReference($purchaseOrderReferenceNode->asText());\n        }\n\n        // BT-14: Sales order reference\n        $salesOrderReferenceNode = $xml->get(\"{{$cac}}OrderReference/{{$cbc}}SalesOrderID\");\n        if ($salesOrderReferenceNode !== null) {\n            $invoice->setSalesOrderReference($salesOrderReferenceNode->asText());\n        }\n\n        // BG-3: Preceding invoice references\n        foreach ($xml->getAll(\"{{$cac}}BillingReference/{{$cac}}InvoiceDocumentReference\") as $node) {\n            $invoiceReferenceValueNode = $node->get(\"{{$cbc}}ID\");\n            if ($invoiceReferenceValueNode === null) {\n                continue;\n            }\n            $invoiceReference = new InvoiceReference($invoiceReferenceValueNode->asText());\n            $invoiceReferenceIssueDateNode = $node->get(\"{{$cbc}}IssueDate\");\n            if ($invoiceReferenceIssueDateNode !== null) {\n                $invoiceReference->setIssueDate(new DateTime($invoiceReferenceIssueDateNode->asText()));\n            }\n            $invoice->addPrecedingInvoiceReference($invoiceReference);\n        }\n\n        // BT-17: Tender or lot reference\n        $tenderOrLotReferenceNode = $xml->get(\"{{$cac}}OriginatorDocumentReference/{{$cbc}}ID\");\n        if ($tenderOrLotReferenceNode !== null) {\n            $invoice->setTenderOrLotReference($tenderOrLotReferenceNode->asText());\n        }\n\n        // BT-12: Contract reference\n        $contractReferenceNode = $xml->get(\"{{$cac}}ContractDocumentReference/{{$cbc}}ID\");\n        if ($contractReferenceNode !== null) {\n            $invoice->setContractReference($contractReferenceNode->asText());\n        }\n\n        // BG-24: Attachment nodes\n        foreach ($xml->getAll(\"{{$cac}}AdditionalDocumentReference\") as $node) {\n            $invoice->addAttachment($this->parseAttachmentNode($node));\n        }\n\n        // Seller node\n        $sellerNode = $xml->get(\"{{$cac}}AccountingSupplierParty/{{$cac}}Party\");\n        if ($sellerNode !== null) {\n            $invoice->setSeller($this->parseSellerOrBuyerNode($sellerNode));\n        }\n\n        // Buyer node\n        $buyerNode = $xml->get(\"{{$cac}}AccountingCustomerParty/{{$cac}}Party\");\n        if ($buyerNode !== null) {\n            $invoice->setBuyer($this->parseSellerOrBuyerNode($buyerNode));\n        }\n\n        // Payee node\n        $payeeNode = $xml->get(\"{{$cac}}PayeeParty\");\n        if ($payeeNode !== null) {\n            $invoice->setPayee($this->parsePayeeNode($payeeNode));\n        }\n\n        // Delivery node\n        $deliveryNode = $xml->get(\"{{$cac}}Delivery\");\n        if ($deliveryNode !== null) {\n            $invoice->setDelivery($this->parseDeliveryNode($deliveryNode));\n        }\n\n        // Payment nodes\n        $payment = $this->parsePaymentNodes($xml);\n        $invoice->setPayment($payment);\n\n        // Allowances and charges\n        foreach ($xml->getAll(\"{{$cac}}AllowanceCharge\") as $node) {\n            $this->addAllowanceOrCharge($invoice, $node, $taxExemptions);\n        }\n\n        // BT-111: Total VAT amount in accounting currency\n        foreach ($xml->getAll(\"{{$cac}}TaxTotal\") as $taxTotalNode) {\n            if ($taxTotalNode->get(\"{{$cac}}TaxSubtotal\") !== null) {\n                // The other tax total node, then\n                continue;\n            }\n            $taxAmountNode = $taxTotalNode->get(\"{{$cbc}}TaxAmount\");\n            if ($taxAmountNode !== null) {\n                $invoice->setCustomVatAmount((float) $taxAmountNode->asText());\n            }\n        }\n\n        // BT-113: Paid amount\n        $paidAmountNode = $xml->get(\"{{$cac}}LegalMonetaryTotal/{{$cbc}}PrepaidAmount\");\n        if ($paidAmountNode !== null) {\n            $invoice->setPaidAmount((float) $paidAmountNode->asText());\n        }\n\n        // BT-114: Rounding amount\n        $roundingAmountNode = $xml->get(\"{{$cac}}LegalMonetaryTotal/{{$cbc}}PayableRoundingAmount\");\n        if ($roundingAmountNode !== null) {\n            $invoice->setRoundingAmount((float) $roundingAmountNode->asText());\n        }\n\n        // Invoice lines\n        foreach ($xml->getAll(\"{{$cac}}InvoiceLine | {{$cac}}CreditNoteLine\") as $node) {\n            $invoice->addLine($this->parseInvoiceLine($node, $taxExemptions));\n        }\n\n        return $invoice;\n    }\n\n\n    /**\n     * Parse identifier node\n     * @param  UXML       $xml        XML node\n     * @param  string     $schemeAttr Scheme attribute name\n     * @return Identifier             Identifier instance\n     */\n    private function parseIdentifierNode(UXML $xml, string $schemeAttr=\"schemeID\"): Identifier {\n        $value = $xml->asText();\n        $scheme = $xml->element()->hasAttribute($schemeAttr) ? $xml->element()->getAttribute($schemeAttr) : null;\n        return new Identifier($value, $scheme);\n    }\n\n\n    /**\n     * Parse period fields\n     * @param UXML                $xml    XML node\n     * @param Invoice|InvoiceLine $target Destination instance\n     */\n    private function parsePeriodFields(UXML $xml, $target) {\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Period start date\n        $startDateNode = $xml->get(\"{{$cac}}InvoicePeriod/{{$cbc}}StartDate\");\n        if ($startDateNode !== null) {\n            $target->setPeriodStartDate(new DateTime($startDateNode->asText()));\n        }\n\n        // Period end date\n        $endDateNode = $xml->get(\"{{$cac}}InvoicePeriod/{{$cbc}}EndDate\");\n        if ($endDateNode !== null) {\n            $target->setPeriodEndDate(new DateTime($endDateNode->asText()));\n        }\n    }\n\n\n    /**\n     * Parse postal address fields\n     * @param UXML           $xml    XML node\n     * @param Delivery|Party $target Destination instance\n     */\n    private function parsePostalAddressFields(UXML $xml, $target) {\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Postal address\n        $addressNodes = array_filter([\n            $xml->get(\"{{$cbc}}StreetName\"),\n            $xml->get(\"{{$cbc}}AdditionalStreetName\"),\n            $xml->get(\"{{$cac}}AddressLine/{{$cbc}}Line\")\n        ]);\n        $addressLines = array_map(function($node) {\n            return $node->asText();\n        }, $addressNodes);\n        // @phan-suppress-next-line PhanThrowTypeAbsentForCall\n        $target->setAddress($addressLines);\n\n        // City name\n        $cityNode = $xml->get(\"{{$cbc}}CityName\");\n        if ($cityNode !== null) {\n            $target->setCity($cityNode->asText());\n        }\n\n        // Postal code\n        $postalCodeNode = $xml->get(\"{{$cbc}}PostalZone\");\n        if ($postalCodeNode !== null) {\n            $target->setPostalCode($postalCodeNode->asText());\n        }\n\n        // Subdivision\n        $subdivisionNode = $xml->get(\"{{$cbc}}CountrySubentity\");\n        if ($subdivisionNode !== null) {\n            $target->setSubdivision($subdivisionNode->asText());\n        }\n\n        // Country\n        $countryNode = $xml->get(\"{{$cac}}Country/{{$cbc}}IdentificationCode\");\n        if ($countryNode !== null) {\n            $target->setCountry($countryNode->asText());\n        }\n    }\n\n\n    /**\n     * Parse seller or buyer node\n     * @param  UXML  $xml XML node\n     * @return Party      Party instance\n     */\n    private function parseSellerOrBuyerNode(UXML $xml): Party {\n        $party = new Party();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Electronic address\n        $electronicAddressNode = $xml->get(\"{{$cbc}}EndpointID\");\n        if ($electronicAddressNode !== null) {\n            $party->setElectronicAddress($this->parseIdentifierNode($electronicAddressNode));\n        }\n\n        // Additional identifiers\n        foreach ($xml->getAll(\"{{$cac}}PartyIdentification/{{$cbc}}ID\") as $identifierNode) {\n            $party->addIdentifier($this->parseIdentifierNode($identifierNode));\n        }\n\n        // Trading name\n        $tradingNameNode = $xml->get(\"{{$cac}}PartyName/{{$cbc}}Name\");\n        if ($tradingNameNode !== null) {\n            $party->setTradingName($tradingNameNode->asText());\n        }\n\n        // Postal address\n        $addressNode = $xml->get(\"{{$cac}}PostalAddress\");\n        if ($addressNode !== null) {\n            $this->parsePostalAddressFields($addressNode, $party);\n        }\n\n        // VAT number and tax registration identifier\n        foreach ($xml->getAll(\"{{$cac}}PartyTaxScheme\") as $taxNode) {\n            $companyIdNode = $taxNode->get(\"{{$cbc}}CompanyID\");\n            if ($companyIdNode === null) continue;\n            $companyId = $companyIdNode->asText();\n\n            $taxSchemeNode = $taxNode->get(\"{{$cac}}TaxScheme/{{$cbc}}ID\");\n            $taxScheme = ($taxSchemeNode === null) ? null : $taxSchemeNode->asText();\n\n            if ($taxScheme === \"VAT\") {\n                $party->setVatNumber($companyId);\n            } else {\n                $party->setTaxRegistrationId(new Identifier($companyId, $taxScheme));\n            }\n        }\n\n        // Legal name\n        $legalNameNode = $xml->get(\"{{$cac}}PartyLegalEntity/{{$cbc}}RegistrationName\");\n        if ($legalNameNode !== null) {\n            $party->setName($legalNameNode->asText());\n        }\n\n        // Company ID\n        $companyIdNode = $xml->get(\"{{$cac}}PartyLegalEntity/{{$cbc}}CompanyID\");\n        if ($companyIdNode !== null) {\n            $party->setCompanyId($this->parseIdentifierNode($companyIdNode));\n        }\n\n        // BT-33: Seller additional legal information\n        $companyLegalFormNode = $xml->get(\"{{$cac}}PartyLegalEntity/{{$cbc}}CompanyLegalForm\");\n        if ($companyLegalFormNode !== null) {\n            $party->setLegalInformation($companyLegalFormNode->asText());\n        }\n\n        // Contact name\n        $contactNameNode = $xml->get(\"{{$cac}}Contact/{{$cbc}}Name\");\n        if ($contactNameNode !== null) {\n            $party->setContactName($contactNameNode->asText());\n        }\n\n        // Contact phone\n        $contactPhoneNode = $xml->get(\"{{$cac}}Contact/{{$cbc}}Telephone\");\n        if ($contactPhoneNode !== null) {\n            $party->setContactPhone($contactPhoneNode->asText());\n        }\n\n        // Contact email\n        $contactEmailNode = $xml->get(\"{{$cac}}Contact/{{$cbc}}ElectronicMail\");\n        if ($contactEmailNode !== null) {\n            $party->setContactEmail($contactEmailNode->asText());\n        }\n\n        return $party;\n    }\n\n\n    /**\n     * Parse payee node\n     * @param  UXML  $xml XML node\n     * @return Party      Party instance\n     */\n    private function parsePayeeNode(UXML $xml): Party {\n        $party = new Party();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Additional identifiers\n        foreach ($xml->getAll(\"{{$cac}}PartyIdentification/{{$cbc}}ID\") as $identifierNode) {\n            $party->addIdentifier($this->parseIdentifierNode($identifierNode));\n        }\n\n        // Party name\n        $nameNode = $xml->get(\"{{$cac}}PartyName/{{$cbc}}Name\");\n        if ($nameNode !== null) {\n            $party->setName($nameNode->asText());\n        }\n\n        // Company ID\n        $companyIdNode = $xml->get(\"{{$cac}}PartyLegalEntity/{{$cbc}}CompanyID\");\n        if ($companyIdNode !== null) {\n            $party->setCompanyId($this->parseIdentifierNode($companyIdNode));\n        }\n\n        return $party;\n    }\n\n\n    /**\n     * Parse delivery node\n     * @param  UXML     $xml XML node\n     * @return Delivery      Delivery instance\n     */\n    private function parseDeliveryNode(UXML $xml): Delivery {\n        $delivery = new Delivery();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-72: Actual delivery date\n        $dateNode = $xml->get(\"{{$cbc}}ActualDeliveryDate\");\n        if ($dateNode !== null) {\n            $delivery->setDate(new DateTime($dateNode->asText()));\n        }\n\n        // BT-71: Delivery location identifier\n        $locationIdentifierNode = $xml->get(\"{{$cac}}DeliveryLocation/{{$cbc}}ID\");\n        if ($locationIdentifierNode !== null) {\n            $delivery->setLocationIdentifier($this->parseIdentifierNode($locationIdentifierNode));\n        }\n\n        // Delivery postal address\n        $addressNode = $xml->get(\"{{$cac}}DeliveryLocation/{{$cac}}Address\");\n        if ($addressNode !== null) {\n            $this->parsePostalAddressFields($addressNode, $delivery);\n        }\n\n        // BT-70: Deliver name\n        $nameNode = $xml->get(\"{{$cac}}DeliveryParty/{{$cac}}PartyName/{{$cbc}}Name\");\n        if ($nameNode !== null) {\n            $delivery->setName($nameNode->asText());\n        }\n\n        return $delivery;\n    }\n\n\n    /**\n     * Parse payment nodes\n     * @param  UXML         $xml XML node\n     * @return Payment|null      Payment instance or NULL if not found\n     */\n    private function parsePaymentNodes(UXML $xml): ?Payment {\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Get root nodes\n        $meansNode = $xml->get(\"{{$cac}}PaymentMeans\");\n        $termsNode = $xml->get(\"{{$cac}}PaymentTerms/{{$cbc}}Note\");\n        if ($meansNode === null && $termsNode === null) return null;\n\n        $payment = new Payment();\n\n        // BT-81: Payment means code\n        // BT-82: Payment means name\n        $meansCodeNode = $xml->get(\"{{$cac}}PaymentMeans/{{$cbc}}PaymentMeansCode\");\n        if ($meansCodeNode !== null) {\n            $payment->setMeansCode($meansCodeNode->asText());\n            if ($meansCodeNode->element()->hasAttribute('name')) {\n                $payment->setMeansText($meansCodeNode->element()->getAttribute('name'));\n            }\n        }\n\n        // BT-83: Payment ID\n        $paymentIdNode = $xml->get(\"{{$cac}}PaymentMeans/{{$cbc}}PaymentID\");\n        if ($paymentIdNode !== null) {\n            $payment->setId($paymentIdNode->asText());\n        }\n\n        // BG-18: Payment card\n        $cardNode = $xml->get(\"{{$cac}}PaymentMeans/{{$cac}}CardAccount\");\n        if ($cardNode !== null) {\n            $payment->setCard($this->parsePaymentCardNode($cardNode));\n        }\n\n        // BG-17: Payment transfers\n        $transferNodes = $xml->getAll(\"{{$cac}}PaymentMeans/{{$cac}}PayeeFinancialAccount\");\n        foreach ($transferNodes as $transferNode) {\n            $payment->addTransfer($this->parsePaymentTransferNode($transferNode));\n        }\n\n        // BG-19: Payment mandate\n        $mandateNode = $xml->get(\"{{$cac}}PaymentMeans/{{$cac}}PaymentMandate\");\n        if ($mandateNode !== null) {\n            $payment->setMandate($this->parsePaymentMandateNode($mandateNode));\n        }\n\n        // BT-20: Payment terms\n        if ($termsNode !== null) {\n            $payment->setTerms($termsNode->asText());\n        }\n\n        return $payment;\n    }\n\n\n    /**\n     * Parse payment card node\n     * @param  UXML $xml Payment card node\n     * @return Card      Card instance\n     */\n    private function parsePaymentCardNode(UXML $xml): Card {\n        $card = new Card();\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-87: Card PAN\n        $panNode = $xml->get(\"{{$cbc}}PrimaryAccountNumberID\");\n        if ($panNode !== null) {\n            $card->setPan($panNode->asText());\n        }\n\n        // Card network\n        $networkNode = $xml->get(\"{{$cbc}}NetworkID\");\n        if ($networkNode !== null) {\n            $card->setNetwork($networkNode->asText());\n        }\n\n        // BT-88: Holder name\n        $holderNode = $xml->get(\"{{$cbc}}HolderName\");\n        if ($holderNode !== null) {\n            $card->setHolder($holderNode->asText());\n        }\n\n        return $card;\n    }\n\n\n    /**\n     * Parse payment transfer node\n     * @param  UXML     $xml Payment transfer node\n     * @return Transfer      Transfer instance\n     */\n    private function parsePaymentTransferNode(UXML $xml): Transfer {\n        $transfer = new Transfer();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-84: Receiving account ID\n        $accountIdNode = $xml->get(\"{{$cbc}}ID\");\n        if ($accountIdNode !== null) {\n            $transfer->setAccountId($accountIdNode->asText());\n        }\n\n        // BT-85: Receiving account name\n        $accountNameNode = $xml->get(\"{{$cbc}}Name\");\n        if ($accountNameNode !== null) {\n            $transfer->setAccountName($accountNameNode->asText());\n        }\n\n        // BT-86: Service provider ID\n        $providerNode = $xml->get(\"{{$cac}}FinancialInstitutionBranch/{{$cbc}}ID\");\n        if ($providerNode !== null) {\n            $transfer->setProvider($providerNode->asText());\n        }\n\n        return $transfer;\n    }\n\n\n    /**\n     * Parse payment mandate node\n     * @param  UXML    $xml Payment mandate node\n     * @return Mandate      Mandate instance\n     */\n    private function parsePaymentMandateNode(UXML $xml): Mandate {\n        $mandate = new Mandate();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-89: Mandate reference\n        $referenceNode = $xml->get(\"{{$cbc}}ID\");\n        if ($referenceNode !== null) {\n            $mandate->setReference($referenceNode->asText());\n        }\n\n        // BT-91: Debited account\n        $accountNode = $xml->get(\"{{$cac}}PayerFinancialAccount/{{$cbc}}ID\");\n        if ($accountNode !== null) {\n            $mandate->setAccount($accountNode->asText());\n        }\n\n        return $mandate;\n    }\n\n\n    /**\n     * Set VAT attributes\n     * @param VatTrait $target         Target instance\n     * @param UXML     $xml            XML node\n     * @param array    &$taxExemptions Tax exemption reasons\n     */\n    private function setVatAttributes($target, UXML $xml, array $taxExemptions) {\n        $cbc = UblWriter::NS_CBC;\n\n        // Tax category\n        $taxCategoryNode = $xml->get(\"{{$cbc}}ID\");\n        if ($taxCategoryNode !== null) {\n            $target->setVatCategory($taxCategoryNode->asText());\n        }\n\n        // Tax rate\n        $taxRateNode = $xml->get(\"{{$cbc}}Percent\");\n        if ($taxRateNode !== null) {\n            $target->setVatRate((float) $taxRateNode->asText());\n        }\n\n        // Tax exemption reasons\n        $rateKey = $target->getVatRate() ?? '';\n        $key = \"{$target->getVatCategory()}:{$rateKey}\";\n        $target->setVatExemptionReasonCode($taxExemptions[$key]['code'] ?? null);\n        $target->setVatExemptionReason($taxExemptions[$key]['reason'] ?? null);\n    }\n\n\n    /**\n     * Add allowance or charge\n     * @param Invoice|InvoiceLine $target         Target instance\n     * @param UXML                $xml            XML node\n     * @param array               &$taxExemptions Tax exemption reasons\n     */\n    private function addAllowanceOrCharge($target, UXML $xml, array &$taxExemptions) {\n        $allowanceOrCharge = new AllowanceOrCharge();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // Add instance to invoice\n        $chargeIndicatorNode = $xml->get(\"{{$cbc}}ChargeIndicator\");\n        if ($chargeIndicatorNode !== null && $chargeIndicatorNode->asText() === \"true\") {\n            $target->addCharge($allowanceOrCharge);\n        } else {\n            $target->addAllowance($allowanceOrCharge);\n        }\n\n        // Reason code\n        $reasonCodeNode = $xml->get(\"{{$cbc}}AllowanceChargeReasonCode\");\n        if ($reasonCodeNode !== null) {\n            $allowanceOrCharge->setReasonCode($reasonCodeNode->asText());\n        }\n\n        // Reason text\n        $reasonTextNode = $xml->get(\"{{$cbc}}AllowanceChargeReason\");\n        if ($reasonTextNode !== null) {\n            $allowanceOrCharge->setReason($reasonTextNode->asText());\n        }\n\n        // Amount\n        $factorNode = $xml->get(\"{{$cbc}}MultiplierFactorNumeric\");\n        $amountNode = $xml->get(\"{{$cbc}}Amount\");\n        if ($factorNode !== null) {\n            $percent = (float) $factorNode->asText();\n            $allowanceOrCharge->markAsPercentage()->setAmount($percent);\n        } elseif ($amountNode !== null) {\n            $amount = (float) $amountNode->asText();\n            $allowanceOrCharge->setAmount($amount);\n        } else {\n            throw new InvalidArgumentException('Missing both <cbc:Amount /> and <cbc:MultiplierFactorNumeric />' .\n                ' nodes from allowance/charge');\n        }\n\n        // VAT attributes\n        $vatNode = $xml->get(\"{{$cac}}TaxCategory\");\n        if ($vatNode !== null) {\n            $this->setVatAttributes($allowanceOrCharge, $vatNode, $taxExemptions);\n        }\n    }\n\n\n    /**\n     * Parse invoice line\n     * @param  UXML        $xml            XML node\n     * @param  array       &$taxExemptions Tax exemption reasons\n     * @return InvoiceLine                 Invoice line instance\n     */\n    private function parseInvoiceLine(UXML $xml, array &$taxExemptions): InvoiceLine {\n        $line = new InvoiceLine();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-126: Invoice line identifier\n        $lineId = $xml->get(\"{{$cbc}}ID\");\n        if ($lineId !== null) {\n            $line->setId($lineId->asText());\n        }\n\n        // BT-127: Invoice line note\n        $noteNode = $xml->get(\"{{$cbc}}Note\");\n        if ($noteNode !== null) {\n            $line->setNote($noteNode->asText());\n        }\n\n        // Quantity\n        $quantityNode = $xml->get(\"{{$cbc}}InvoicedQuantity | {{$cbc}}CreditedQuantity\");\n        if ($quantityNode !== null) {\n            $line->setQuantity((float) $quantityNode->asText());\n            $line->setUnit($quantityNode->element()->getAttribute('unitCode'));\n        }\n\n        // BT-133: Buyer accounting reference\n        $buyerAccountingReferenceNode = $xml->get(\"{{$cbc}}AccountingCost\");\n        if ($buyerAccountingReferenceNode !== null) {\n            $line->setBuyerAccountingReference($buyerAccountingReferenceNode->asText());\n        }\n\n        // BG-26: Invoice line period\n        $this->parsePeriodFields($xml, $line);\n\n        // BT-132: Order line reference\n        $orderLineReferenceNode = $xml->get(\"{{$cac}}OrderLineReference/{{$cbc}}LineID\");\n        if ($orderLineReferenceNode !== null) {\n            $line->setOrderLineReference($orderLineReferenceNode->asText());\n        }\n\n        // Allowances and charges\n        foreach ($xml->getAll(\"{{$cac}}AllowanceCharge\") as $node) {\n            $this->addAllowanceOrCharge($line, $node, $taxExemptions);\n        }\n\n        // BT-154: Item description\n        $descriptionNode = $xml->get(\"{{$cac}}Item/{{$cbc}}Description\");\n        if ($descriptionNode !== null) {\n            $line->setDescription($descriptionNode->asText());\n        }\n\n        // BT-153: Item name\n        $nameNode = $xml->get(\"{{$cac}}Item/{{$cbc}}Name\");\n        if ($nameNode !== null) {\n            $line->setName($nameNode->asText());\n        }\n\n        // BT-156: Buyer identifier\n        $buyerIdentifierNode = $xml->get(\"{{$cac}}Item/{{$cac}}BuyersItemIdentification/{{$cbc}}ID\");\n        if ($buyerIdentifierNode !== null) {\n            $line->setBuyerIdentifier($buyerIdentifierNode->asText());\n        }\n\n        // BT-155: Seller identifier\n        $sellerIdentifierNode = $xml->get(\"{{$cac}}Item/{{$cac}}SellersItemIdentification/{{$cbc}}ID\");\n        if ($sellerIdentifierNode !== null) {\n            $line->setSellerIdentifier($sellerIdentifierNode->asText());\n        }\n\n        // BT-157: Standard identifier\n        $standardIdentifierNode = $xml->get(\"{{$cac}}Item/{{$cac}}StandardItemIdentification/{{$cbc}}ID\");\n        if ($standardIdentifierNode !== null) {\n            $line->setStandardIdentifier($this->parseIdentifierNode($standardIdentifierNode));\n        }\n\n        // BT-159: Item origin country\n        $originCountryNode = $xml->get(\"{{$cac}}Item/{{$cac}}OriginCountry/{{$cbc}}IdentificationCode\");\n        if ($originCountryNode !== null) {\n            $line->setOriginCountry($originCountryNode->asText());\n        }\n\n        // BT-158: Item classification identifiers\n        $classNodes = $xml->getAll(\"{{$cac}}Item/{{$cac}}CommodityClassification/{{$cbc}}ItemClassificationCode\");\n        foreach ($classNodes as $classNode) {\n            $line->addClassificationIdentifier($this->parseIdentifierNode($classNode, 'listID'));\n        }\n\n        // Price amount\n        $priceNode = $xml->get(\"{{$cac}}Price/{{$cbc}}PriceAmount\");\n        if ($priceNode !== null) {\n            $line->setPrice((float) $priceNode->asText());\n        }\n\n        // Base quantity\n        $baseQuantityNode = $xml->get(\"{{$cac}}Price/{{$cbc}}BaseQuantity\");\n        if ($baseQuantityNode !== null) {\n            $line->setBaseQuantity((float) $baseQuantityNode->asText());\n        }\n\n        // VAT attributes\n        $vatNode = $xml->get(\"{{$cac}}Item/{{$cac}}ClassifiedTaxCategory\");\n        if ($vatNode !== null) {\n            $this->setVatAttributes($line, $vatNode, $taxExemptions);\n        }\n\n        // BG-32: Item attributes\n        $attributeNodes = $xml->getAll(\"{{$cac}}Item/{{$cac}}AdditionalItemProperty\");\n        foreach ($attributeNodes as $attributeNode) {\n            $attributeNameNode = $attributeNode->get(\"{{$cbc}}Name\");\n            $attributeValueNode = $attributeNode->get(\"{{$cbc}}Value\");\n            if ($attributeNameNode !== null && $attributeValueNode !== null) {\n                $line->addAttribute(new Attribute($attributeNameNode->asText(), $attributeValueNode->asText()));\n            }\n        }\n\n        return $line;\n    }\n\n    /**\n     * Parse attachment node\n     * @param  UXML       $xml XML node\n     * @return Attachment      Attachment instance\n     */\n    private function parseAttachmentNode(UXML $xml): Attachment {\n        $attachment = new Attachment();\n        $cac = UblWriter::NS_CAC;\n        $cbc = UblWriter::NS_CBC;\n\n        // BT-122: Supporting document reference\n        $identifierNode = $xml->get(\"{{$cbc}}ID\");\n        if ($identifierNode !== null) {\n            $attachment->setId($this->parseIdentifierNode($identifierNode));\n        }\n\n        // BT-123: Supporting document description\n        $descriptionNode = $xml->get(\"{{$cbc}}DocumentDescription\");\n        if ($descriptionNode !== null) {\n            $attachment->setDescription($descriptionNode->asText());\n        }\n\n        // BT-125: Attached document\n        $embeddedDocumentNode = $xml->get(\"{{$cac}}Attachment/{{$cbc}}EmbeddedDocumentBinaryObject\");\n        if ($embeddedDocumentNode !== null) {\n            $embeddedDocumentElement = $embeddedDocumentNode->element();\n            // @phan-suppress-next-line PhanPossiblyFalseTypeArgument\n            $attachment->setContents(base64_decode($embeddedDocumentNode->asText()));\n            if ($embeddedDocumentElement->hasAttribute('mimeCode')) {\n                $attachment->setMimeCode($embeddedDocumentElement->getAttribute('mimeCode'));\n            }\n            if ($embeddedDocumentElement->hasAttribute('filename')) {\n                $attachment->setFilename($embeddedDocumentElement->getAttribute('filename'));\n            }\n        }\n\n        // BT-124: External document location\n        $externalDocumentNode = $xml->get(\"{{$cac}}Attachment/{{$cac}}ExternalReference/{{$cbc}}URI\");\n        if ($externalDocumentNode !== null) {\n            $attachment->setExternalUrl($externalDocumentNode->asText());\n        }\n\n        return $attachment;\n    }\n}\n"
                        }
                      }
                    }
                  },
                  "Traits": {
                    "directory": {
                      "AllowanceOrChargeTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\AllowanceOrCharge;\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\n\ntrait AllowanceOrChargeTrait {\n    protected $allowances = [];\n    protected $charges = [];\n\n    /**\n     * Get allowances\n     * @return AllowanceOrCharge[] Array of allowances\n     */\n    public function getAllowances(): array {\n        return $this->allowances;\n    }\n\n\n    /**\n     * Add allowance\n     * @param  AllowanceOrCharge $allowance Allowance instance\n     * @return self                         This instance\n     */\n    public function addAllowance(AllowanceOrCharge $allowance): self {\n        $this->allowances[] = $allowance;\n        return $this;\n    }\n\n\n    /**\n     * Remove allowance\n     * @param  int  $index Allowance index\n     * @return self        This instance\n     * @throws OutOfBoundsException if allowance index is out of bounds\n     */\n    public function removeAllowance(int $index): self {\n        if ($index < 0 || $index >= count($this->allowances)) {\n            throw new OutOfBoundsException('Could not find allowance by index');\n        }\n        array_splice($this->allowances, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all allowances\n     * @return self This instance\n     */\n    public function clearAllowances(): self {\n        $this->allowances = [];\n        return $this;\n    }\n\n\n    /**\n     * Get charges\n     * @return AllowanceOrCharge[] Array of charges\n     */\n    public function getCharges(): array {\n        return $this->charges;\n    }\n\n\n    /**\n     * Add charge\n     * @param  AllowanceOrCharge $charge Charge instance\n     * @return self                      This instance\n     */\n    public function addCharge(AllowanceOrCharge $charge): self {\n        $this->charges[] = $charge;\n        return $this;\n    }\n\n\n    /**\n     * Remove charge\n     * @param  int  $index Charge index\n     * @return self        This instance\n     * @throws OutOfBoundsException if charge index is out of bounds\n     */\n    public function removeCharge(int $index): self {\n        if ($index < 0 || $index >= count($this->charges)) {\n            throw new OutOfBoundsException('Could not find charge by index');\n        }\n        array_splice($this->charges, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all charges\n     * @return self This instance\n     */\n    public function clearCharges(): self {\n        $this->charges = [];\n        return $this;\n    }\n}\n"
                        }
                      },
                      "AttachmentsTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\Attachment;\nuse OutOfBoundsException;\n\ntrait AttachmentsTrait {\n    protected $attachments = [];\n\n    /**\n     * Get attachments\n     * @return Attachment[] Array of attachments\n     */\n    public function getAttachments(): array {\n        return $this->attachments;\n    }\n\n\n    /**\n     * Add attachment\n     * @param  Attachment $attachment Attachment\n     * @return self                   This instance\n     */\n    public function addAttachment(Attachment $attachment): self {\n        $this->attachments[] = $attachment;\n        return $this;\n    }\n\n\n    /**\n     * Remove attachment\n     * @param  int  $index Attachment index\n     * @return self        This instance\n     * @throws OutOfBoundsException if attachment index is out of bounds\n     */\n    public function removeAttachment(int $index): self {\n        if ($index < 0 || $index >= count($this->attachments)) {\n            throw new OutOfBoundsException('Could not find attachment by index');\n        }\n        array_splice($this->attachments, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all attachments\n     * @return self This instance\n     */\n    public function clearAttachments(): self {\n        $this->attachments = [];\n        return $this;\n    }\n}\n"
                        }
                      },
                      "AttributesTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\Attribute;\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\n\ntrait AttributesTrait {\n    protected $attributes = [];\n\n    /**\n     * Get attributes\n     * @return Attribute[] Array of attributes\n     */\n    public function getAttributes(): array {\n        return $this->attributes;\n    }\n\n\n    /**\n     * Add attribute\n     * @param  Attribute $attribute Attribute instance\n     * @return self                 This instance\n     */\n    public function addAttribute(Attribute $attribute): self {\n        $this->attributes[] = $attribute;\n        return $this;\n    }\n\n\n    /**\n     * Remove attribute\n     * @param  int  $index Attribute index\n     * @return self        This instance\n     * @throws OutOfBoundsException if attribute index is out of bounds\n     */\n    public function removeAttribute(int $index): self {\n        if ($index < 0 || $index >= count($this->attributes)) {\n            throw new OutOfBoundsException('Could not find attribute by index');\n        }\n        array_splice($this->attributes, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all attributes\n     * @return self This instance\n     */\n    public function clearAttributes(): self {\n        $this->attributes = [];\n        return $this;\n    }\n\n\n    /**\n     * Get attribute value\n     * @param  string      $name Attribute name\n     * @return string|null       Value from occurrence with given name or NULL if not found\n     */\n    public function getAttribute(string $name): ?string {\n        foreach ($this->attributes as $attribute) {\n            if ($attribute->getName() === $name) {\n                return $attribute->getValue();\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * Set attribute value\n     * @param  string      $name  Attribute name\n     * @param  string|null $value New attribute value for first found occurrence, NULL to remove\n     * @return self               This instance\n     * @suppress PhanThrowTypeAbsentForCall, PhanTypeMismatchArgumentNullable\n     */\n    public function setAttribute(string $name, ?string $value): self {\n        $index = null;\n        $attribute = null;\n        foreach ($this->attributes as $i=>$a) {\n            if ($a->getName() === $name) {\n                $index = $i;\n                $attribute = $a;\n                break;\n            }\n        }\n\n        if ($attribute === null && $value !== null) {\n            $this->addAttribute(new Attribute($name, $value));\n        } elseif ($attribute !== null && $value !== null) {\n            $attribute->setValue($value);\n        } elseif ($attribute !== null && $value === null) {\n            $this->removeAttribute($index);\n        }\n\n        return $this;\n    }\n}\n"
                        }
                      },
                      "BuyerAccountingReferenceTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\ntrait BuyerAccountingReferenceTrait {\n    protected $buyerAccountingReference = null;\n\n    /**\n     * Get buyer accounting reference\n     * @return string|null Buyer accounting reference\n     */\n    public function getBuyerAccountingReference(): ?string {\n        return $this->buyerAccountingReference;\n    }\n\n\n    /**\n     * Set buyer accounting reference\n     * @param  string|null $buyerAccountingReference Buyer accounting reference\n     * @return self                                  This instance\n     */\n    public function setBuyerAccountingReference(?string $buyerAccountingReference): self {\n        $this->buyerAccountingReference = $buyerAccountingReference;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "ClassificationIdentifiersTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\Identifier;\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\n\ntrait ClassificationIdentifiersTrait {\n    protected $classIdentifiers = [];\n\n    /**\n     * Get classification identifiers\n     * @return Identifier[] Array of identifiers\n     */\n    public function getClassificationIdentifiers(): array {\n        return $this->classIdentifiers;\n    }\n\n\n    /**\n     * Add classification identifier\n     * @param  Identifier $identifier Identifier instance\n     * @return self                   This instance\n     */\n    public function addClassificationIdentifier(Identifier $identifier): self {\n        $this->classIdentifiers[] = $identifier;\n        return $this;\n    }\n\n\n    /**\n     * Remove classification identifier\n     * @param  int  $index Identifier index\n     * @return self        This instance\n     * @throws OutOfBoundsException if identifier index is out of bounds\n     */\n    public function removeClassificationIdentifier(int $index): self {\n        if ($index < 0 || $index >= count($this->classIdentifiers)) {\n            throw new OutOfBoundsException('Could not find classification identifier by index');\n        }\n        array_splice($this->classIdentifiers, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all classification identifiers\n     * @return self This instance\n     */\n    public function clearClassificationIdentifiers(): self {\n        $this->classIdentifiers = [];\n        return $this;\n    }\n}\n"
                        }
                      },
                      "IdentifiersTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\Identifier;\nuse OutOfBoundsException;\nuse function array_splice;\nuse function count;\n\ntrait IdentifiersTrait {\n    protected $identifiers = [];\n\n    /**\n     * Get additional identifiers\n     * @return Identifier[] Array of identifiers\n     */\n    public function getIdentifiers(): array {\n        return $this->identifiers;\n    }\n\n\n    /**\n     * Add additional identifier\n     * @param  Identifier $identifier Identifier instance\n     * @return self                   This instance\n     */\n    public function addIdentifier(Identifier $identifier): self {\n        $this->identifiers[] = $identifier;\n        return $this;\n    }\n\n\n    /**\n     * Remove additional identifier\n     * @param  int  $index Identifier index\n     * @return self        This instance\n     * @throws OutOfBoundsException if identifier index is out of bounds\n     */\n    public function removeIdentifier(int $index): self {\n        if ($index < 0 || $index >= count($this->identifiers)) {\n            throw new OutOfBoundsException('Could not find identifier by index');\n        }\n        array_splice($this->identifiers, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all additional identifiers\n     * @return self This instance\n     */\n    public function clearIdentifiers(): self {\n        $this->identifiers = [];\n        return $this;\n    }\n}\n"
                        }
                      },
                      "InvoiceValidationTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\Exceptions\\ValidationException;\nuse Einvoicing\\Invoice;\nuse function array_merge;\nuse function in_array;\n\n// @phan-file-suppress PhanPluginInconsistentReturnFunction, PhanPossiblyNonClassMethodCall\n\ntrait InvoiceValidationTrait {\n    /**\n     * Validate invoice\n     * @throws ValidationException if failed to pass validation\n     */\n    public function validate(): void {\n        $rules = $this->getRules();\n        foreach ($rules as $ruleId=>$rule) {\n            $errorMessage = $rule($this);\n            if (!empty($errorMessage)) {\n                throw new ValidationException($errorMessage, $ruleId);\n            }\n        }\n    }\n\n\n    /**\n     * Get effective validation rules\n     * @return array<string,callable> Map of rules\n     * @suppress PhanUndeclaredProperty\n     */\n    private function getRules(): array {\n        $rules = $this->getDefaultRules();\n        if ($this->preset !== null) {\n            $rules = array_merge($rules, $this->preset->getRules());\n        }\n        return $rules;\n    }\n\n\n    /**\n     * Get EN16931 validation rules\n     * @return array<string,callable> Map of rules\n     */\n    private function getDefaultRules(): array {\n        $res = [];\n\n        $res['BR-01'] = static function(Invoice $inv) {\n            if ($inv->getSpecification() === null) return \"An Invoice shall have a Specification identifier (BT-24)\";\n        };\n        $res['BR-02'] = static function(Invoice $inv) {\n            if ($inv->getNumber() === null) return \"An Invoice shall have an Invoice number (BT-1)\";\n        };\n        $res['BR-03'] = static function(Invoice $inv) {\n            if ($inv->getIssueDate() === null) return \"An Invoice shall have an Invoice issue date (BT-2)\";\n        };\n        $res['BR-06'] = static function(Invoice $inv) {\n            if ($inv->getSeller() === null) return \"Missing Seller from Invoice\";\n            if ($inv->getSeller()->getName() === null) return \"An Invoice shall contain the Seller name (BT-27)\";\n        };\n        $res['BR-07'] = static function(Invoice $inv) {\n            if ($inv->getBuyer() === null) return \"Missing Buyer from Invoice\";\n            if ($inv->getBuyer()->getName() === null) return \"An Invoice shall contain the Buyer name (BT-44)\";\n        };\n        $res['BR-09'] = static function(Invoice $inv) {\n            if ($inv->getSeller()->getCountry() === null) {\n                return \"The Seller postal address shall contain a Seller country code (BT-40)\";\n            }\n        };\n        $res['BR-11'] = static function(Invoice $inv) {\n            if ($inv->getBuyer()->getCountry() === null) {\n                return \"The Buyer postal address shall contain a Buyer country code (BT-55)\";\n            }\n        };\n        $res['BR-16'] = static function(Invoice $inv) {\n            if (empty($inv->getLines())) return \"An Invoice shall have at least one Invoice line (BG-25)\";\n        };\n        $res['BR-17'] = static function(Invoice $inv) {\n            if ($inv->getPayee() === null) return;\n            if ($inv->getSeller()->getName() === $inv->getPayee()->getName()) return;\n            if ($inv->getPayee()->getName() === null) {\n                return \"The Payee name shall be provided in the Invoice, if the Payee is different from the Seller\";\n            }\n        };\n        $res['BR-25'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                if ($line->getName() === null) return \"Each Invoice line (BG-25) shall contain the Item name (BT-153)\";\n            }\n        };\n        $res['BR-26'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                if ($line->getPrice() === null) {\n                    return \"Each Invoice line (BG-25) shall contain the Item net price (BT-146)\";\n                }\n            }\n        };\n        $res['BR-27'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                if ($line->getPrice() < 0) return \"The Item net price (BT-146) shall NOT be negative\";\n            }\n        };\n        $res['BR-31'] = static function(Invoice $inv) {\n            foreach ($inv->getAllowances() as $allowance) {\n                if ($allowance->getAmount() === null) {\n                    return \"Each Document level allowance shall have a Document level allowance amount (BT-92)\";\n                }\n            }\n        };\n        $res['BR-33'] = static function(Invoice $inv) {\n            foreach ($inv->getAllowances() as $allowance) {\n                if ($allowance->getReasonCode() === null && $allowance->getReason() === null) {\n                    return \"Each Document level allowance shall have a Document level allowance reason (BT-97) \" .\n                        \"or a Document level allowance reason code (BT-98)\";\n                }\n            }\n        };\n        $res['BR-36'] = static function(Invoice $inv) {\n            foreach ($inv->getCharges() as $charge) {\n                if ($charge->getAmount() === null) {\n                    return \"Each Document level charge shall have a Document level charge amount (BT-99)\";\n                }\n            }\n        };\n        $res['BR-38'] = static function(Invoice $inv) {\n            foreach ($inv->getCharges() as $charge) {\n                if ($charge->getReasonCode() === null && $charge->getReason() === null) {\n                    return \"Each Document level charge shall have a Document level charge reason (BT-104) \" .\n                        \"or a Document level charge reason code (BT-105)\";\n                }\n            }\n        };\n        $res['BR-41'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                foreach ($line->getAllowances() as $allowance) {\n                    if ($allowance->getAmount() === null) {\n                        return \"Each Invoice line allowance shall have an Invoice line allowance amount (BT-136)\";\n                    }\n                }\n            }\n        };\n        $res['BR-42'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                foreach ($line->getAllowances() as $allowance) {\n                    if ($allowance->getReasonCode() === null && $allowance->getReason() === null) {\n                        return \"Each Invoice line allowance shall have an Invoice line allowance reason (BT-139) \" .\n                            \"or an Invoice line allowance reason code (BT-140)\";\n                    }\n                }\n            }\n        };\n        $res['BR-43'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                foreach ($line->getCharges() as $charge) {\n                    if ($charge->getAmount() === null) {\n                        return \"Each Invoice line charge shall have an Invoice line charge amount (BT-141)\";\n                    }\n                }\n            }\n        };\n        $res['BR-44'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                foreach ($line->getCharges() as $charge) {\n                    if ($charge->getReasonCode() === null && $charge->getReason() === null) {\n                        return \"Each Invoice line charge shall have an Invoice line charge reason \" .\n                            \"or an invoice line allowance reason code\";\n                    }\n                }\n            }\n        };\n        $res['BR-49'] = static function(Invoice $inv) {\n            if ($inv->getPayment() !== null && $inv->getPayment()->getMeansCode() === null) {\n                return \"A Payment instruction (BG-16) shall specify the Payment means type code (BT-81)\";\n            }\n        };\n        $res['BR-50'] = static function(Invoice $inv) {\n            if ($inv->getPayment() === null) return;\n            foreach ($inv->getPayment()->getTransfers() as $transfer) {\n                if ($transfer->getAccountId() === null) {\n                    return \"A Payment account identifier (BT-84) shall be present if Credit transfer (BG-17) \" .\n                        \"information is provided in the Invoice\";\n                }\n            }\n        };\n        $res['BR-51'] = static function(Invoice $inv) {\n            if ($inv->getPayment() === null) return;\n            if ($inv->getPayment()->getCard() === null) return;\n            if ($inv->getPayment()->getCard()->getPan() === null) {\n                return \"The last 4 to 6 digits of the Payment card primary account number (BT-87) \" .\n                    \"shall be present if Payment card information (BG-18) is provided in the Invoice\";\n            }\n        };\n        $res['BR-52'] = static function(Invoice $inv) {\n            foreach ($inv->getAttachments() as $attachment) {\n                if ($attachment->getId() === null) {\n                    return \"Each Additional supporting document shall contain a Supporting document reference (BT-122)\";\n                }\n            }\n        };\n        $res['BR-61'] = static function(Invoice $inv) {\n            if ($inv->getPayment() === null) return;\n            if (!in_array($inv->getPayment()->getMeansCode(), ['30', '58'])) return;\n            if (empty($inv->getPayment()->getTransfers())) {\n                return \"If the Payment means type code (BT-81) means SEPA credit transfer, Local credit transfer or \" .\n                    \"Non-SEPA international credit transfer, the Payment account identifier (BT-84) shall be present\";\n            }\n        };\n        $res['BR-64'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                if ($line->getStandardIdentifier() === null) continue;\n                if ($line->getStandardIdentifier()->getScheme() === null) {\n                    return \"The Item standard identifier (BT-157) shall have a Scheme identifier\";\n                }\n            }\n        };\n        $res['BR-65'] = static function(Invoice $inv) {\n            foreach ($inv->getLines() as $line) {\n                foreach ($line->getClassificationIdentifiers() as $identifier) {\n                    if ($identifier->getScheme() === null) {\n                        return \"The Item classification identifier (BT-158) shall have a Scheme identifier\";\n                    }\n                }\n            }\n        };\n\n        return $res;\n    }\n}\n"
                        }
                      },
                      "PeriodTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse DateTime;\n\ntrait PeriodTrait {\n    protected $periodStartDate = null;\n    protected $periodEndDate = null;\n\n    /**\n     * Get period start date\n     * @return DateTime|null Period start date\n     */\n    public function getPeriodStartDate(): ?DateTime {\n        return $this->periodStartDate;\n    }\n\n\n    /**\n     * Set period start date\n     * @param  DateTime|null $periodStartDate Period start date\n     * @return self                           This instance\n     */\n    public function setPeriodStartDate(?DateTime $periodStartDate): self {\n        $this->periodStartDate = $periodStartDate;\n        return $this;\n    }\n\n\n    /**\n     * Get period end date\n     * @return DateTime|null Period end date\n     */\n    public function getPeriodEndDate(): ?DateTime {\n        return $this->periodEndDate;\n    }\n\n\n    /**\n     * Set period end date\n     * @param  DateTime|null $periodEndDate Period end date\n     * @return self                         This instance\n     */\n    public function setPeriodEndDate(?DateTime $periodEndDate): self {\n        $this->periodEndDate = $periodEndDate;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "PostalAddressTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse InvalidArgumentException;\nuse function count;\n\ntrait PostalAddressTrait {\n    protected $address = [];\n    protected $city = null;\n    protected $postalCode = null;\n    protected $subdivision = null;\n    protected $country = null;\n\n    /**\n     * Get address lines\n     * @return string[] Address lines (up to 3 lines)\n     */\n    public function getAddress(): array {\n        return $this->address;\n    }\n\n\n    /**\n     * Set address lines\n     * @param  string[] $addressLines Address lines (up to 3 lines)\n     * @return self                   This instance\n     * @throws InvalidArgumentException if more than 3 lines are provided\n     */\n    public function setAddress(array $addressLines): self {\n        if (count($addressLines) > 3) {\n            throw new InvalidArgumentException('Address cannot have more than 3 lines');\n        }\n        $this->address = $addressLines;\n        return $this;\n    }\n\n\n    /**\n     * Get city name\n     * @return string|null City name\n     */\n    public function getCity(): ?string {\n        return $this->city;\n    }\n\n\n    /**\n     * Set city name\n     * @param  string|null $city City name\n     * @return self              This instance\n     */\n    public function setCity(?string $city): self {\n        $this->city = $city;\n        return $this;\n    }\n\n\n    /**\n     * Get postal code\n     * @return string|null Postal code\n     */\n    public function getPostalCode(): ?string {\n        return $this->postalCode;\n    }\n\n\n    /**\n     * Set postal code\n     * @param  string|null $postalCode Postal code\n     * @return self                    This instance\n     */\n    public function setPostalCode(?string $postalCode): self {\n        $this->postalCode = $postalCode;\n        return $this;\n    }\n\n\n    /**\n     * Get country subdivision (region, province, etc.)\n     * @return string|null Country subdivision\n     */\n    public function getSubdivision(): ?string {\n        return $this->subdivision;\n    }\n\n\n    /**\n     * Set country subdivision (region, province, etc.)\n     * @param  string|null $subdivision Country subdivision\n     * @return self                     This instance\n     */\n    public function setSubdivision(?string $subdivision): self {\n        $this->subdivision = $subdivision;\n        return $this;\n    }\n\n\n    /**\n     * Get country code\n     * @return string|null Country code\n     */\n    public function getCountry(): ?string {\n        return $this->country;\n    }\n\n\n    /**\n     * Set country code\n     * @param  string|null $countryCode Country code\n     * @return self                     This instance\n     */\n    public function setCountry(?string $countryCode): self {\n        $this->country = $countryCode;\n        return $this;\n    }\n}\n"
                        }
                      },
                      "PrecedingInvoiceReferencesTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\nuse Einvoicing\\InvoiceReference;\nuse OutOfBoundsException;\n\ntrait PrecedingInvoiceReferencesTrait {\n    protected $precedingInvoiceReferences = [];\n\n    /**\n     * Get preceding invoice references\n     * @return InvoiceReference[] Array of preceding invoice references\n     */\n    public function getPrecedingInvoiceReferences(): array {\n        return $this->precedingInvoiceReferences;\n    }\n\n\n    /**\n     * Add preceding invoice reference\n     * @param  InvoiceReference $reference Preceding invoice reference\n     * @return self                        This instance\n     */\n    public function addPrecedingInvoiceReference(InvoiceReference $reference): self {\n        $this->precedingInvoiceReferences[] = $reference;\n        return $this;\n    }\n\n\n    /**\n     * Remove preceding invoice reference\n     * @param  int  $index Preceding invoice reference index\n     * @return self        This instance\n     * @throws OutOfBoundsException if preceding invoice reference index is out of bounds\n     */\n    public function removePrecedingInvoiceReference(int $index): self {\n        if ($index < 0 || $index >= count($this->precedingInvoiceReferences)) {\n            throw new OutOfBoundsException('Could not find preceding invoice reference by index');\n        }\n        array_splice($this->precedingInvoiceReferences, $index, 1);\n        return $this;\n    }\n\n\n    /**\n     * Clear all preceding invoice references\n     * @return self This instance\n     */\n    public function clearPrecedingInvoiceReferences(): self {\n        $this->precedingInvoiceReferences = [];\n        return $this;\n    }\n}\n"
                        }
                      },
                      "VatTrait.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Traits;\n\ntrait VatTrait {\n    protected $vatCategory = \"S\"; // TODO: add constants\n    protected $vatRate = null;\n    protected $vatExemptionReasonCode = null;\n    protected $vatExemptionReason = null;\n\n    /**\n     * Get VAT category code\n     * @return string VAT category code\n     */\n    public function getVatCategory(): string {\n        return $this->vatCategory;\n    }\n\n\n    /**\n     * Set VAT category code\n     * @param  string $categoryCode VAT category code\n     * @return self                 This instance\n     */\n    public function setVatCategory(string $categoryCode): self {\n        $this->vatCategory = $categoryCode;\n        return $this;\n    }\n\n\n    /**\n     * Get VAT rate\n     * @return float|null VAT rate as a percentage or NULL when not subject to VAT\n     */\n    public function getVatRate(): ?float {\n        return $this->vatRate;\n    }\n\n\n    /**\n     * Set VAT rate\n     * @param  float|null $rate VAT rate as a percentage or NULL when not subject to VAT\n     * @return self             This instance\n     */\n    public function setVatRate(?float $rate): self {\n        $this->vatRate = $rate;\n        return $this;\n    }\n\n\n    /**\n     * Get VAT exemption reason code\n     * @return string|null VAT exemption reason code\n     */\n    public function getVatExemptionReasonCode(): ?string {\n        return $this->vatExemptionReasonCode;\n    }\n\n\n    /**\n     * Set VAT exemption reason code\n     * @param  string|null $reasonCode VAT exemption reason code\n     * @return self                    This instance\n     */\n    public function setVatExemptionReasonCode(?string $reasonCode): self {\n        $this->vatExemptionReasonCode = $reasonCode;\n        return $this;\n    }\n\n\n    /**\n     * Get VAT exemption reason\n     * @return string|null VAT exemption reason expressed as text\n     */\n    public function getVatExemptionReason(): ?string {\n        return $this->vatExemptionReason;\n    }\n\n\n    /**\n     * Set VAT exemption reason\n     * @param  string|null $reason VAT exemption reason expressed as text\n     * @return self                This instance\n     */\n    public function setVatExemptionReason(?string $reason): self {\n        $this->vatExemptionReason = $reason;\n        return $this;\n    }\n}\n"
                        }
                      }
                    }
                  },
                  "Writers": {
                    "directory": {
                      "AbstractWriter.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Writers;\n\nuse Einvoicing\\Invoice;\n\nabstract class AbstractWriter {\n    /**\n     * Export invoice\n     * @param  Invoice $invoice Invoice instance\n     * @return string           Export contents\n     */\n    abstract public function export(Invoice $invoice): string;\n}\n"
                        }
                      },
                      "UblWriter.php": {
                        "file": {
                          "contents": "<?php\nnamespace Einvoicing\\Writers;\n\nuse DateTime;\nuse Einvoicing\\AllowanceOrCharge;\nuse Einvoicing\\Attachment;\nuse Einvoicing\\Delivery;\nuse Einvoicing\\Identifier;\nuse Einvoicing\\Invoice;\nuse Einvoicing\\InvoiceLine;\nuse Einvoicing\\Models\\InvoiceTotals;\nuse Einvoicing\\Party;\nuse Einvoicing\\Payments\\Card;\nuse Einvoicing\\Payments\\Mandate;\nuse Einvoicing\\Payments\\Payment;\nuse Einvoicing\\Payments\\Transfer;\nuse UXML\\UXML;\nuse function in_array;\n\nclass UblWriter extends AbstractWriter {\n    const NS_INVOICE = \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\";\n    const NS_CREDIT_NOTE = \"urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2\";\n    const NS_CAC = \"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\";\n    const NS_CBC = \"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\";\n\n    /**\n     * @inheritdoc\n     */\n    public function export(Invoice $invoice): string {\n        $totals = $invoice->getTotals();\n        $isCreditNoteProfile = $this->isCreditNoteProfile($invoice);\n\n        // Create root element\n        $rootElementName = $isCreditNoteProfile ? 'CreditNote' : 'Invoice';\n        $xml = UXML::newInstance($rootElementName, null, [\n            'xmlns' => $isCreditNoteProfile ? self::NS_CREDIT_NOTE : self::NS_INVOICE,\n            'xmlns:cac' => self::NS_CAC,\n            'xmlns:cbc' => self::NS_CBC\n        ]);\n\n        // BT-24: Specification identifier\n        $specificationIdentifier = $invoice->getSpecification();\n        if ($specificationIdentifier !== null) {\n            $xml->add('cbc:CustomizationID', $specificationIdentifier);\n        }\n\n        // BT-23: Business process type\n        $businessProcessType = $invoice->getBusinessProcess();\n        if ($businessProcessType !== null) {\n            $xml->add('cbc:ProfileID', $businessProcessType);\n        }\n\n        // BT-1: Invoice number\n        $number = $invoice->getNumber();\n        if ($number !== null) {\n            $xml->add('cbc:ID', $number);\n        }\n\n        // BT-2: Issue date\n        $issueDate = $invoice->getIssueDate();\n        if ($issueDate !== null) {\n            $xml->add('cbc:IssueDate', $issueDate->format('Y-m-d'));\n        }\n\n        // BT-9: Due date (for invoice profile)\n        $dueDate = $invoice->getDueDate();\n        if (!$isCreditNoteProfile && $dueDate !== null) {\n            $xml->add('cbc:DueDate', $dueDate->format('Y-m-d'));\n        }\n\n        // BT-3: Invoice type code\n        $typeCodeName = $isCreditNoteProfile ? \"cbc:CreditNoteTypeCode\" : \"cbc:InvoiceTypeCode\";\n        $xml->add($typeCodeName, (string) $invoice->getType());\n\n        // BT-22: Notes\n        foreach ($invoice->getNotes() as $note) {\n            $xml->add('cbc:Note', $note);\n        }\n\n        // BT-7: Tax point date\n        $taxPointDate = $invoice->getTaxPointDate();\n        if ($taxPointDate !== null) {\n            $xml->add('cbc:TaxPointDate', $taxPointDate->format('Y-m-d'));\n        }\n\n        // BT-5: Invoice currency code\n        $xml->add('cbc:DocumentCurrencyCode', $invoice->getCurrency());\n\n        // BT-6: VAT accounting currency code\n        $vatCurrency = $invoice->getVatCurrency();\n        if ($vatCurrency !== null) {\n            $xml->add('cbc:TaxCurrencyCode', $vatCurrency);\n        }\n\n        // BT-19: Buyer accounting reference\n        $buyerAccountingReference = $invoice->getBuyerAccountingReference();\n        if ($buyerAccountingReference !== null) {\n            $xml->add('cbc:AccountingCost', $buyerAccountingReference);\n        }\n\n        // BT-10: Buyer reference\n        $buyerReference = $invoice->getBuyerReference();\n        if ($buyerReference !== null) {\n            $xml->add('cbc:BuyerReference', $buyerReference);\n        }\n\n        // BG-14: Invoice period\n        $this->addPeriodNode($xml, $invoice);\n\n        // Order reference node\n        $this->addOrderReferenceNode($xml, $invoice);\n\n        // BG-3: Preceding invoice reference\n        foreach ($invoice->getPrecedingInvoiceReferences() as $invoiceReference) {\n            $invoiceDocumentReferenceNode = $xml->add('cac:BillingReference')->add('cac:InvoiceDocumentReference');\n            $invoiceDocumentReferenceNode->add('cbc:ID', $invoiceReference->getValue());\n            $invoiceReferenceIssueDate = $invoiceReference->getIssueDate();\n            if ($invoiceReferenceIssueDate !== null) {\n                $invoiceDocumentReferenceNode->add('cbc:IssueDate', $invoiceReferenceIssueDate->format('Y-m-d'));\n            }\n        }\n\n        // BT-17: Tender or lot reference (for invoice profile)\n        if (!$isCreditNoteProfile) {\n            $this->addTenderOrLotReferenceNode($xml, $invoice);\n        }\n\n        // BT-12: Contract reference\n        $contractReference = $invoice->getContractReference();\n        if ($contractReference !== null) {\n            $xml->add('cac:ContractDocumentReference')->add('cbc:ID', $contractReference);\n        }\n\n        // BG-24: Attachments node\n        foreach ($invoice->getAttachments() as $attachment) {\n            $this->addAttachmentNode($xml, $attachment);\n        }\n\n        // BT-17: Tender or lot reference (for credit note profile)\n        if ($isCreditNoteProfile) {\n            $this->addTenderOrLotReferenceNode($xml, $invoice);\n        }\n\n        // Seller node\n        $seller = $invoice->getSeller();\n        if ($seller !== null) {\n            $this->addSellerOrBuyerNode($xml->add('cac:AccountingSupplierParty'), $seller);\n        }\n\n        // Buyer node\n        $buyer = $invoice->getBuyer();\n        if ($buyer !== null) {\n            $this->addSellerOrBuyerNode($xml->add('cac:AccountingCustomerParty'), $buyer);\n        }\n\n        // Payee node\n        $payee = $invoice->getPayee();\n        if ($payee !== null) {\n            $this->addPayeeNode($xml, $payee);\n        }\n\n        // Delivery node\n        $delivery = $invoice->getDelivery();\n        if ($delivery !== null) {\n            $this->addDeliveryNode($xml, $delivery);\n        }\n\n        // Payment nodes\n        $payment = $invoice->getPayment();\n        if ($payment !== null) {\n            $this->addPaymentNodes($xml, $payment, $isCreditNoteProfile ? $dueDate : null);\n        }\n\n        // Allowances and charges\n        foreach ($invoice->getAllowances() as $item) {\n            $this->addAllowanceOrCharge($xml, $item, false, $invoice, $totals, null);\n        }\n        foreach ($invoice->getCharges() as $item) {\n            $this->addAllowanceOrCharge($xml, $item, true, $invoice, $totals, null);\n        }\n\n        // Invoice totals\n        $this->addTaxTotalNodes($xml, $totals);\n        $this->addDocumentTotalsNode($xml, $totals);\n\n        // Invoice lines\n        $lines = $invoice->getLines();\n        $lastGenId = 0;\n        $usedIds = [];\n        foreach ($lines as $line) {\n            $lineId = $line->getId();\n            if ($lineId !== null) {\n                $usedIds[] = $lineId;\n            }\n        }\n        foreach ($lines as $line) {\n            $this->addLineNode($xml, $line, $invoice, $isCreditNoteProfile, $lastGenId, $usedIds);\n        }\n\n        return $xml->asXML();\n    }\n\n\n    /**\n     * Is credit note profile\n     * @param  Invoice $invoice Invoice invoice\n     * @return boolean          Whether document should use invoice or credit note profiles\n     */\n    private function isCreditNoteProfile(Invoice $invoice): bool {\n        $type = $invoice->getType();\n        return in_array($type, [\n            Invoice::TYPE_CREDIT_NOTE_RELATED_TO_GOODS_OR_SERVICES,\n            Invoice::TYPE_CREDIT_NOTE_RELATED_TO_FINANCIAL_ADJUSTMENTS,\n            Invoice::TYPE_CREDIT_NOTE,\n            Invoice::TYPE_FACTORED_CREDIT_NOTE,\n            Invoice::TYPE_FORWARDERS_CREDIT_NOTE\n        ]);\n    }\n\n\n    /**\n     * Add identifier node\n     * @param UXML       $parent     Parent element\n     * @param string     $name       New node name\n     * @param Identifier $identifier Identifier instance\n     * @param string     $schemeAttr Scheme attribute name\n     */\n    private function addIdentifierNode(UXML $parent, string $name, Identifier $identifier, string $schemeAttr=\"schemeID\") {\n        $scheme = $identifier->getScheme();\n        $attrs = ($scheme === null) ? [] : [\"$schemeAttr\" => $scheme];\n        $parent->add($name, $identifier->getValue(), $attrs);\n    }\n\n\n    /**\n     * Add period node\n     * @param UXML                $parent Parent element\n     * @param Invoice|InvoiceLine $source Source instance\n     */\n    private function addPeriodNode(UXML $parent, $source) {\n        $startDate = $source->getPeriodStartDate();\n        $endDate = $source->getPeriodEndDate();\n        if ($startDate === null && $endDate === null) return;\n\n        $xml = $parent->add('cac:InvoicePeriod');\n\n        // Period start date\n        if ($startDate !== null) {\n            $xml->add('cbc:StartDate', $startDate->format('Y-m-d'));\n        }\n\n        // Period end date\n        if ($endDate !== null) {\n            $xml->add('cbc:EndDate', $endDate->format('Y-m-d'));\n        }\n    }\n\n\n    /**\n     * Add order reference node\n     * @param UXML    $parent  Parent element\n     * @param Invoice $invoice Invoice instance\n     */\n    private function addOrderReferenceNode(UXML $parent, Invoice $invoice) {\n        $purchaseOrderReference = $invoice->getPurchaseOrderReference();\n        $salesOrderReference = $invoice->getSalesOrderReference();\n        if ($purchaseOrderReference === null && $salesOrderReference === null) return;\n\n        $orderReferenceNode = $parent->add('cac:OrderReference');\n\n        // BT-13: Purchase order reference\n        if ($purchaseOrderReference !== null) {\n            $orderReferenceNode->add('cbc:ID', $purchaseOrderReference);\n        }\n\n        // BT-14: Sales order reference\n        if ($salesOrderReference !== null) {\n            $orderReferenceNode->add('cbc:SalesOrderID', $salesOrderReference);\n        }\n    }\n\n\n    /**\n     * Add tender or lot reference node\n     * @param UXML    $parent  Parent element\n     * @param Invoice $invoice Invoice instance\n     */\n    private function addTenderOrLotReferenceNode(UXML $parent, Invoice $invoice) {\n        $tenderOrLotReference = $invoice->getTenderOrLotReference();\n        if ($tenderOrLotReference !== null) {\n            $parent->add('cac:OriginatorDocumentReference')->add('cbc:ID', $tenderOrLotReference);\n        }\n    }\n\n\n    /**\n     * Add amount node\n     * @param UXML   $parent   Parent element\n     * @param string $name     New node name\n     * @param float  $amount   Amount\n     * @param string $currency Currency code\n     */\n    private function addAmountNode(UXML $parent, string $name, float $amount, string $currency) {\n        $parent->add($name, (string) $amount, ['currencyID' => $currency]);\n    }\n\n\n    /**\n     * Add VAT node\n     * @param UXML        $parent              Parent element\n     * @param string      $name                New node name\n     * @param string      $category            VAT category\n     * @param float|null  $rate                VAT rate\n     * @param string|null $exemptionReasonCode VAT exemption reason code\n     * @param string|null $exemptionReason     VAT exemption reason as text\n     */\n    private function addVatNode(\n        UXML $parent, string $name, string $category, ?float $rate,\n        ?string $exemptionReasonCode=null, ?string $exemptionReason=null\n    ) {\n        $xml = $parent->add($name);\n\n        // VAT category\n        $xml->add('cbc:ID', $category);\n\n        // VAT rate\n        if ($rate !== null) {\n            $xml->add('cbc:Percent', (string) $rate);\n        }\n\n        // Exemption reason code\n        if ($exemptionReasonCode !== null) {\n            $xml->add('cbc:TaxExemptionReasonCode', $exemptionReasonCode);\n        }\n\n        // Exemption reason (as text)\n        if ($exemptionReason !== null) {\n            $xml->add('cbc:TaxExemptionReason', $exemptionReason);\n        }\n\n        // Tax scheme\n        $xml->add('cac:TaxScheme')->add('cbc:ID', 'VAT');\n    }\n\n\n    /**\n     * Add postal address node\n     * @param  UXML           $parent Parent element\n     * @param  string         $name   New node name\n     * @param  Delivery|Party $source Source instance\n     * @return UXML                   Postal address node\n     */\n    private function addPostalAddressNode(UXML $parent, string $name, $source) {\n        $xml = $parent->add($name);\n\n        // Street name\n        $addressLines = $source->getAddress();\n        if (isset($addressLines[0])) {\n            $xml->add('cbc:StreetName', $addressLines[0]);\n        }\n\n        // Additional street name\n        if (isset($addressLines[1])) {\n            $xml->add('cbc:AdditionalStreetName', $addressLines[1]);\n        }\n\n        // City name\n        $cityName = $source->getCity();\n        if ($cityName !== null) {\n            $xml->add('cbc:CityName', $cityName);\n        }\n\n        // Postal code\n        $postalCode = $source->getPostalCode();\n        if ($postalCode !== null) {\n            $xml->add('cbc:PostalZone', $postalCode);\n        }\n\n        // Subdivision\n        $subdivision = $source->getSubdivision();\n        if ($subdivision !== null) {\n            $xml->add('cbc:CountrySubentity', $subdivision);\n        }\n\n        // Address line (third address line)\n        if (isset($addressLines[2])) {\n            $xml->add('cac:AddressLine')->add('cbc:Line', $addressLines[2]);\n        }\n\n        // Country\n        $country = $source->getCountry();\n        if ($country !== null) {\n            $xml->add('cac:Country')->add('cbc:IdentificationCode', $country);\n        }\n\n        return $xml;\n    }\n\n\n    /**\n     * Add seller or buyer node\n     * @param UXML  $parent Invoice element\n     * @param Party $party  Party instance\n     */\n    private function addSellerOrBuyerNode(UXML $parent, Party $party) {\n        $xml = $parent->add('cac:Party');\n\n        // Electronic address\n        $electronicAddress = $party->getElectronicAddress();\n        if ($electronicAddress !== null) {\n            $this->addIdentifierNode($xml, 'cbc:EndpointID', $electronicAddress);\n        }\n\n        // Additional identifiers\n        foreach ($party->getIdentifiers() as $identifier) {\n            $identifierNode = $xml->add('cac:PartyIdentification');\n            $this->addIdentifierNode($identifierNode, 'cbc:ID', $identifier);\n        }\n\n        // Trading name\n        $tradingName = $party->getTradingName();\n        if ($tradingName !== null) {\n            $xml->add('cac:PartyName')->add('cbc:Name', $tradingName);\n        }\n\n        // Postal address node\n        $this->addPostalAddressNode($xml, 'cac:PostalAddress', $party);\n\n        // VAT number\n        $vatNumber = $party->getVatNumber();\n        if ($vatNumber !== null) {\n            $taxNode = $xml->add('cac:PartyTaxScheme');\n            $taxNode->add('cbc:CompanyID', $vatNumber);\n            $taxNode->add('cac:TaxScheme')->add('cbc:ID', 'VAT');\n        }\n\n        // Tax registration identifier\n        $taxRegistrationId = $party->getTaxRegistrationId();\n        if ($taxRegistrationId !== null) {\n            $taxRegistrationNode = $xml->add('cac:PartyTaxScheme');\n            $taxRegistrationNode->add('cbc:CompanyID', $taxRegistrationId->getValue());\n\n            $taxRegistrationSchemeNode = $taxRegistrationNode->add('cac:TaxScheme');\n            $taxRegistrationScheme = $taxRegistrationId->getScheme();\n            if ($taxRegistrationScheme !== null) {\n                $taxRegistrationSchemeNode->add('cbc:ID', $taxRegistrationScheme);\n            }\n        }\n\n        // Initial legal entity node\n        $legalEntityNode = $xml->add('cac:PartyLegalEntity');\n\n        // Legal name\n        $legalName = $party->getName();\n        if ($legalName !== null) {\n            $legalEntityNode->add('cbc:RegistrationName', $legalName);\n        }\n\n        // Company ID\n        $companyId = $party->getCompanyId();\n        if ($companyId !== null) {\n            $this->addIdentifierNode($legalEntityNode, 'cbc:CompanyID', $companyId);\n        }\n\n        // BT-33: Seller additional legal information\n        $legalInformation = $party->getLegalInformation();\n        if ($legalInformation !== null) {\n            $legalEntityNode->add('cbc:CompanyLegalForm', $legalInformation);\n        }\n\n        // Contact point\n        if ($party->hasContactInformation()) {\n            $contactNode = $xml->add('cac:Contact');\n            \n            $contactName = $party->getContactName();\n            if ($contactName !== null) {\n                $contactNode->add('cbc:Name', $contactName);\n            }\n\n            $contactPhone = $party->getContactPhone();\n            if ($contactPhone !== null) {\n                $contactNode->add('cbc:Telephone', $contactPhone);\n            }\n\n            $contactEmail = $party->getContactEmail();\n            if ($contactEmail !== null) {\n                $contactNode->add('cbc:ElectronicMail', $contactEmail);\n            }\n        }\n    }\n\n\n    /**\n     * Add payee node\n     * @param UXML  $parent Invoice element\n     * @param Party $party  Party instance\n     */\n    private function addPayeeNode(UXML $parent, Party $party) {\n        $xml = $parent->add('cac:PayeeParty');\n\n        // Additional identifiers\n        foreach ($party->getIdentifiers() as $identifier) {\n            $identifierNode = $xml->add('cac:PartyIdentification');\n            $this->addIdentifierNode($identifierNode, 'cbc:ID', $identifier);\n        }\n\n        // Party name\n        $name = $party->getName();\n        if ($name !== null) {\n            $xml->add('cac:PartyName')->add('cbc:Name', $name);\n        }\n\n        // Company ID\n        $companyId = $party->getCompanyId();\n        if ($companyId !== null) {\n            $legalEntityNode = $xml->add('cac:PartyLegalEntity');\n            $this->addIdentifierNode($legalEntityNode, 'cbc:CompanyID', $companyId);\n        }\n    }\n\n\n    /**\n     * Add delivery node\n     * @param UXML     $parent   Invoice element\n     * @param Delivery $delivery Delivery instance\n     */\n    private function addDeliveryNode(UXML $parent, Delivery $delivery) {\n        $xml = $parent->add('cac:Delivery');\n\n        // BT-72: Actual delivery date\n        $date = $delivery->getDate();\n        if ($date !== null) {\n            $xml->add('cbc:ActualDeliveryDate', $date->format('Y-m-d'));\n        }\n\n        // Initial delivery location node\n        $locationNode = $xml->add('cac:DeliveryLocation');\n\n        // BT-71: Delivery location identifier\n        $locationIdentifier = $delivery->getLocationIdentifier();\n        if ($locationIdentifier !== null) {\n            $this->addIdentifierNode($locationNode, 'cbc:ID', $locationIdentifier);\n        }\n\n        // Delivery postal address\n        $addressNode = $this->addPostalAddressNode($locationNode, 'cac:Address', $delivery);\n        if ($addressNode->isEmpty()) {\n            $addressNode->remove();\n        }\n\n        // BT-70: Deliver name\n        $name = $delivery->getName();\n        if ($name !== null) {\n            $xml->add('cac:DeliveryParty')->add('cac:PartyName')->add('cbc:Name', $name);\n        }\n\n        // Remove location node if empty\n        if ($locationNode->isEmpty()) {\n            $locationNode->remove();\n        }\n    }\n\n\n    /**\n     * Add payment nodes\n     * @param UXML          $parent  Invoice element\n     * @param Payment       $payment Payment instance\n     * @param DateTime|null $dueDate Invoice due date (for credit note profile)\n     */\n    private function addPaymentNodes(UXML $parent, Payment $payment, ?DateTime $dueDate) {\n        $xml = $parent->add('cac:PaymentMeans');\n\n        // BT-81: Payment means code\n        // BT-82: Payment means name\n        $meansCode = $payment->getMeansCode();\n        if ($meansCode !== null) {\n            $meansText = $payment->getMeansText();\n            $attrs = ($meansText === null) ? [] : ['name' => $meansText];\n            $xml->add('cbc:PaymentMeansCode', $meansCode, $attrs);\n        }\n\n        // BT-9: Due date (for credit note profile)\n        if ($dueDate !== null) {\n            $xml->add('cbc:PaymentDueDate', $dueDate->format('Y-m-d'));\n        }\n\n        // BT-83: Payment ID\n        $paymentId = $payment->getId();\n        if ($paymentId !== null) {\n            $xml->add('cbc:PaymentID', $paymentId);\n        }\n\n        // BG-18: Payment card\n        $card = $payment->getCard();\n        if ($card !== null) {\n            $this->addPaymentCardNode($xml, $card);\n        }\n\n        // BG-17: Payment transfers\n        foreach ($payment->getTransfers() as $transfer) {\n            $this->addPaymentTransferNode($xml, $transfer);\n        }\n\n        // BG-19: Payment mandate\n        $mandate = $payment->getMandate();\n        if ($mandate !== null) {\n            $this->addPaymentMandateNode($xml, $mandate);\n        }\n\n        // Remove PaymentMeans node if empty\n        if ($xml->isEmpty()) {\n            $xml->remove();\n        }\n\n        // BT-20: Payment terms\n        $terms = $payment->getTerms();\n        if ($terms !== null) {\n            $parent->add('cac:PaymentTerms')->add('cbc:Note', $terms);\n        }\n    }\n\n\n    /**\n     * Add payment card node\n     * @param UXML $parent PaymentMeans element\n     * @param Card $card   Card instance\n     */\n    private function addPaymentCardNode(UXML $parent, Card $card) {\n        $xml = $parent->add('cac:CardAccount');\n\n        // BT-87: Card PAN\n        $pan = $card->getPan();\n        if ($pan !== null) {\n            $xml->add('cbc:PrimaryAccountNumberID', $pan);\n        }\n\n        // Card network\n        $network = $card->getNetwork();\n        if ($network !== null) {\n            $xml->add('cbc:NetworkID', $network);\n        }\n\n        // BT-88: Holder name\n        $holder = $card->getHolder();\n        if ($holder !== null) {\n            $xml->add('cbc:HolderName', $holder);\n        }\n    }\n\n\n    /**\n     * Add payment transfer node\n     * @param UXML     $parent   PaymentMeans element\n     * @param Transfer $transfer Transfer instance\n     */\n    private function addPaymentTransferNode(UXML $parent, Transfer $transfer) {\n        $xml = $parent->add('cac:PayeeFinancialAccount');\n\n        // BT-84: Receiving account ID\n        $accountId = $transfer->getAccountId();\n        if ($accountId !== null) {\n            $xml->add('cbc:ID', $accountId);\n        }\n\n        // BT-85: Receiving account name\n        $accountName = $transfer->getAccountName();\n        if ($accountName !== null) {\n            $xml->add('cbc:Name', $accountName);\n        }\n\n        // BT-86: Service provider ID\n        $provider = $transfer->getProvider();\n        if ($provider !== null) {\n            $xml->add('cac:FinancialInstitutionBranch')->add('cbc:ID', $provider);\n        }\n    }\n\n\n    /**\n     * Add payment mandate node\n     * @param UXML    $parent  PaymentMeans element\n     * @param Mandate $mandate Mandate instance\n     */\n    private function addPaymentMandateNode(UXML $parent, Mandate $mandate) {\n        $xml = $parent->add('cac:PaymentMandate');\n\n        // BT-89: Mandate reference\n        $reference = $mandate->getReference();\n        if ($reference !== null) {\n            $xml->add('cbc:ID', $reference);\n        }\n\n        // BT-91: Debited account\n        $account = $mandate->getAccount();\n        if ($account !== null) {\n            $xml->add('cac:PayerFinancialAccount')->add('cbc:ID', $account);\n        }\n    }\n\n\n    /**\n     * Add allowance or charge\n     * @param UXML               $parent   Parent element\n     * @param AllowanceOrCharge  $item     Allowance or charge instance\n     * @param boolean            $isCharge Is charge (TRUE) or allowance (FALSE)\n     * @param Invoice            $invoice  Invoice instance\n     * @param InvoiceTotals|null $totals   Invoice totals or NULL in case at line level\n     * @param InvoiceLine|null   $line     Invoice line or NULL in case of at document level\n     */\n    private function addAllowanceOrCharge(\n        UXML $parent,\n        AllowanceOrCharge $item,\n        bool $isCharge,\n        Invoice $invoice,\n        ?InvoiceTotals $totals,\n        ?InvoiceLine $line\n    ) {\n        $atDocumentLevel = ($line === null);\n        $xml = $parent->add('cac:AllowanceCharge');\n\n        // Charge indicator\n        $xml->add('cbc:ChargeIndicator', $isCharge ? 'true' : 'false');\n\n        // Reason code\n        $reasonCode = $item->getReasonCode();\n        if ($reasonCode !== null) {\n            $xml->add('cbc:AllowanceChargeReasonCode', $reasonCode);\n        }\n\n        // Reason text\n        $reasonText = $item->getReason();\n        if ($reasonText !== null) {\n            $xml->add('cbc:AllowanceChargeReason', $reasonText);\n        }\n\n        // Percentage\n        if ($item->isPercentage()) {\n            $xml->add('cbc:MultiplierFactorNumeric', (string) $item->getAmount());\n        }\n\n        // Amount\n        $baseAmount = $atDocumentLevel ?\n            $totals->netAmount :                                 // @phan-suppress-current-line PhanPossiblyUndeclaredProperty\n            $line->getNetAmountBeforeAllowancesCharges() ?? 0.0; // @phan-suppress-current-line PhanPossiblyNonClassMethodCall\n        $this->addAmountNode(\n            $xml,\n            'cbc:Amount',\n            $invoice->round($item->getEffectiveAmount($baseAmount), 'line/allowanceChargeAmount'),\n            $invoice->getCurrency()\n        );\n\n        // Base amount\n        if ($item->isPercentage()) {\n            $this->addAmountNode(\n                $xml,\n                'cbc:BaseAmount',\n                $invoice->round($baseAmount, 'line/netAmount'),\n                $invoice->getCurrency()\n            );\n        }\n\n        // Tax category\n        if ($atDocumentLevel) {\n            $this->addVatNode($xml, 'cac:TaxCategory', $item->getVatCategory(), $item->getVatRate());\n        }\n    }\n\n\n    /**\n     * Add tax total nodes\n     * @param UXML          $parent Parent element\n     * @param InvoiceTotals $totals Invoice totals\n     */\n    private function addTaxTotalNodes(UXML $parent, InvoiceTotals $totals) {\n        $xml = $parent->add('cac:TaxTotal');\n\n        // Add tax amount\n        $this->addAmountNode($xml, 'cbc:TaxAmount', $totals->vatAmount, $totals->currency);\n\n        // Add each tax details\n        foreach ($totals->vatBreakdown as $item) {\n            $vatBreakdownNode = $xml->add('cac:TaxSubtotal');\n            $this->addAmountNode($vatBreakdownNode, 'cbc:TaxableAmount', $item->taxableAmount, $totals->currency);\n            $this->addAmountNode($vatBreakdownNode, 'cbc:TaxAmount', $item->taxAmount, $totals->currency);\n            $this->addVatNode(\n                $vatBreakdownNode,\n                'cac:TaxCategory',\n                $item->category,\n                $item->rate,\n                $item->exemptionReasonCode,\n                $item->exemptionReason\n            );\n        }\n\n        // Add tax amount in VAT accounting currency (if any)\n        $customVatAmount = $totals->customVatAmount;\n        if ($customVatAmount !== null) {\n            $this->addAmountNode(\n                $parent->add('cac:TaxTotal'),\n                'cbc:TaxAmount',\n                $customVatAmount,\n                $totals->vatCurrency ?? $totals->currency\n            );\n        }\n    }\n\n\n    /**\n     * Add document totals node\n     * @param UXML          $parent Parent element\n     * @param InvoiceTotals $totals Invoice totals\n     */\n    private function addDocumentTotalsNode(UXML $parent, InvoiceTotals $totals) {\n        $xml = $parent->add('cac:LegalMonetaryTotal');\n\n        // Build totals matrix\n        $totalsMatrix = [];\n        $totalsMatrix['cbc:LineExtensionAmount'] = $totals->netAmount;\n        $totalsMatrix['cbc:TaxExclusiveAmount'] = $totals->taxExclusiveAmount;\n        $totalsMatrix['cbc:TaxInclusiveAmount'] = $totals->taxInclusiveAmount;\n        if ($totals->allowancesAmount > 0) {\n            $totalsMatrix['cbc:AllowanceTotalAmount'] = $totals->allowancesAmount;\n        }\n        if ($totals->chargesAmount > 0) {\n            $totalsMatrix['cbc:ChargeTotalAmount'] = $totals->chargesAmount;\n        }\n        if ($totals->paidAmount > 0) {\n            $totalsMatrix['cbc:PrepaidAmount'] = $totals->paidAmount;\n        }\n        if ($totals->roundingAmount != 0) {\n            $totalsMatrix['cbc:PayableRoundingAmount'] = $totals->roundingAmount;\n        }\n        $totalsMatrix['cbc:PayableAmount'] = $totals->payableAmount;\n\n        // Create and append XML nodes\n        foreach ($totalsMatrix as $field=>$amount) {\n            $this->addAmountNode($xml, $field, $amount, $totals->currency);\n        }\n    }\n\n\n    /**\n     * Add invoice line\n     * @param UXML        $parent              Parent XML element\n     * @param InvoiceLine $line                Invoice line\n     * @param Invoice     $invoice             Invoice instance\n     * @param boolean     $isCreditNoteProfile Is credit note profile\n     * @param int         &$lastGenId          Last used auto-generated ID\n     * @param string[]    &$usedIds            Used invoice line IDs\n     */\n    private function addLineNode(\n        UXML $parent,\n        InvoiceLine $line,\n        Invoice $invoice,\n        bool $isCreditNoteProfile,\n        int &$lastGenId,\n        array &$usedIds\n    ) {\n        $lineElementName = $isCreditNoteProfile ? \"cac:CreditNoteLine\" : \"cac:InvoiceLine\";\n        $xml = $parent->add($lineElementName);\n\n        // BT-126: Invoice line identifier\n        $lineId = $line->getId();\n        if ($lineId === null) {\n            do {\n                $lineId = (string) ++$lastGenId;\n            } while (in_array($lineId, $usedIds));\n        }\n        $xml->add('cbc:ID', $lineId);\n\n        // BT-127: Invoice line note\n        $note = $line->getNote();\n        if ($note !== null) {\n            $xml->add('cbc:Note', $note);\n        }\n\n        // BT-129: Invoiced quantity\n        $quantityElementName = $isCreditNoteProfile ? \"cbc:CreditedQuantity\" : \"cbc:InvoicedQuantity\";\n        $xml->add($quantityElementName, (string) $line->getQuantity(), ['unitCode' => $line->getUnit()]);\n\n        // BT-131: Line net amount\n        $netAmount = $line->getNetAmount();\n        if ($netAmount !== null) {\n            $this->addAmountNode(\n                $xml,\n                'cbc:LineExtensionAmount',\n                $invoice->round($netAmount, 'line/netAmount'),\n                $invoice->getCurrency()\n            );\n        }\n\n        // BT-133: Buyer accounting reference\n        $buyerAccountingReference = $line->getBuyerAccountingReference();\n        if ($buyerAccountingReference !== null) {\n            $xml->add('cbc:AccountingCost', $buyerAccountingReference);\n        }\n\n        // BG-26: Invoice line period\n        $this->addPeriodNode($xml, $line);\n\n        // BT-132: Order line reference\n        $orderLineReference = $line->getOrderLineReference();\n        if ($orderLineReference !== null) {\n            $xml->add('cac:OrderLineReference')->add('cbc:LineID', $orderLineReference);\n        }\n\n        // Allowances and charges\n        foreach ($line->getAllowances() as $item) {\n            $this->addAllowanceOrCharge($xml, $item, false, $invoice, null, $line);\n        }\n        foreach ($line->getCharges() as $item) {\n            $this->addAllowanceOrCharge($xml, $item, true, $invoice, null, $line);\n        }\n\n        // Initial item node\n        $itemNode = $xml->add('cac:Item');\n\n        // BT-154: Item description\n        $description = $line->getDescription();\n        if ($description !== null) {\n            $itemNode->add('cbc:Description', $description);\n        }\n\n        // BT-153: Item name\n        $name = $line->getName();\n        if ($name !== null) {\n            $itemNode->add('cbc:Name', $name);\n        }\n\n        // BT-156: Buyer identifier\n        $buyerIdentifier = $line->getBuyerIdentifier();\n        if ($buyerIdentifier !== null) {\n            $itemNode->add('cac:BuyersItemIdentification')->add('cbc:ID', $buyerIdentifier);\n        }\n\n        // BT-155: Seller identifier\n        $sellerIdentifier = $line->getSellerIdentifier();\n        if ($sellerIdentifier !== null) {\n            $itemNode->add('cac:SellersItemIdentification')->add('cbc:ID', $sellerIdentifier);\n        }\n\n        // BT-157: Standard identifier\n        $standardIdentifier = $line->getStandardIdentifier();\n        if ($standardIdentifier !== null) {\n            $this->addIdentifierNode($itemNode->add('cac:StandardItemIdentification'), 'cbc:ID', $standardIdentifier);\n        }\n\n        // BT-159: Item origin country\n        $originCountry = $line->getOriginCountry();\n        if ($originCountry !== null) {\n            $itemNode->add('cac:OriginCountry')->add('cbc:IdentificationCode', $originCountry);\n        }\n\n        // BT-158: Item classification identifiers\n        foreach ($line->getClassificationIdentifiers() as $identifier) {\n            $classNode = $itemNode->add('cac:CommodityClassification');\n            $this->addIdentifierNode($classNode, 'cbc:ItemClassificationCode', $identifier, 'listID');\n        }\n\n        // VAT node\n        $this->addVatNode($itemNode, 'cac:ClassifiedTaxCategory', $line->getVatCategory(), $line->getVatRate());\n\n        // BG-32: Item attributes\n        foreach ($line->getAttributes() as $attribute) {\n            $attributeNode = $itemNode->add('cac:AdditionalItemProperty');\n            $attributeNode->add('cbc:Name', $attribute->getName());\n            $attributeNode->add('cbc:Value', $attribute->getValue());\n        }\n\n        // Initial price node\n        $priceNode = $xml->add('cac:Price');\n\n        // Price amount\n        $price = $line->getPrice();\n        if ($price !== null) {\n            $this->addAmountNode(\n                $priceNode,\n                'cbc:PriceAmount',\n                $invoice->round($price, 'line/price'),\n                $invoice->getCurrency()\n            );\n        }\n\n        // Base quantity\n        $baseQuantity = $line->getBaseQuantity();\n        if ($baseQuantity != 1) {\n            $priceNode->add('cbc:BaseQuantity', (string) $baseQuantity, ['unitCode' => $line->getUnit()]);\n        }\n\n        return $xml;\n    }\n\n    /**\n     * Add attachment node\n     * @param UXML       $parent     Parent element\n     * @param Attachment $attachment Attachment instance\n     */\n    private function addAttachmentNode(UXML $parent, Attachment $attachment) {\n        $xml = $parent->add('cac:AdditionalDocumentReference');\n        $isInvoiceObjectReference = (!$attachment->hasExternalUrl() && !$attachment->hasContents());\n\n        // BT-122: Supporting document reference\n        $identifier = $attachment->getId();\n        if ($identifier !== null) {\n            $this->addIdentifierNode($xml, 'cbc:ID', $identifier);\n        }\n\n        // BT-18: Document type code\n        if ($isInvoiceObjectReference) {\n            // Code \"130\" MUST be used to indicate an invoice object reference\n            // Not used for other additional documents\n            $xml->add('cbc:DocumentTypeCode', '130');\n        }\n\n        // BT-123: Supporting document description\n        $description = $attachment->getDescription();\n        if ($description !== null) {\n            $xml->add('cbc:DocumentDescription', $description);\n        }\n\n        // Attachment inner node\n        if ($isInvoiceObjectReference) {\n            return; // Skip inner node in this case\n        }\n        $attXml = $xml->add('cac:Attachment');\n\n        // BT-125: Attached document\n        if ($attachment->hasContents()) {\n            $attrs = [];\n            $mimeCode = $attachment->getMimeCode();\n            $filename = $attachment->getFilename();\n            if ($mimeCode !== null) {\n                $attrs['mimeCode'] = $mimeCode;\n            }\n            if ($filename !== null) {\n                $attrs['filename'] = $filename;\n            }\n            $attXml->add('cbc:EmbeddedDocumentBinaryObject', base64_encode($attachment->getContents()), $attrs);\n        }\n\n        // BT-124: External document location\n        $externalUrl = $attachment->getExternalUrl();\n        if ($externalUrl !== null) {\n            $attXml->add('cac:ExternalReference')->add('cbc:URI', $externalUrl);\n        }\n    }\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "uxml": {
            "directory": {
              ".phan": {
                "directory": {
                  "config.php": {
                    "file": {
                      "contents": "<?php\nuse Phan\\Issue;\n\n/**\n * This configuration will be read and overlaid on top of the\n * default configuration. Command line arguments will be applied\n * after this file is read.\n *\n * @see https://github.com/phan/phan/wiki/Phan-Config-Settings for all configurable options\n * @see src/Phan/Config.php for the configurable options in this version of Phan\n *\n * A Note About Paths\n * ==================\n *\n * Files referenced from this file should be defined as\n *\n * ```\n *   Config::projectPath('relative_path/to/file')\n * ```\n *\n * where the relative path is relative to the root of the\n * project which is defined as either the working directory\n * of the phan executable or a path passed in via the CLI\n * '-d' flag.\n */\nreturn [\n    // The PHP version that the codebase will be checked for compatibility against.\n    // For best results, the PHP binary used to run Phan should have the same PHP version.\n    // (Phan relies on Reflection for some types, param counts,\n    // and checks for undefined classes/methods/functions)\n    //\n    // Supported values: `'5.6'`, `'7.0'`, `'7.1'`, `'7.2'`, `'7.3'`, `'7.4'`,\n    // `'8.0'`, `'8.1'`, `null`.\n    // If this is set to `null`,\n    // then Phan assumes the PHP version which is closest to the minor version\n    // of the php executable used to execute Phan.\n    //\n    // Note that the **only** effect of choosing `'5.6'` is to infer that functions removed in php 7.0 exist.\n    // (See `backward_compatibility_checks` for additional options)\n    'target_php_version' => null,\n\n    // A list of directories that should be parsed for class and\n    // method information. After excluding the directories\n    // defined in exclude_analysis_directory_list, the remaining\n    // files will be statically analyzed for errors.\n    //\n    // Thus, both first-party and third-party code being used by\n    // your application should be included in this list.\n    'directory_list' => [\n        'src',\n        'vendor',\n        '.phan/stubs',\n    ],\n\n    // A directory list that defines files that will be excluded\n    // from static analysis, but whose class and method\n    // information should be included.\n    //\n    // Generally, you'll want to include the directories for\n    // third-party code (such as \"vendor/\") in this list.\n    //\n    // n.b.: If you'd like to parse but not analyze 3rd\n    //       party code, directories containing that code\n    //       should be added to both the `directory_list`\n    //       and `exclude_analysis_directory_list` arrays.\n    'exclude_analysis_directory_list' => [\n        'vendor',\n        '.phan/stubs',\n    ],\n\n    // If enabled, Phan will warn if **any** type in a method invocation's object\n    // is definitely not an object,\n    // or if **any** type in an invoked expression is not a callable.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    'strict_method_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in the argument's union type\n    // cannot be cast to a type in the parameter's expected union type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    'strict_param_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in a property assignment's union type\n    // cannot be cast to a type in the property's declared union type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    // (For self-analysis, Phan has a large number of suppressions and file-level suppressions, due to \\ast\\Node being difficult to type check)\n    'strict_property_checking' => true,\n\n    // If enabled, Phan will warn if **any** type in a returned value's union type\n    // cannot be cast to the declared return type.\n    // Setting this to true will introduce numerous false positives\n    // (and reveal some bugs).\n    // (For self-analysis, Phan has a large number of suppressions and file-level suppressions, due to \\ast\\Node being difficult to type check)\n    'strict_return_checking' => true,\n\n    // If enabled, Phan will warn if **any** type of the object expression for a property access\n    // does not contain that property.\n    'strict_object_checking' => true,\n\n    // If enabled, check all methods that override a\n    // parent method to make sure its signature is\n    // compatible with the parent's. This check\n    // can add quite a bit of time to the analysis.\n    // This will also check if final methods are overridden, etc.\n    'analyze_signature_compatibility' => true,\n\n    // If true, check to make sure the return type declared\n    // in the doc-block (if any) matches the return type\n    // declared in the method signature.\n    'check_docblock_signature_return_type_match' => true,\n\n    // If true, check to make sure the param types declared\n    // in the doc-block (if any) matches the param types\n    // declared in the method signature.\n    'check_docblock_signature_param_type_match' => true,\n\n    // Set to true in order to attempt to detect dead\n    // (unreferenced) code. Keep in mind that the\n    // results will only be a guess given that classes,\n    // properties, constants and methods can be referenced\n    // as variables (like `$class->$property` or\n    // `$class->$method()`) in ways that we're unable\n    // to make sense of.\n    //\n    // To more aggressively detect dead code,\n    // you may want to set `dead_code_detection_prefer_false_negative` to `false`.\n    'dead_code_detection' => true,\n\n    // Set to true in order to attempt to detect redundant and impossible conditions.\n    //\n    // This has some false positives involving loops,\n    // variables set in branches of loops, and global variables.\n    'redundant_condition_detection' => true,\n\n    // Set to true in order to attempt to detect error-prone truthiness/falsiness checks.\n    //\n    // This is not suitable for all codebases.\n    'error_prone_truthy_condition_detection' => true,\n\n    // Enable or disable support for generic templated\n    // class types.\n    'generic_types_enabled' => true,\n\n    // If enabled, warn about throw statement where the exception types\n    // are not documented in the PHPDoc of functions, methods, and closures.\n    'warn_about_undocumented_throw_statements' => true,\n\n    // If enabled (and `warn_about_undocumented_throw_statements` is enabled),\n    // Phan will warn about function/closure/method invocations that have `@throws`\n    // that aren't caught or documented in the invoking method.\n    'warn_about_undocumented_exceptions_thrown_by_invoked_functions' => true,\n\n    // The minimum severity level to report on. This can be\n    // set to Issue::SEVERITY_LOW, Issue::SEVERITY_NORMAL or\n    // Issue::SEVERITY_CRITICAL.\n    'minimum_severity' => Issue::SEVERITY_LOW,\n\n    // Add any issue types (such as `'PhanUndeclaredMethod'`)\n    // to this list to inhibit them from being reported.\n    'suppress_issue_types' => [\n        'PhanUnreferencedClass',\n        'PhanUnreferencedPublicMethod',\n    ],\n\n    // A list of plugin files to execute.\n    // Plugins which are bundled with Phan can be added here by providing their name\n    // (e.g. 'AlwaysReturnPlugin')\n    //\n    // Documentation about available bundled plugins can be found\n    // at https://github.com/phan/phan/tree/v4/.phan/plugins\n    //\n    // Alternately, you can pass in the full path to a PHP file\n    // with the plugin's implementation.\n    // (e.g. 'vendor/phan/phan/.phan/plugins/AlwaysReturnPlugin.php')\n    'plugins' => [\n        'AlwaysReturnPlugin', // Checks if a function, closure or method unconditionally returns.\n        'DollarDollarPlugin',\n        'DuplicateArrayKeyPlugin',\n        'DuplicateExpressionPlugin',\n        'EmptyStatementListPlugin',\n        'InlineHTMLPlugin',\n        'LoopVariableReusePlugin',\n        'PreferNamespaceUsePlugin',\n        'PregRegexCheckerPlugin',\n        'PrintfCheckerPlugin',\n        'SleepCheckerPlugin',\n        'UnreachableCodePlugin', // Checks for syntactically unreachable statements in the global scope or function bodies.\n        'UseReturnValuePlugin',\n    ],\n];\n"
                    }
                  },
                  "stubs": {
                    "directory": {
                      "WeakMap.php": {
                        "file": {
                          "contents": "<?php\n/**\n * Weak maps allow creating a map from objects to arbitrary values\n * (similar to SplObjectStorage) without preventing the objects that are used\n * as keys from being garbage collected. If an object key is garbage collected,\n * it will simply be removed from the map.\n *\n * @since 8.0\n * @source https://github.com/JetBrains/phpstorm-stubs/blob/master/Core/Core_c.php\n *\n * @template TKey of object\n * @template TValue\n * @template-implements IteratorAggregate<TKey, TValue>\n */\nfinal class WeakMap implements ArrayAccess, Countable, IteratorAggregate {\n    /**\n     * Returns {@see true} if the value for the object is contained in\n     * the {@see WeakMap} and {@see false} instead.\n     *\n     * @param TKey $object Any object\n     * @return bool\n     */\n    public function offsetExists($object): bool {}\n\n    /**\n     * Returns the existsing value by an object.\n     *\n     * @param TKey $object Any object\n     * @return TValue Value associated with the key object\n     */\n    public function offsetGet($object): mixed {}\n\n    /**\n     * Sets a new value for an object.\n     *\n     * @param TKey $object Any object\n     * @param TValue $value Any value\n     * @return void\n     */\n    public function offsetSet($object, mixed $value): void {}\n\n    /**\n     * Force removes an object value from the {@see WeakMap} instance.\n     *\n     * @param TKey $object Any object\n     * @return void\n     */\n    public function offsetUnset($object): void {}\n\n    /**\n     * Returns an iterator in the \"[object => mixed]\" format.\n     *\n     * @return Traversable<TKey, TValue>\n     */\n    public function getIterator(): Iterator {}\n\n    /**\n     * Returns the number of items in the {@see WeakMap} instance.\n     *\n     * @return int\n     */\n    public function count(): int {}\n}\n"
                        }
                      }
                    }
                  }
                }
              },
              "composer.json": {
                "file": {
                  "contents": "{\n    \"name\": \"josemmo/uxml\",\n    \"description\": \"Uncomplicated XML manipulation library with a clean and concise syntax\",\n    \"keywords\": [\"xml\"],\n    \"license\": \"MIT\",\n    \"homepage\": \"https://github.com/josemmo/uxml\",\n    \"authors\": [\n        {\n            \"name\": \"José Miguel Moreno\",\n            \"email\": \"josemmo@pm.me\",\n            \"homepage\": \"https://github.com/josemmo\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"UXML\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=7.1\",\n        \"lib-libxml\": \"*\"\n    },\n    \"require-dev\": {\n        \"phan/phan\": \"*\",\n        \"symfony/phpunit-bridge\": \"*\"\n    }\n}\n"
                }
              },
              "phpunit.xml": {
                "file": {
                  "contents": "<?xml version=\"1.0\"?>\n<phpunit cacheResult=\"false\" colors=\"true\" bootstrap=\"vendor/autoload.php\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Tests\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
                }
              },
              "src": {
                "directory": {
                  "UXML.php": {
                    "file": {
                      "contents": "<?php\nnamespace UXML;\n\nuse DOMDocument;\nuse DOMElement;\nuse DOMException;\nuse DOMXPath;\nuse InvalidArgumentException;\nuse WeakMap;\n\nuse function class_exists;\nuse function count;\nuse function preg_replace_callback;\nuse function strpos;\nuse function strstr;\n\nclass UXML {\n    const NS_PREFIX = '__uxml_ns_';\n\n    /**\n     * DOMElement instances\n     * \n     * Map of DOMElement references used from PHP 8.0 to avoid \"Creation of dynamic property\" deprecation warning.\n     * In previous versions, a custom DOMElement::$uxml property is used to keep a reference to the UXML instance.\n     * \n     * @var WeakMap<DOMElement,self>|null|false\n     */\n    private static $elements = null;\n\n    /** @var DOMElement */\n    protected $element;\n\n    /**\n     * Create instance from XML string\n     * \n     * @param  string $xmlString XML string\n     * @return self              Root XML element\n     * @throws InvalidArgumentException if failed to parse XML\n     */\n    public static function fromString(string $xmlString): self {\n        $doc = new DOMDocument();\n        $doc->preserveWhiteSpace = false;\n        if ($doc->loadXML($xmlString) === false) {\n            throw new InvalidArgumentException('Failed to parse XML string');\n        }\n        return new self($doc->documentElement);\n    }\n\n    /**\n     * Create instance from DOM element\n     * \n     * @param  DOMElement $element DOM element\n     * @return self                Wrapped element as a UXML instance\n     * @suppress PhanUndeclaredProperty,PhanPossiblyNonClassMethodCall\n     */\n    public static function fromElement(DOMElement $element): self {\n        // For PHP versions supporting WeakMap\n        if (self::$elements) {\n            return self::$elements->offsetExists($element) ?\n                self::$elements->offsetGet($element) :\n                new self($element);\n        }\n\n        // Fallback to dynamic properties\n        return $element->uxml ?? new self($element);\n    }\n\n    /**\n     * Create new instance\n     * \n     * @param  string               $name  Element tag name\n     * @param  string|null          $value Element value or `null` for empty\n     * @param  array<string,string> $attrs Element attributes\n     * @param  DOMDocument|null     $doc   Document instance\n     * @return self                        New instance\n     * @throws DOMException if failed to create new instance\n     */\n    public static function newInstance(string $name, ?string $value=null, array $attrs=[], ?DOMDocument $doc=null): self {\n        $targetDoc = ($doc === null) ? new DOMDocument() : $doc;\n\n        // Get namespace\n        $prefix = strstr($name, ':', true) ?: '';\n        $namespace = $attrs[empty($prefix) ? 'xmlns' : \"xmlns:$prefix\"] ?? $targetDoc->lookupNamespaceUri($prefix);\n\n        // Create element\n        $domElement = ($namespace === null) ?\n            $targetDoc->createElement($name) :\n            $targetDoc->createElementNS($namespace, $name);\n        if ($domElement === false) {\n            throw new DOMException('Failed to create DOMElement');\n        }\n\n        // Append element to document (in case of new document)\n        if ($doc === null) {\n            $targetDoc->appendChild($domElement);\n        }\n\n        // Set content\n        if ($value !== null) {\n            $domElement->textContent = $value;\n        }\n\n        // Set attributes\n        foreach ($attrs as $attrName=>$attrValue) {\n            if ($attrName === 'xmlns' || strpos($attrName, 'xmlns:') === 0) {\n                $domElement->setAttributeNS('http://www.w3.org/2000/xmlns/', $attrName, $attrValue);\n            } else {\n                $domElement->setAttribute($attrName, $attrValue);\n            }\n        }\n\n        // Create instance\n        return new self($domElement);\n    }\n\n    /**\n     * Class constructor\n     * \n     * @param DOMElement $element DOM Element instance\n     * @suppress PhanUndeclaredProperty\n     */\n    private function __construct(DOMElement $element) {\n        // Initialize map of elements (if needed)\n        if (self::$elements === null) {\n            self::$elements = class_exists(WeakMap::class) ? new WeakMap() : false;\n        }\n\n        // Setup new instance\n        $this->element = $element;\n        if (self::$elements) {\n            self::$elements->offsetSet($this->element, $this); // @phan-suppress-current-line PhanPossiblyNonClassMethodCall\n        } else {\n            $this->element->uxml = $this;\n        }\n    }\n\n    /**\n     * Get DOM element instance\n     * \n     * @return DOMElement DOM element instance\n     */\n    public function element(): DOMElement {\n        return $this->element;\n    }\n\n    /**\n     * Get parent element\n     * \n     * @return self Parent element instance or this instance if it has no parent\n     */\n    public function parent(): self {\n        $parentNode = $this->element->parentNode;\n        return ($parentNode !== null && $parentNode instanceof DOMElement) ? self::fromElement($parentNode) : $this;\n    }\n\n    /**\n     * Is empty\n     * \n     * @return boolean `true` if the element has no inner content, `false` otherwise\n     */\n    public function isEmpty(): bool {\n        return ($this->element->childNodes->length === 0);\n    }\n\n    /**\n     * Add child element\n     * \n     * @param  string      $name  New element tag name\n     * @param  string|null $value New element value or `null` for empty\n     * @param  array       $attrs New element attributes\n     * @return self               New element instance\n     * @throws DOMException if failed to create child element\n     */\n    public function add(string $name, ?string $value=null, array $attrs=[]): self {\n        $child = self::newInstance($name, $value, $attrs, $this->element->ownerDocument);\n        $this->element->appendChild($child->element);\n        return $child;\n    }\n\n    /**\n     * Find elements\n     * \n     * @param  string   $xpath XPath query relative to this element\n     * @param  int|null $limit Maximum number of results to return\n     * @return self[]          Matched elements\n     */\n    public function getAll(string $xpath, ?int $limit=null): array {\n        $namespaces = [];\n        $xpath = preg_replace_callback('/{(.+?)}/', static function($match) use (&$namespaces) {\n            $ns = $match[1];\n            if (!isset($namespaces[$ns])) {\n                $namespaces[$ns] = self::NS_PREFIX . count($namespaces);\n            }\n            return $namespaces[$ns] . ':';\n        }, $xpath);\n\n        // Create instance\n        // @phan-suppress-next-line PhanTypeMismatchArgumentNullableInternal\n        $xpathInstance = new DOMXPath($this->element->ownerDocument);\n        foreach ($namespaces as $ns=>$prefix) {\n            $xpathInstance->registerNamespace($prefix, $ns);\n        }\n\n        // Parse results\n        $res = [];\n        $domNodes = $xpathInstance->query($xpath, $this->element);\n        foreach ($domNodes as $domNode) {\n            if (!$domNode instanceof DOMElement) continue;\n            $res[] = self::fromElement($domNode);\n            if ($limit !== null && --$limit <= 0) break;\n        }\n\n        return $res;\n    }\n\n    /**\n     * Find one element\n     * \n     * @param  string    $xpath XPath query relative to this element\n     * @return self|null        First matched element or NULL if not found\n     */\n    public function get(string $xpath): ?self {\n        $res = $this->getAll($xpath, 1);\n        return $res[0] ?? null;\n    }\n\n    /**\n     * Remove this element\n     * \n     * After calling this method on an instance it will become unusable.\n     * Calling it on a root element will have no effect.\n     */\n    public function remove(): void {\n        $parent = $this->element->parentNode;\n        if ($parent !== null) {\n            $parent->removeChild($this->element);\n        }\n    }\n\n    /**\n     * Export element and children as text\n     * \n     * @return string Text representation\n     */\n    public function asText(): string {\n        return $this->element->textContent;\n    }\n\n    /**\n     * Export as XML string\n     * \n     * @param  string|null $version  Document version, `null` for no declaration\n     * @param  string      $encoding Document encoding\n     * @param  boolean     $format   Format output\n     * @return string                XML string\n     */\n    public function asXML(?string $version='1.0', string $encoding='UTF-8', bool $format=true): string {\n        $doc = new DOMDocument();\n\n        // Define document properties\n        if ($version === null) {\n            $doc->xmlStandalone = true;\n        } else {\n            $doc->xmlVersion = $version;\n        }\n        $doc->encoding = $encoding;\n        $doc->formatOutput = $format;\n\n        // Export XML string\n        $rootNode = $doc->importNode($this->element, true);\n        if ($rootNode !== false) {\n            $doc->appendChild($rootNode);\n        }\n        $res = ($version === null) ? $doc->saveXML($doc->documentElement) : $doc->saveXML();\n        unset($doc);\n\n        return $res;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function __toString(): string {\n        return $this->asXML(null, 'UTF-8', false);\n    }\n}\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}